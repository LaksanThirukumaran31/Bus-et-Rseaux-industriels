
TP_BusReseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005574  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005880  08005880  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08005880  08005880  00015880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005888  08005888  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000008c  0800591c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0800591c  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eaa3  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028c3  00000000  00000000  0002eba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  00031468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009bb  00000000  00000000  00032108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023502  00000000  00000000  00032ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012543  00000000  00000000  00055fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf2a7  00000000  00000000  00068508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b3c  00000000  00000000  001377b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013b2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800572c 	.word	0x0800572c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	0800572c 	.word	0x0800572c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <devID_BMP>:
int16_t  dig_P7 = 0x8C;
int16_t  dig_P8 = 0xF8;
int16_t  dig_P9 = 0x70;

void devID_BMP(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af02      	add	r7, sp, #8
	printf("Debut de l'ID\r\n");
 80005b2:	480f      	ldr	r0, [pc, #60]	; (80005f0 <devID_BMP+0x44>)
 80005b4:	f004 fa1e 	bl	80049f4 <puts>
	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&dev_ID, 1, HAL_MAX_DELAY);
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2301      	movs	r3, #1
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <devID_BMP+0x48>)
 80005c2:	21ee      	movs	r1, #238	; 0xee
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <devID_BMP+0x4c>)
 80005c6:	f001 fca9 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1)|0x01, dataBuffer, sizeof(dataBuffer), HAL_MAX_DELAY);
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2308      	movs	r3, #8
 80005d2:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <devID_BMP+0x50>)
 80005d4:	21ef      	movs	r1, #239	; 0xef
 80005d6:	4808      	ldr	r0, [pc, #32]	; (80005f8 <devID_BMP+0x4c>)
 80005d8:	f001 fd9e 	bl	8002118 <HAL_I2C_Master_Receive>
	printf("%s",dataBuffer);
 80005dc:	4907      	ldr	r1, [pc, #28]	; (80005fc <devID_BMP+0x50>)
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <devID_BMP+0x54>)
 80005e0:	f004 f99a 	bl	8004918 <iprintf>
	printf("Fin ID\r\n");
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <devID_BMP+0x58>)
 80005e6:	f004 fa05 	bl	80049f4 <puts>
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	08005744 	.word	0x08005744
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000114 	.word	0x20000114
 80005fc:	200000a8 	.word	0x200000a8
 8000600:	08005754 	.word	0x08005754
 8000604:	08005758 	.word	0x08005758

08000608 <setConfig_BMP>:

void setConfig_BMP(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af02      	add	r7, sp, #8
	printf("Debut de la config\r\n");
 800060e:	4810      	ldr	r0, [pc, #64]	; (8000650 <setConfig_BMP+0x48>)
 8000610:	f004 f9f0 	bl	80049f4 <puts>
	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,TabConfig, 2, HAL_MAX_DELAY);
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2302      	movs	r3, #2
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <setConfig_BMP+0x4c>)
 800061e:	21ee      	movs	r1, #238	; 0xee
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <setConfig_BMP+0x50>)
 8000622:	f001 fc7b 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, Sendback, sizeof(Sendback), HAL_MAX_DELAY);
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2308      	movs	r3, #8
 800062e:	4a0b      	ldr	r2, [pc, #44]	; (800065c <setConfig_BMP+0x54>)
 8000630:	21ef      	movs	r1, #239	; 0xef
 8000632:	4809      	ldr	r0, [pc, #36]	; (8000658 <setConfig_BMP+0x50>)
 8000634:	f001 fd70 	bl	8002118 <HAL_I2C_Master_Receive>
	uint8_t newvalue= Sendback[0];
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <setConfig_BMP+0x54>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	71fb      	strb	r3, [r7, #7]
	printf("%02X\r\n",newvalue);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4619      	mov	r1, r3
 8000642:	4807      	ldr	r0, [pc, #28]	; (8000660 <setConfig_BMP+0x58>)
 8000644:	f004 f968 	bl	8004918 <iprintf>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	08005760 	.word	0x08005760
 8000654:	20000004 	.word	0x20000004
 8000658:	20000114 	.word	0x20000114
 800065c:	200000b0 	.word	0x200000b0
 8000660:	08005774 	.word	0x08005774

08000664 <temperatureNonCompense>:


uint32_t temperatureNonCompense(void){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&TMsbAdress, 1, HAL_MAX_DELAY);
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2301      	movs	r3, #1
 8000672:	4a30      	ldr	r2, [pc, #192]	; (8000734 <temperatureNonCompense+0xd0>)
 8000674:	21ee      	movs	r1, #238	; 0xee
 8000676:	4830      	ldr	r0, [pc, #192]	; (8000738 <temperatureNonCompense+0xd4>)
 8000678:	f001 fc50 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, T_Msb, sizeof(T_Msb), HAL_MAX_DELAY);
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2308      	movs	r3, #8
 8000684:	4a2d      	ldr	r2, [pc, #180]	; (800073c <temperatureNonCompense+0xd8>)
 8000686:	21ef      	movs	r1, #239	; 0xef
 8000688:	482b      	ldr	r0, [pc, #172]	; (8000738 <temperatureNonCompense+0xd4>)
 800068a:	f001 fd45 	bl	8002118 <HAL_I2C_Master_Receive>
	uint8_t MSB= T_Msb[0];
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <temperatureNonCompense+0xd8>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&TLsbAdress, 1, HAL_MAX_DELAY);
 8000694:	f04f 33ff 	mov.w	r3, #4294967295
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	4a28      	ldr	r2, [pc, #160]	; (8000740 <temperatureNonCompense+0xdc>)
 800069e:	21ee      	movs	r1, #238	; 0xee
 80006a0:	4825      	ldr	r0, [pc, #148]	; (8000738 <temperatureNonCompense+0xd4>)
 80006a2:	f001 fc3b 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, T_Lsb, sizeof(T_Lsb), HAL_MAX_DELAY);
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2308      	movs	r3, #8
 80006ae:	4a25      	ldr	r2, [pc, #148]	; (8000744 <temperatureNonCompense+0xe0>)
 80006b0:	21ef      	movs	r1, #239	; 0xef
 80006b2:	4821      	ldr	r0, [pc, #132]	; (8000738 <temperatureNonCompense+0xd4>)
 80006b4:	f001 fd30 	bl	8002118 <HAL_I2C_Master_Receive>
	uint8_t LSB= T_Lsb[0];
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <temperatureNonCompense+0xe0>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&TxLsbAdress, 1, HAL_MAX_DELAY);
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	4a20      	ldr	r2, [pc, #128]	; (8000748 <temperatureNonCompense+0xe4>)
 80006c8:	21ee      	movs	r1, #238	; 0xee
 80006ca:	481b      	ldr	r0, [pc, #108]	; (8000738 <temperatureNonCompense+0xd4>)
 80006cc:	f001 fc26 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, T_xLsb, sizeof(T_xLsb), HAL_MAX_DELAY);
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2304      	movs	r3, #4
 80006d8:	4a1c      	ldr	r2, [pc, #112]	; (800074c <temperatureNonCompense+0xe8>)
 80006da:	21ef      	movs	r1, #239	; 0xef
 80006dc:	4816      	ldr	r0, [pc, #88]	; (8000738 <temperatureNonCompense+0xd4>)
 80006de:	f001 fd1b 	bl	8002118 <HAL_I2C_Master_Receive>
	uint8_t xLSB= T_xLsb[0];
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <temperatureNonCompense+0xe8>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	717b      	strb	r3, [r7, #5]

	TempValue |= ((uint32_t)MSB << 12);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	031a      	lsls	r2, r3, #12
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <temperatureNonCompense+0xec>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	4a17      	ldr	r2, [pc, #92]	; (8000750 <temperatureNonCompense+0xec>)
 80006f4:	6013      	str	r3, [r2, #0]
	TempValue |= ((uint32_t)LSB << 4);
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	011a      	lsls	r2, r3, #4
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <temperatureNonCompense+0xec>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4313      	orrs	r3, r2
 8000700:	4a13      	ldr	r2, [pc, #76]	; (8000750 <temperatureNonCompense+0xec>)
 8000702:	6013      	str	r3, [r2, #0]
	TempValue |= (xLSB & 0x0F);
 8000704:	797b      	ldrb	r3, [r7, #5]
 8000706:	f003 020f 	and.w	r2, r3, #15
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <temperatureNonCompense+0xec>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4313      	orrs	r3, r2
 8000710:	4a0f      	ldr	r2, [pc, #60]	; (8000750 <temperatureNonCompense+0xec>)
 8000712:	6013      	str	r3, [r2, #0]

	printf("La temprature non compense est de : %lX\r\n", TempValue);
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <temperatureNonCompense+0xec>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	480e      	ldr	r0, [pc, #56]	; (8000754 <temperatureNonCompense+0xf0>)
 800071c:	f004 f8fc 	bl	8004918 <iprintf>
	printf("\n");
 8000720:	200a      	movs	r0, #10
 8000722:	f004 f90b 	bl	800493c <putchar>
	return TempValue;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <temperatureNonCompense+0xec>)
 8000728:	681b      	ldr	r3, [r3, #0]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000006 	.word	0x20000006
 8000738:	20000114 	.word	0x20000114
 800073c:	200000b8 	.word	0x200000b8
 8000740:	20000007 	.word	0x20000007
 8000744:	200000c0 	.word	0x200000c0
 8000748:	20000008 	.word	0x20000008
 800074c:	200000c8 	.word	0x200000c8
 8000750:	200000cc 	.word	0x200000cc
 8000754:	0800577c 	.word	0x0800577c

08000758 <pressionNonCompense>:
uint32_t pressionNonCompense(void){
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&PMsbAdress, 1, HAL_MAX_DELAY);
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2301      	movs	r3, #1
 8000766:	4a30      	ldr	r2, [pc, #192]	; (8000828 <pressionNonCompense+0xd0>)
 8000768:	21ee      	movs	r1, #238	; 0xee
 800076a:	4830      	ldr	r0, [pc, #192]	; (800082c <pressionNonCompense+0xd4>)
 800076c:	f001 fbd6 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, P_Msb, sizeof(P_Msb), HAL_MAX_DELAY);
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2308      	movs	r3, #8
 8000778:	4a2d      	ldr	r2, [pc, #180]	; (8000830 <pressionNonCompense+0xd8>)
 800077a:	21ef      	movs	r1, #239	; 0xef
 800077c:	482b      	ldr	r0, [pc, #172]	; (800082c <pressionNonCompense+0xd4>)
 800077e:	f001 fccb 	bl	8002118 <HAL_I2C_Master_Receive>
	uint8_t PMSB= P_Msb[0];
 8000782:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <pressionNonCompense+0xd8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&PLsbAdress, 1, HAL_MAX_DELAY);
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2301      	movs	r3, #1
 8000790:	4a28      	ldr	r2, [pc, #160]	; (8000834 <pressionNonCompense+0xdc>)
 8000792:	21ee      	movs	r1, #238	; 0xee
 8000794:	4825      	ldr	r0, [pc, #148]	; (800082c <pressionNonCompense+0xd4>)
 8000796:	f001 fbc1 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, P_Lsb, sizeof(P_Lsb), HAL_MAX_DELAY);
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2308      	movs	r3, #8
 80007a2:	4a25      	ldr	r2, [pc, #148]	; (8000838 <pressionNonCompense+0xe0>)
 80007a4:	21ef      	movs	r1, #239	; 0xef
 80007a6:	4821      	ldr	r0, [pc, #132]	; (800082c <pressionNonCompense+0xd4>)
 80007a8:	f001 fcb6 	bl	8002118 <HAL_I2C_Master_Receive>
	uint8_t PLSB= P_Lsb[0];
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <pressionNonCompense+0xe0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&PxLsbAdress, 1, HAL_MAX_DELAY);
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2301      	movs	r3, #1
 80007ba:	4a20      	ldr	r2, [pc, #128]	; (800083c <pressionNonCompense+0xe4>)
 80007bc:	21ee      	movs	r1, #238	; 0xee
 80007be:	481b      	ldr	r0, [pc, #108]	; (800082c <pressionNonCompense+0xd4>)
 80007c0:	f001 fbac 	bl	8001f1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, P_xLsb, sizeof(P_xLsb), HAL_MAX_DELAY);
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2304      	movs	r3, #4
 80007cc:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <pressionNonCompense+0xe8>)
 80007ce:	21ef      	movs	r1, #239	; 0xef
 80007d0:	4816      	ldr	r0, [pc, #88]	; (800082c <pressionNonCompense+0xd4>)
 80007d2:	f001 fca1 	bl	8002118 <HAL_I2C_Master_Receive>
	uint8_t PxLSB= P_xLsb[0];
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <pressionNonCompense+0xe8>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	717b      	strb	r3, [r7, #5]

	PressValue |= ((uint32_t)PMSB << 12);
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	031a      	lsls	r2, r3, #12
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <pressionNonCompense+0xec>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <pressionNonCompense+0xec>)
 80007e8:	6013      	str	r3, [r2, #0]
	PressValue |= ((uint32_t)PLSB << 4);
 80007ea:	79bb      	ldrb	r3, [r7, #6]
 80007ec:	011a      	lsls	r2, r3, #4
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <pressionNonCompense+0xec>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	4a13      	ldr	r2, [pc, #76]	; (8000844 <pressionNonCompense+0xec>)
 80007f6:	6013      	str	r3, [r2, #0]
	PressValue |= (PxLSB & 0x0F);
 80007f8:	797b      	ldrb	r3, [r7, #5]
 80007fa:	f003 020f 	and.w	r2, r3, #15
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <pressionNonCompense+0xec>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4313      	orrs	r3, r2
 8000804:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <pressionNonCompense+0xec>)
 8000806:	6013      	str	r3, [r2, #0]

	printf("La pression non compense  est de : %lX\r\n", PressValue);
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <pressionNonCompense+0xec>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	480e      	ldr	r0, [pc, #56]	; (8000848 <pressionNonCompense+0xf0>)
 8000810:	f004 f882 	bl	8004918 <iprintf>
	printf("\n");
 8000814:	200a      	movs	r0, #10
 8000816:	f004 f891 	bl	800493c <putchar>
	return PressValue;
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <pressionNonCompense+0xec>)
 800081c:	681b      	ldr	r3, [r3, #0]

}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000009 	.word	0x20000009
 800082c:	20000114 	.word	0x20000114
 8000830:	200000d0 	.word	0x200000d0
 8000834:	2000000a 	.word	0x2000000a
 8000838:	200000d8 	.word	0x200000d8
 800083c:	2000000b 	.word	0x2000000b
 8000840:	200000e0 	.word	0x200000e0
 8000844:	200000e4 	.word	0x200000e4
 8000848:	080057a8 	.word	0x080057a8

0800084c <bmp280_compensate_T_int32>:
BMP280_S32_t t_fine;
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
 800084c:	b480      	push	{r7}
 800084e:	b087      	sub	sp, #28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	10da      	asrs	r2, r3, #3
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <bmp280_compensate_T_int32+0x74>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <bmp280_compensate_T_int32+0x78>)
 8000862:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000866:	fb02 f303 	mul.w	r3, r2, r3
 800086a:	12db      	asrs	r3, r3, #11
 800086c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	111b      	asrs	r3, r3, #4
 8000872:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <bmp280_compensate_T_int32+0x74>)
 8000874:	8812      	ldrh	r2, [r2, #0]
 8000876:	1a9b      	subs	r3, r3, r2
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	1112      	asrs	r2, r2, #4
 800087c:	4910      	ldr	r1, [pc, #64]	; (80008c0 <bmp280_compensate_T_int32+0x74>)
 800087e:	8809      	ldrh	r1, [r1, #0]
 8000880:	1a52      	subs	r2, r2, r1
 8000882:	fb02 f303 	mul.w	r3, r2, r3
 8000886:	131b      	asrs	r3, r3, #12
			((BMP280_S32_t)dig_T3)) >> 14;
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <bmp280_compensate_T_int32+0x7c>)
 800088a:	f9b2 2000 	ldrsh.w	r2, [r2]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 800088e:	fb02 f303 	mul.w	r3, r2, r3
 8000892:	139b      	asrs	r3, r3, #14
 8000894:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	4413      	add	r3, r2
 800089c:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <bmp280_compensate_T_int32+0x80>)
 800089e:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <bmp280_compensate_T_int32+0x80>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	3380      	adds	r3, #128	; 0x80
 80008ac:	121b      	asrs	r3, r3, #8
 80008ae:	60fb      	str	r3, [r7, #12]
	return T;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	2000000c 	.word	0x2000000c
 80008c4:	2000000e 	.word	0x2000000e
 80008c8:	20000010 	.word	0x20000010
 80008cc:	200000e8 	.word	0x200000e8

080008d0 <bmp280_compensate_P_int32>:
// Returns pressure in Pa as unsigned 32 bit integer. Output value of “96386” equals 96386 Pa = 963.86 hPa
BMP280_U32_t bmp280_compensate_P_int32(BMP280_S32_t adc_P)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2;
	BMP280_U32_t p;
	var1 = (((BMP280_S32_t)t_fine)>>1) - (BMP280_S32_t)64000;
 80008d8:	4b4a      	ldr	r3, [pc, #296]	; (8000a04 <bmp280_compensate_P_int32+0x134>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	105b      	asrs	r3, r3, #1
 80008de:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 80008e2:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((BMP280_S32_t)dig_P6);
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	109b      	asrs	r3, r3, #2
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	1092      	asrs	r2, r2, #2
 80008ec:	fb02 f303 	mul.w	r3, r2, r3
 80008f0:	12db      	asrs	r3, r3, #11
 80008f2:	4a45      	ldr	r2, [pc, #276]	; (8000a08 <bmp280_compensate_P_int32+0x138>)
 80008f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((BMP280_S32_t)dig_P5))<<1);
 80008fe:	4b43      	ldr	r3, [pc, #268]	; (8000a0c <bmp280_compensate_P_int32+0x13c>)
 8000900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000904:	461a      	mov	r2, r3
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	fb02 f303 	mul.w	r3, r2, r3
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((BMP280_S32_t)dig_P4)<<16);
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	109a      	asrs	r2, r3, #2
 8000918:	4b3d      	ldr	r3, [pc, #244]	; (8000a10 <bmp280_compensate_P_int32+0x140>)
 800091a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800091e:	041b      	lsls	r3, r3, #16
 8000920:	4413      	add	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
	var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((BMP280_S32_t)dig_P2) * var1)>>1))>>18;
 8000924:	4b3b      	ldr	r3, [pc, #236]	; (8000a14 <bmp280_compensate_P_int32+0x144>)
 8000926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092a:	4619      	mov	r1, r3
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	109b      	asrs	r3, r3, #2
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	1092      	asrs	r2, r2, #2
 8000934:	fb02 f303 	mul.w	r3, r2, r3
 8000938:	135b      	asrs	r3, r3, #13
 800093a:	fb01 f303 	mul.w	r3, r1, r3
 800093e:	10da      	asrs	r2, r3, #3
 8000940:	4b35      	ldr	r3, [pc, #212]	; (8000a18 <bmp280_compensate_P_int32+0x148>)
 8000942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000946:	4619      	mov	r1, r3
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	fb01 f303 	mul.w	r3, r1, r3
 800094e:	105b      	asrs	r3, r3, #1
 8000950:	4413      	add	r3, r2
 8000952:	149b      	asrs	r3, r3, #18
 8000954:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((BMP280_S32_t)dig_P1))>>15);
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800095c:	4a2f      	ldr	r2, [pc, #188]	; (8000a1c <bmp280_compensate_P_int32+0x14c>)
 800095e:	8812      	ldrh	r2, [r2, #0]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	13db      	asrs	r3, r3, #15
 8000966:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <bmp280_compensate_P_int32+0xa2>
	{
		return 0; // avoid exception caused by division by zero
 800096e:	2300      	movs	r3, #0
 8000970:	e041      	b.n	80009f6 <bmp280_compensate_P_int32+0x126>
	}
	p = (((BMP280_U32_t)(((BMP280_S32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	131b      	asrs	r3, r3, #12
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4413      	add	r3, r2
 800097c:	4a28      	ldr	r2, [pc, #160]	; (8000a20 <bmp280_compensate_P_int32+0x150>)
 800097e:	fb02 f303 	mul.w	r3, r2, r3
 8000982:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8000986:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800098a:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	2b00      	cmp	r3, #0
 8000990:	db06      	blt.n	80009a0 <bmp280_compensate_P_int32+0xd0>
	{
		p = (p << 1) / ((BMP280_U32_t)var1);
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005a      	lsls	r2, r3, #1
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	fbb2 f3f3 	udiv	r3, r2, r3
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	e005      	b.n	80009ac <bmp280_compensate_P_int32+0xdc>
	}
	else
	{
		p = (p / (BMP280_U32_t)var1) * 2;
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
	}
	var1 = (((BMP280_S32_t)dig_P9) * ((BMP280_S32_t)(((p>>3) * (p>>3))>>13)))>>12;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <bmp280_compensate_P_int32+0x154>)
 80009ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b2:	4619      	mov	r1, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	08d2      	lsrs	r2, r2, #3
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	0b5b      	lsrs	r3, r3, #13
 80009c2:	fb01 f303 	mul.w	r3, r1, r3
 80009c6:	131b      	asrs	r3, r3, #12
 80009c8:	613b      	str	r3, [r7, #16]
	var2 = (((BMP280_S32_t)(p>>2)) * ((BMP280_S32_t)dig_P8))>>13;
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	089b      	lsrs	r3, r3, #2
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <bmp280_compensate_P_int32+0x158>)
 80009d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d6:	fb02 f303 	mul.w	r3, r2, r3
 80009da:	135b      	asrs	r3, r3, #13
 80009dc:	60fb      	str	r3, [r7, #12]
	p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <bmp280_compensate_P_int32+0x15c>)
 80009e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80009ea:	4413      	add	r3, r2
 80009ec:	111a      	asrs	r2, r3, #4
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	4413      	add	r3, r2
 80009f2:	617b      	str	r3, [r7, #20]
	return p;
 80009f4:	697b      	ldr	r3, [r7, #20]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	371c      	adds	r7, #28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	200000e8 	.word	0x200000e8
 8000a08:	2000001c 	.word	0x2000001c
 8000a0c:	2000001a 	.word	0x2000001a
 8000a10:	20000018 	.word	0x20000018
 8000a14:	20000016 	.word	0x20000016
 8000a18:	20000014 	.word	0x20000014
 8000a1c:	20000012 	.word	0x20000012
 8000a20:	fffff3cb 	.word	0xfffff3cb
 8000a24:	20000022 	.word	0x20000022
 8000a28:	20000020 	.word	0x20000020
 8000a2c:	2000001e 	.word	0x2000001e

08000a30 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a36:	4a18      	ldr	r2, [pc, #96]	; (8000a98 <MX_CAN1_Init+0x68>)
 8000a38:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a3c:	2206      	movs	r2, #6
 8000a3e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a4e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000a52:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a5a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_CAN1_Init+0x64>)
 8000a82:	f000 fcb9 	bl	80013f8 <HAL_CAN_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a8c:	f000 f9f4 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000ec 	.word	0x200000ec
 8000a98:	40006400 	.word	0x40006400

08000a9c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <HAL_CAN_MspInit+0x84>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d12c      	bne.n	8000b18 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_CAN_MspInit+0x88>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <HAL_CAN_MspInit+0x88>)
 8000ac8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_CAN_MspInit+0x88>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_CAN_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <HAL_CAN_MspInit+0x88>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_CAN_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000af6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b08:	2309      	movs	r3, #9
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_CAN_MspInit+0x8c>)
 8000b14:	f000 ff10 	bl	8001938 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	; 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40006400 	.word	0x40006400
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a2c      	ldr	r2, [pc, #176]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a25      	ldr	r2, [pc, #148]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_GPIO_Init+0xd0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	4812      	ldr	r0, [pc, #72]	; (8000c00 <MX_GPIO_Init+0xd4>)
 8000bb8:	f001 f852 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480c      	ldr	r0, [pc, #48]	; (8000c04 <MX_GPIO_Init+0xd8>)
 8000bd4:	f000 feb0 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bd8:	2320      	movs	r3, #32
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_GPIO_Init+0xd4>)
 8000bf0:	f000 fea2 	bl	8001938 <HAL_GPIO_Init>

}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000
 8000c04:	40020800 	.word	0x40020800

08000c08 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <MX_I2C1_Init+0x54>)
 8000c10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c14:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <MX_I2C1_Init+0x58>)
 8000c16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c46:	f001 f825 	bl	8001c94 <HAL_I2C_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c50:	f000 f912 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000114 	.word	0x20000114
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	000186a0 	.word	0x000186a0

08000c64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <HAL_I2C_MspInit+0x84>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12c      	bne.n	8000ce0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ca2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca8:	2312      	movs	r3, #18
 8000caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <HAL_I2C_MspInit+0x8c>)
 8000cc0:	f000 fe3a 	bl	8001938 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000cce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_I2C_MspInit+0x88>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	; 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40005400 	.word	0x40005400
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f000 fb0c 	bl	8001314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f84e 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f7ff ff14 	bl	8000b2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d04:	f000 f9e2 	bl	80010cc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d08:	f7ff ff7e 	bl	8000c08 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000d0c:	f7ff fe90 	bl	8000a30 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8000d10:	f000 fa06 	bl	8001120 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  devID_BMP();
 8000d14:	f7ff fc4a 	bl	80005ac <devID_BMP>
  setConfig_BMP();
 8000d18:	f7ff fc76 	bl	8000608 <setConfig_BMP>
  noneCompesatedTemperature=temperatureNonCompense();
 8000d1c:	f7ff fca2 	bl	8000664 <temperatureNonCompense>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <main+0x8c>)
 8000d24:	6013      	str	r3, [r2, #0]
  nonecompesatedPression=pressionNonCompense();
 8000d26:	f7ff fd17 	bl	8000758 <pressionNonCompense>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <main+0x90>)
 8000d2e:	6013      	str	r3, [r2, #0]
  compensatedTemperature= bmp280_compensate_T_int32(noneCompesatedTemperature);
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <main+0x8c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fd89 	bl	800084c <bmp280_compensate_T_int32>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <main+0x94>)
 8000d3e:	6013      	str	r3, [r2, #0]
  compensatedPression = bmp280_compensate_P_int32(nonecompesatedPression);
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <main+0x90>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fdc3 	bl	80008d0 <bmp280_compensate_P_int32>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <main+0x98>)
 8000d50:	601a      	str	r2, [r3, #0]
  printf("La valeur de la pression compense = %d hPa\n\r",(int)(compensatedPression/100));
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <main+0x98>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <main+0x9c>)
 8000d58:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5c:	095b      	lsrs	r3, r3, #5
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <main+0xa0>)
 8000d62:	f003 fdd9 	bl	8004918 <iprintf>
  printf("La valeur de la temperature compensé = %d C\n\r",(int)(compensatedTemperature/100));
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <main+0x94>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <main+0x9c>)
 8000d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d70:	1152      	asrs	r2, r2, #5
 8000d72:	17db      	asrs	r3, r3, #31
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	4619      	mov	r1, r3
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <main+0xa4>)
 8000d7a:	f003 fdcd 	bl	8004918 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000d7e:	e7fe      	b.n	8000d7e <main+0x8a>
 8000d80:	2000016c 	.word	0x2000016c
 8000d84:	20000168 	.word	0x20000168
 8000d88:	20000170 	.word	0x20000170
 8000d8c:	20000174 	.word	0x20000174
 8000d90:	51eb851f 	.word	0x51eb851f
 8000d94:	080057d4 	.word	0x080057d4
 8000d98:	08005804 	.word	0x08005804

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b094      	sub	sp, #80	; 0x50
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2234      	movs	r2, #52	; 0x34
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 ff02 	bl	8004bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <SystemClock_Config+0xd4>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a29      	ldr	r2, [pc, #164]	; (8000e70 <SystemClock_Config+0xd4>)
 8000dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd0:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <SystemClock_Config+0xd4>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ddc:	2300      	movs	r3, #0
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <SystemClock_Config+0xd8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000de8:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <SystemClock_Config+0xd8>)
 8000dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <SystemClock_Config+0xd8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e00:	2301      	movs	r3, #1
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e04:	2310      	movs	r3, #16
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e10:	2310      	movs	r3, #16
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e14:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 fa12 	bl	8003254 <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e36:	f000 f81f 	bl	8000e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	2102      	movs	r1, #2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 feb2 	bl	8002bc0 <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e62:	f000 f809 	bl	8000e78 <Error_Handler>
  }
}
 8000e66:	bf00      	nop
 8000e68:	3750      	adds	r7, #80	; 0x50
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40007000 	.word	0x40007000

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e80:	e7fe      	b.n	8000e80 <Error_Handler+0x8>
	...

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_MspInit+0x4c>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ec2:	2007      	movs	r0, #7
 8000ec4:	f000 fc64 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000edc:	1d39      	adds	r1, r7, #4
 8000ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <__io_putchar+0x20>)
 8000ee6:	f002 fca0 	bl	800382a <HAL_UART_Transmit>

  return ch;
 8000eea:	687b      	ldr	r3, [r7, #4]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000017c 	.word	0x2000017c

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <NMI_Handler+0x4>

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f44:	f000 fa38 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <USART3_IRQHandler+0x10>)
 8000f52:	f002 fcfd 	bl	8003950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200001c0 	.word	0x200001c0

08000f60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e00a      	b.n	8000f88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f72:	f3af 8000 	nop.w
 8000f76:	4601      	mov	r1, r0
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	b2ca      	uxtb	r2, r1
 8000f80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbf0      	blt.n	8000f72 <_read+0x12>
  }

  return len;
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e009      	b.n	8000fc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	60ba      	str	r2, [r7, #8]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff8d 	bl	8000ed4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf1      	blt.n	8000fac <_write+0x12>
  }
  return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_close>:

int _close(int file)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffa:	605a      	str	r2, [r3, #4]
  return 0;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_isatty>:

int _isatty(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	; (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f003 fdf0 	bl	8004c50 <__errno>
 8001070:	4603      	mov	r3, r0
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20020000 	.word	0x20020000
 800109c:	00000400 	.word	0x00000400
 80010a0:	20000178 	.word	0x20000178
 80010a4:	20000358 	.word	0x20000358

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_USART2_UART_Init+0x4c>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <MX_USART2_UART_Init+0x50>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_USART2_UART_Init+0x4c>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_USART2_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_USART2_UART_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_USART2_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_USART2_UART_Init+0x4c>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_USART2_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_USART2_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_USART2_UART_Init+0x4c>)
 8001104:	f002 fb44 	bl	8003790 <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800110e:	f7ff feb3 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000017c 	.word	0x2000017c
 800111c:	40004400 	.word	0x40004400

08001120 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_USART3_UART_Init+0x4c>)
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <MX_USART3_UART_Init+0x50>)
 8001128:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_USART3_UART_Init+0x4c>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_USART3_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_USART3_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_USART3_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_USART3_UART_Init+0x4c>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_USART3_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_USART3_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_USART3_UART_Init+0x4c>)
 8001158:	f002 fb1a 	bl	8003790 <HAL_UART_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001162:	f7ff fe89 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200001c0 	.word	0x200001c0
 8001170:	40004800 	.word	0x40004800

08001174 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	; 0x30
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a45      	ldr	r2, [pc, #276]	; (80012a8 <HAL_UART_MspInit+0x134>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d12c      	bne.n	80011f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	4b44      	ldr	r3, [pc, #272]	; (80012ac <HAL_UART_MspInit+0x138>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a43      	ldr	r2, [pc, #268]	; (80012ac <HAL_UART_MspInit+0x138>)
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <HAL_UART_MspInit+0x138>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	61bb      	str	r3, [r7, #24]
 80011b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	4b3d      	ldr	r3, [pc, #244]	; (80012ac <HAL_UART_MspInit+0x138>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a3c      	ldr	r2, [pc, #240]	; (80012ac <HAL_UART_MspInit+0x138>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b3a      	ldr	r3, [pc, #232]	; (80012ac <HAL_UART_MspInit+0x138>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ce:	230c      	movs	r3, #12
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011de:	2307      	movs	r3, #7
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4831      	ldr	r0, [pc, #196]	; (80012b0 <HAL_UART_MspInit+0x13c>)
 80011ea:	f000 fba5 	bl	8001938 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011ee:	e057      	b.n	80012a0 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <HAL_UART_MspInit+0x140>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d152      	bne.n	80012a0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <HAL_UART_MspInit+0x138>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a2a      	ldr	r2, [pc, #168]	; (80012ac <HAL_UART_MspInit+0x138>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <HAL_UART_MspInit+0x138>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <HAL_UART_MspInit+0x138>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a23      	ldr	r2, [pc, #140]	; (80012ac <HAL_UART_MspInit+0x138>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <HAL_UART_MspInit+0x138>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <HAL_UART_MspInit+0x138>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <HAL_UART_MspInit+0x138>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_UART_MspInit+0x138>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800124e:	2320      	movs	r3, #32
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800125e:	2307      	movs	r3, #7
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <HAL_UART_MspInit+0x144>)
 800126a:	f000 fb65 	bl	8001938 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800126e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001280:	2307      	movs	r3, #7
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	480c      	ldr	r0, [pc, #48]	; (80012bc <HAL_UART_MspInit+0x148>)
 800128c:	f000 fb54 	bl	8001938 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2027      	movs	r0, #39	; 0x27
 8001296:	f000 fa86 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800129a:	2027      	movs	r0, #39	; 0x27
 800129c:	f000 fa9f 	bl	80017de <HAL_NVIC_EnableIRQ>
}
 80012a0:	bf00      	nop
 80012a2:	3730      	adds	r7, #48	; 0x30
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40004400 	.word	0x40004400
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40004800 	.word	0x40004800
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020400 	.word	0x40020400

080012c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012c6:	490e      	ldr	r1, [pc, #56]	; (8001300 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012c8:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012dc:	4c0b      	ldr	r4, [pc, #44]	; (800130c <LoopFillZerobss+0x26>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ea:	f7ff fedd 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ee:	f003 fcb5 	bl	8004c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f2:	f7ff fcff 	bl	8000cf4 <main>
  bx  lr    
 80012f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001304:	08005890 	.word	0x08005890
  ldr r2, =_sbss
 8001308:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800130c:	20000354 	.word	0x20000354

08001310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC_IRQHandler>
	...

08001314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_Init+0x40>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <HAL_Init+0x40>)
 800131e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001322:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_Init+0x40>)
 800132a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_Init+0x40>)
 8001336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133c:	2003      	movs	r0, #3
 800133e:	f000 fa27 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001342:	2000      	movs	r0, #0
 8001344:	f000 f808 	bl	8001358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001348:	f7ff fd9c 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023c00 	.word	0x40023c00

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x54>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x58>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fa3f 	bl	80017fa <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f000 fa07 	bl	80017a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_InitTick+0x5c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000024 	.word	0x20000024
 80013b0:	2000002c 	.word	0x2000002c
 80013b4:	20000028 	.word	0x20000028

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	2000002c 	.word	0x2000002c
 80013dc:	20000204 	.word	0x20000204

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000204 	.word	0x20000204

080013f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e0ed      	b.n	80015e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fb40 	bl	8000a9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0201 	orr.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800142c:	f7ff ffd8 	bl	80013e0 <HAL_GetTick>
 8001430:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001432:	e012      	b.n	800145a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001434:	f7ff ffd4 	bl	80013e0 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b0a      	cmp	r3, #10
 8001440:	d90b      	bls.n	800145a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2205      	movs	r2, #5
 8001452:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e0c5      	b.n	80015e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0e5      	beq.n	8001434 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0202 	bic.w	r2, r2, #2
 8001476:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001478:	f7ff ffb2 	bl	80013e0 <HAL_GetTick>
 800147c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800147e:	e012      	b.n	80014a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001480:	f7ff ffae 	bl	80013e0 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b0a      	cmp	r3, #10
 800148c:	d90b      	bls.n	80014a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2205      	movs	r2, #5
 800149e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e09f      	b.n	80015e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1e5      	bne.n	8001480 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e1b      	ldrb	r3, [r3, #24]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d108      	bne.n	80014ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e007      	b.n	80014de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7e5b      	ldrb	r3, [r3, #25]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d108      	bne.n	80014f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e007      	b.n	8001508 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001506:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7e9b      	ldrb	r3, [r3, #26]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d108      	bne.n	8001522 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0220 	orr.w	r2, r2, #32
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e007      	b.n	8001532 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0220 	bic.w	r2, r2, #32
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7edb      	ldrb	r3, [r3, #27]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d108      	bne.n	800154c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0210 	bic.w	r2, r2, #16
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e007      	b.n	800155c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0210 	orr.w	r2, r2, #16
 800155a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7f1b      	ldrb	r3, [r3, #28]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d108      	bne.n	8001576 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0208 	orr.w	r2, r2, #8
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	e007      	b.n	8001586 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0208 	bic.w	r2, r2, #8
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7f5b      	ldrb	r3, [r3, #29]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0204 	orr.w	r2, r2, #4
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e007      	b.n	80015b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0204 	bic.w	r2, r2, #4
 80015ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	ea42 0103 	orr.w	r1, r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	; (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f7ff ff8e 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff29 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff3e 	bl	8001638 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff8e 	bl	80016e4 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff31 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa2 	bl	800174c <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff fdde 	bl	80013e0 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d008      	beq.n	8001844 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e052      	b.n	80018ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0216 	bic.w	r2, r2, #22
 8001852:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001862:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	2b00      	cmp	r3, #0
 800186a:	d103      	bne.n	8001874 <HAL_DMA_Abort+0x62>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001870:	2b00      	cmp	r3, #0
 8001872:	d007      	beq.n	8001884 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0208 	bic.w	r2, r2, #8
 8001882:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001894:	e013      	b.n	80018be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001896:	f7ff fda3 	bl	80013e0 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d90c      	bls.n	80018be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2220      	movs	r2, #32
 80018a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2203      	movs	r2, #3
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e015      	b.n	80018ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1e4      	bne.n	8001896 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	223f      	movs	r2, #63	; 0x3f
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d004      	beq.n	8001910 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2280      	movs	r2, #128	; 0x80
 800190a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e00c      	b.n	800192a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2205      	movs	r2, #5
 8001914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e165      	b.n	8001c20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	429a      	cmp	r2, r3
 800196e:	f040 8154 	bne.w	8001c1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d005      	beq.n	800198a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001986:	2b02      	cmp	r3, #2
 8001988:	d130      	bne.n	80019ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 0201 	and.w	r2, r3, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d017      	beq.n	8001a28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d123      	bne.n	8001a7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80ae 	beq.w	8001c1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b5d      	ldr	r3, [pc, #372]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a5c      	ldr	r2, [pc, #368]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b5a      	ldr	r3, [pc, #360]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ada:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4f      	ldr	r2, [pc, #316]	; (8001c40 <HAL_GPIO_Init+0x308>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d025      	beq.n	8001b52 <HAL_GPIO_Init+0x21a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4e      	ldr	r2, [pc, #312]	; (8001c44 <HAL_GPIO_Init+0x30c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01f      	beq.n	8001b4e <HAL_GPIO_Init+0x216>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4d      	ldr	r2, [pc, #308]	; (8001c48 <HAL_GPIO_Init+0x310>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d019      	beq.n	8001b4a <HAL_GPIO_Init+0x212>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4c      	ldr	r2, [pc, #304]	; (8001c4c <HAL_GPIO_Init+0x314>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_GPIO_Init+0x20e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4b      	ldr	r2, [pc, #300]	; (8001c50 <HAL_GPIO_Init+0x318>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00d      	beq.n	8001b42 <HAL_GPIO_Init+0x20a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4a      	ldr	r2, [pc, #296]	; (8001c54 <HAL_GPIO_Init+0x31c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <HAL_GPIO_Init+0x206>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a49      	ldr	r2, [pc, #292]	; (8001c58 <HAL_GPIO_Init+0x320>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_GPIO_Init+0x202>
 8001b36:	2306      	movs	r3, #6
 8001b38:	e00c      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e00a      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b3e:	2305      	movs	r3, #5
 8001b40:	e008      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b42:	2304      	movs	r3, #4
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b46:	2303      	movs	r3, #3
 8001b48:	e004      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e002      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b52:	2300      	movs	r3, #0
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	f002 0203 	and.w	r2, r2, #3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b64:	4935      	ldr	r1, [pc, #212]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b72:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <HAL_GPIO_Init+0x324>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b96:	4a31      	ldr	r2, [pc, #196]	; (8001c5c <HAL_GPIO_Init+0x324>)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <HAL_GPIO_Init+0x324>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc0:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <HAL_GPIO_Init+0x324>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc6:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_GPIO_Init+0x324>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bea:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <HAL_GPIO_Init+0x324>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_GPIO_Init+0x324>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c14:	4a11      	ldr	r2, [pc, #68]	; (8001c5c <HAL_GPIO_Init+0x324>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b0f      	cmp	r3, #15
 8001c24:	f67f ae96 	bls.w	8001954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40013800 	.word	0x40013800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40020800 	.word	0x40020800
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40021400 	.word	0x40021400
 8001c58:	40021800 	.word	0x40021800
 8001c5c:	40013c00 	.word	0x40013c00

08001c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c70:	787b      	ldrb	r3, [r7, #1]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c7c:	e003      	b.n	8001c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	041a      	lsls	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	619a      	str	r2, [r3, #24]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e12b      	b.n	8001efe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe ffd2 	bl	8000c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cf8:	f001 f854 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8001cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4a81      	ldr	r2, [pc, #516]	; (8001f08 <HAL_I2C_Init+0x274>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d807      	bhi.n	8001d18 <HAL_I2C_Init+0x84>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4a80      	ldr	r2, [pc, #512]	; (8001f0c <HAL_I2C_Init+0x278>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	bf94      	ite	ls
 8001d10:	2301      	movls	r3, #1
 8001d12:	2300      	movhi	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	e006      	b.n	8001d26 <HAL_I2C_Init+0x92>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a7d      	ldr	r2, [pc, #500]	; (8001f10 <HAL_I2C_Init+0x27c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	bf94      	ite	ls
 8001d20:	2301      	movls	r3, #1
 8001d22:	2300      	movhi	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0e7      	b.n	8001efe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4a78      	ldr	r2, [pc, #480]	; (8001f14 <HAL_I2C_Init+0x280>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	0c9b      	lsrs	r3, r3, #18
 8001d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4a6a      	ldr	r2, [pc, #424]	; (8001f08 <HAL_I2C_Init+0x274>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d802      	bhi.n	8001d68 <HAL_I2C_Init+0xd4>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3301      	adds	r3, #1
 8001d66:	e009      	b.n	8001d7c <HAL_I2C_Init+0xe8>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	4a69      	ldr	r2, [pc, #420]	; (8001f18 <HAL_I2C_Init+0x284>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	495c      	ldr	r1, [pc, #368]	; (8001f08 <HAL_I2C_Init+0x274>)
 8001d98:	428b      	cmp	r3, r1
 8001d9a:	d819      	bhi.n	8001dd0 <HAL_I2C_Init+0x13c>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1e59      	subs	r1, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001daa:	1c59      	adds	r1, r3, #1
 8001dac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001db0:	400b      	ands	r3, r1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_I2C_Init+0x138>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1e59      	subs	r1, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dca:	e051      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001dcc:	2304      	movs	r3, #4
 8001dce:	e04f      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d111      	bne.n	8001dfc <HAL_I2C_Init+0x168>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1e58      	subs	r0, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	440b      	add	r3, r1
 8001de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	e012      	b.n	8001e22 <HAL_I2C_Init+0x18e>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1e58      	subs	r0, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	0099      	lsls	r1, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e12:	3301      	adds	r3, #1
 8001e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf0c      	ite	eq
 8001e1c:	2301      	moveq	r3, #1
 8001e1e:	2300      	movne	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2C_Init+0x196>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e022      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10e      	bne.n	8001e50 <HAL_I2C_Init+0x1bc>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1e58      	subs	r0, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6859      	ldr	r1, [r3, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	440b      	add	r3, r1
 8001e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e4e:	e00f      	b.n	8001e70 <HAL_I2C_Init+0x1dc>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1e58      	subs	r0, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	0099      	lsls	r1, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	6809      	ldr	r1, [r1, #0]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69da      	ldr	r2, [r3, #28]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6911      	ldr	r1, [r2, #16]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68d2      	ldr	r2, [r2, #12]
 8001eaa:	4311      	orrs	r1, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	000186a0 	.word	0x000186a0
 8001f0c:	001e847f 	.word	0x001e847f
 8001f10:	003d08ff 	.word	0x003d08ff
 8001f14:	431bde83 	.word	0x431bde83
 8001f18:	10624dd3 	.word	0x10624dd3

08001f1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	461a      	mov	r2, r3
 8001f28:	460b      	mov	r3, r1
 8001f2a:	817b      	strh	r3, [r7, #10]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff fa56 	bl	80013e0 <HAL_GetTick>
 8001f34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	f040 80e0 	bne.w	8002104 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2319      	movs	r3, #25
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4970      	ldr	r1, [pc, #448]	; (8002110 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fc58 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e0d3      	b.n	8002106 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_I2C_Master_Transmit+0x50>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e0cc      	b.n	8002106 <HAL_I2C_Master_Transmit+0x1ea>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d007      	beq.n	8001f92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0201 	orr.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2221      	movs	r2, #33	; 0x21
 8001fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2210      	movs	r2, #16
 8001fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	893a      	ldrh	r2, [r7, #8]
 8001fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a50      	ldr	r2, [pc, #320]	; (8002114 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fd4:	8979      	ldrh	r1, [r7, #10]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	6a3a      	ldr	r2, [r7, #32]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fac2 	bl	8002564 <I2C_MasterRequestWrite>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e08d      	b.n	8002106 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002000:	e066      	b.n	80020d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	6a39      	ldr	r1, [r7, #32]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fcd2 	bl	80029b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00d      	beq.n	800202e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b04      	cmp	r3, #4
 8002018:	d107      	bne.n	800202a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002028:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e06b      	b.n	8002106 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b04      	cmp	r3, #4
 800206a:	d11b      	bne.n	80020a4 <HAL_I2C_Master_Transmit+0x188>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	d017      	beq.n	80020a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	6a39      	ldr	r1, [r7, #32]
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fcc2 	bl	8002a32 <I2C_WaitOnBTFFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00d      	beq.n	80020d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d107      	bne.n	80020cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e01a      	b.n	8002106 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d194      	bne.n	8002002 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	00100002 	.word	0x00100002
 8002114:	ffff0000 	.word	0xffff0000

08002118 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08c      	sub	sp, #48	; 0x30
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	461a      	mov	r2, r3
 8002124:	460b      	mov	r3, r1
 8002126:	817b      	strh	r3, [r7, #10]
 8002128:	4613      	mov	r3, r2
 800212a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff f958 	bl	80013e0 <HAL_GetTick>
 8002130:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b20      	cmp	r3, #32
 800213c:	f040 820b 	bne.w	8002556 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2319      	movs	r3, #25
 8002146:	2201      	movs	r2, #1
 8002148:	497c      	ldr	r1, [pc, #496]	; (800233c <HAL_I2C_Master_Receive+0x224>)
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fb5a 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002156:	2302      	movs	r3, #2
 8002158:	e1fe      	b.n	8002558 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_I2C_Master_Receive+0x50>
 8002164:	2302      	movs	r3, #2
 8002166:	e1f7      	b.n	8002558 <HAL_I2C_Master_Receive+0x440>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d007      	beq.n	800218e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2222      	movs	r2, #34	; 0x22
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2210      	movs	r2, #16
 80021aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	893a      	ldrh	r2, [r7, #8]
 80021be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4a5c      	ldr	r2, [pc, #368]	; (8002340 <HAL_I2C_Master_Receive+0x228>)
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021d0:	8979      	ldrh	r1, [r7, #10]
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fa46 	bl	8002668 <I2C_MasterRequestRead>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e1b8      	b.n	8002558 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d113      	bne.n	8002216 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	623b      	str	r3, [r7, #32]
 8002202:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e18c      	b.n	8002530 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221a:	2b01      	cmp	r3, #1
 800221c:	d11b      	bne.n	8002256 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e16c      	b.n	8002530 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	2b02      	cmp	r3, #2
 800225c:	d11b      	bne.n	8002296 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800227c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	e14c      	b.n	8002530 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022bc:	e138      	b.n	8002530 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	f200 80f1 	bhi.w	80024aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d123      	bne.n	8002318 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 fbed 	bl	8002ab4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e139      	b.n	8002558 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002316:	e10b      	b.n	8002530 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	2b02      	cmp	r3, #2
 800231e:	d14e      	bne.n	80023be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	2200      	movs	r2, #0
 8002328:	4906      	ldr	r1, [pc, #24]	; (8002344 <HAL_I2C_Master_Receive+0x22c>)
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fa6a 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e10e      	b.n	8002558 <HAL_I2C_Master_Receive+0x440>
 800233a:	bf00      	nop
 800233c:	00100002 	.word	0x00100002
 8002340:	ffff0000 	.word	0xffff0000
 8002344:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023bc:	e0b8      	b.n	8002530 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	2200      	movs	r2, #0
 80023c6:	4966      	ldr	r1, [pc, #408]	; (8002560 <HAL_I2C_Master_Receive+0x448>)
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fa1b 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0bf      	b.n	8002558 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002420:	2200      	movs	r2, #0
 8002422:	494f      	ldr	r1, [pc, #316]	; (8002560 <HAL_I2C_Master_Receive+0x448>)
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f9ed 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e091      	b.n	8002558 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002442:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024a8:	e042      	b.n	8002530 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fb00 	bl	8002ab4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e04c      	b.n	8002558 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d118      	bne.n	8002530 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	f47f aec2 	bne.w	80022be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002556:	2302      	movs	r3, #2
  }
}
 8002558:	4618      	mov	r0, r3
 800255a:	3728      	adds	r7, #40	; 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	00010004 	.word	0x00010004

08002564 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	460b      	mov	r3, r1
 8002572:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d006      	beq.n	800258e <I2C_MasterRequestWrite+0x2a>
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d003      	beq.n	800258e <I2C_MasterRequestWrite+0x2a>
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800258c:	d108      	bne.n	80025a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	e00b      	b.n	80025b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	2b12      	cmp	r3, #18
 80025a6:	d107      	bne.n	80025b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f91d 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00d      	beq.n	80025ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025de:	d103      	bne.n	80025e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e035      	b.n	8002658 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025f4:	d108      	bne.n	8002608 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025f6:	897b      	ldrh	r3, [r7, #10]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002604:	611a      	str	r2, [r3, #16]
 8002606:	e01b      	b.n	8002640 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002608:	897b      	ldrh	r3, [r7, #10]
 800260a:	11db      	asrs	r3, r3, #7
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f003 0306 	and.w	r3, r3, #6
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f063 030f 	orn	r3, r3, #15
 8002618:	b2da      	uxtb	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	490e      	ldr	r1, [pc, #56]	; (8002660 <I2C_MasterRequestWrite+0xfc>)
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f943 	bl	80028b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e010      	b.n	8002658 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4907      	ldr	r1, [pc, #28]	; (8002664 <I2C_MasterRequestWrite+0x100>)
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f933 	bl	80028b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	00010008 	.word	0x00010008
 8002664:	00010002 	.word	0x00010002

08002668 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	460b      	mov	r3, r1
 8002676:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800268c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d006      	beq.n	80026a2 <I2C_MasterRequestRead+0x3a>
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d003      	beq.n	80026a2 <I2C_MasterRequestRead+0x3a>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026a0:	d108      	bne.n	80026b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e00b      	b.n	80026cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	2b11      	cmp	r3, #17
 80026ba:	d107      	bne.n	80026cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f893 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00d      	beq.n	8002700 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f2:	d103      	bne.n	80026fc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e079      	b.n	80027f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002708:	d108      	bne.n	800271c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800270a:	897b      	ldrh	r3, [r7, #10]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	b2da      	uxtb	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	611a      	str	r2, [r3, #16]
 800271a:	e05f      	b.n	80027dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800271c:	897b      	ldrh	r3, [r7, #10]
 800271e:	11db      	asrs	r3, r3, #7
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f003 0306 	and.w	r3, r3, #6
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f063 030f 	orn	r3, r3, #15
 800272c:	b2da      	uxtb	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4930      	ldr	r1, [pc, #192]	; (80027fc <I2C_MasterRequestRead+0x194>)
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f8b9 	bl	80028b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e054      	b.n	80027f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800274a:	897b      	ldrh	r3, [r7, #10]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4929      	ldr	r1, [pc, #164]	; (8002800 <I2C_MasterRequestRead+0x198>)
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f8a9 	bl	80028b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e044      	b.n	80027f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800278e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f831 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00d      	beq.n	80027c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b6:	d103      	bne.n	80027c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027be:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e017      	b.n	80027f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80027c4:	897b      	ldrh	r3, [r7, #10]
 80027c6:	11db      	asrs	r3, r3, #7
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f003 0306 	and.w	r3, r3, #6
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f063 030e 	orn	r3, r3, #14
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4907      	ldr	r1, [pc, #28]	; (8002800 <I2C_MasterRequestRead+0x198>)
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f865 	bl	80028b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	00010008 	.word	0x00010008
 8002800:	00010002 	.word	0x00010002

08002804 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002814:	e025      	b.n	8002862 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d021      	beq.n	8002862 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281e:	f7fe fddf 	bl	80013e0 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d302      	bcc.n	8002834 <I2C_WaitOnFlagUntilTimeout+0x30>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d116      	bne.n	8002862 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f043 0220 	orr.w	r2, r3, #32
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e023      	b.n	80028aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	0c1b      	lsrs	r3, r3, #16
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d10d      	bne.n	8002888 <I2C_WaitOnFlagUntilTimeout+0x84>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4013      	ands	r3, r2
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	bf0c      	ite	eq
 800287e:	2301      	moveq	r3, #1
 8002880:	2300      	movne	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	e00c      	b.n	80028a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4013      	ands	r3, r2
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	bf0c      	ite	eq
 800289a:	2301      	moveq	r3, #1
 800289c:	2300      	movne	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d0b6      	beq.n	8002816 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028c0:	e051      	b.n	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d0:	d123      	bne.n	800291a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f043 0204 	orr.w	r2, r3, #4
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e046      	b.n	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d021      	beq.n	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002922:	f7fe fd5d 	bl	80013e0 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	429a      	cmp	r2, r3
 8002930:	d302      	bcc.n	8002938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d116      	bne.n	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f043 0220 	orr.w	r2, r3, #32
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e020      	b.n	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10c      	bne.n	800298a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf14      	ite	ne
 8002982:	2301      	movne	r3, #1
 8002984:	2300      	moveq	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	e00b      	b.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	43da      	mvns	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	4013      	ands	r3, r2
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf14      	ite	ne
 800299c:	2301      	movne	r3, #1
 800299e:	2300      	moveq	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d18d      	bne.n	80028c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029bc:	e02d      	b.n	8002a1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f8ce 	bl	8002b60 <I2C_IsAcknowledgeFailed>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e02d      	b.n	8002a2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d021      	beq.n	8002a1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d6:	f7fe fd03 	bl	80013e0 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d116      	bne.n	8002a1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f043 0220 	orr.w	r2, r3, #32
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e007      	b.n	8002a2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	2b80      	cmp	r3, #128	; 0x80
 8002a26:	d1ca      	bne.n	80029be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a3e:	e02d      	b.n	8002a9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f88d 	bl	8002b60 <I2C_IsAcknowledgeFailed>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e02d      	b.n	8002aac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a56:	d021      	beq.n	8002a9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a58:	f7fe fcc2 	bl	80013e0 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d302      	bcc.n	8002a6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e007      	b.n	8002aac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d1ca      	bne.n	8002a40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ac0:	e042      	b.n	8002b48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d119      	bne.n	8002b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0210 	mvn.w	r2, #16
 8002ad8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e029      	b.n	8002b58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b04:	f7fe fc6c 	bl	80013e0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d302      	bcc.n	8002b1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d116      	bne.n	8002b48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e007      	b.n	8002b58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d1b5      	bne.n	8002ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b76:	d11b      	bne.n	8002bb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f043 0204 	orr.w	r2, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0cc      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b68      	ldr	r3, [pc, #416]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d90c      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b65      	ldr	r3, [pc, #404]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b63      	ldr	r3, [pc, #396]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0b8      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c14:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4a52      	ldr	r2, [pc, #328]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	494d      	ldr	r1, [pc, #308]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d044      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d119      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e07f      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d003      	beq.n	8002c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7e:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e06f      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8e:	4b3b      	ldr	r3, [pc, #236]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e067      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9e:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f023 0203 	bic.w	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4934      	ldr	r1, [pc, #208]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb0:	f7fe fb96 	bl	80013e0 <HAL_GetTick>
 8002cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb8:	f7fe fb92 	bl	80013e0 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e04f      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 020c 	and.w	r2, r3, #12
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d1eb      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d20c      	bcs.n	8002d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e032      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4916      	ldr	r1, [pc, #88]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d32:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	490e      	ldr	r1, [pc, #56]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d46:	f000 f855 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	490a      	ldr	r1, [pc, #40]	; (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	5ccb      	ldrb	r3, [r1, r3]
 8002d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe faf6 	bl	8001358 <HAL_InitTick>

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023c00 	.word	0x40023c00
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	08005834 	.word	0x08005834
 8002d84:	20000024 	.word	0x20000024
 8002d88:	20000028 	.word	0x20000028

08002d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000024 	.word	0x20000024

08002da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002da8:	f7ff fff0 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0a9b      	lsrs	r3, r3, #10
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4903      	ldr	r1, [pc, #12]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08005844 	.word	0x08005844

08002dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dd0:	f7ff ffdc 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0b5b      	lsrs	r3, r3, #13
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4903      	ldr	r1, [pc, #12]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	08005844 	.word	0x08005844

08002df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df8:	b0ae      	sub	sp, #184	; 0xb8
 8002dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e1a:	4bcb      	ldr	r3, [pc, #812]	; (8003148 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	f200 8206 	bhi.w	8003234 <HAL_RCC_GetSysClockFreq+0x440>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e65 	.word	0x08002e65
 8002e34:	08003235 	.word	0x08003235
 8002e38:	08003235 	.word	0x08003235
 8002e3c:	08003235 	.word	0x08003235
 8002e40:	08002e6d 	.word	0x08002e6d
 8002e44:	08003235 	.word	0x08003235
 8002e48:	08003235 	.word	0x08003235
 8002e4c:	08003235 	.word	0x08003235
 8002e50:	08002e75 	.word	0x08002e75
 8002e54:	08003235 	.word	0x08003235
 8002e58:	08003235 	.word	0x08003235
 8002e5c:	08003235 	.word	0x08003235
 8002e60:	08003065 	.word	0x08003065
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4bb9      	ldr	r3, [pc, #740]	; (800314c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002e6a:	e1e7      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e6c:	4bb8      	ldr	r3, [pc, #736]	; (8003150 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e72:	e1e3      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e74:	4bb4      	ldr	r3, [pc, #720]	; (8003148 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e80:	4bb1      	ldr	r3, [pc, #708]	; (8003148 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d071      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8c:	4bae      	ldr	r3, [pc, #696]	; (8003148 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e98:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002eb2:	4622      	mov	r2, r4
 8002eb4:	462b      	mov	r3, r5
 8002eb6:	f04f 0000 	mov.w	r0, #0
 8002eba:	f04f 0100 	mov.w	r1, #0
 8002ebe:	0159      	lsls	r1, r3, #5
 8002ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec4:	0150      	lsls	r0, r2, #5
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4621      	mov	r1, r4
 8002ecc:	1a51      	subs	r1, r2, r1
 8002ece:	6439      	str	r1, [r7, #64]	; 0x40
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ee4:	4649      	mov	r1, r9
 8002ee6:	018b      	lsls	r3, r1, #6
 8002ee8:	4641      	mov	r1, r8
 8002eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eee:	4641      	mov	r1, r8
 8002ef0:	018a      	lsls	r2, r1, #6
 8002ef2:	4641      	mov	r1, r8
 8002ef4:	1a51      	subs	r1, r2, r1
 8002ef6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ef8:	4649      	mov	r1, r9
 8002efa:	eb63 0301 	sbc.w	r3, r3, r1
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f0c:	4649      	mov	r1, r9
 8002f0e:	00cb      	lsls	r3, r1, #3
 8002f10:	4641      	mov	r1, r8
 8002f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f16:	4641      	mov	r1, r8
 8002f18:	00ca      	lsls	r2, r1, #3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4622      	mov	r2, r4
 8002f22:	189b      	adds	r3, r3, r2
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
 8002f26:	462b      	mov	r3, r5
 8002f28:	460a      	mov	r2, r1
 8002f2a:	eb42 0303 	adc.w	r3, r2, r3
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	024b      	lsls	r3, r1, #9
 8002f40:	4621      	mov	r1, r4
 8002f42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f46:	4621      	mov	r1, r4
 8002f48:	024a      	lsls	r2, r1, #9
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f60:	f7fd f9a6 	bl	80002b0 <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4613      	mov	r3, r2
 8002f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f6e:	e067      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f70:	4b75      	ldr	r3, [pc, #468]	; (8003148 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	099b      	lsrs	r3, r3, #6
 8002f76:	2200      	movs	r2, #0
 8002f78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f7c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f88:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f92:	4622      	mov	r2, r4
 8002f94:	462b      	mov	r3, r5
 8002f96:	f04f 0000 	mov.w	r0, #0
 8002f9a:	f04f 0100 	mov.w	r1, #0
 8002f9e:	0159      	lsls	r1, r3, #5
 8002fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa4:	0150      	lsls	r0, r2, #5
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4621      	mov	r1, r4
 8002fac:	1a51      	subs	r1, r2, r1
 8002fae:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	018b      	lsls	r3, r1, #6
 8002fc8:	4641      	mov	r1, r8
 8002fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fce:	4641      	mov	r1, r8
 8002fd0:	018a      	lsls	r2, r1, #6
 8002fd2:	4641      	mov	r1, r8
 8002fd4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fd8:	4649      	mov	r1, r9
 8002fda:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ff2:	4692      	mov	sl, r2
 8002ff4:	469b      	mov	fp, r3
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	eb1a 0303 	adds.w	r3, sl, r3
 8002ffc:	623b      	str	r3, [r7, #32]
 8002ffe:	462b      	mov	r3, r5
 8003000:	eb4b 0303 	adc.w	r3, fp, r3
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003012:	4629      	mov	r1, r5
 8003014:	028b      	lsls	r3, r1, #10
 8003016:	4621      	mov	r1, r4
 8003018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800301c:	4621      	mov	r1, r4
 800301e:	028a      	lsls	r2, r1, #10
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003028:	2200      	movs	r2, #0
 800302a:	673b      	str	r3, [r7, #112]	; 0x70
 800302c:	677a      	str	r2, [r7, #116]	; 0x74
 800302e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003032:	f7fd f93d 	bl	80002b0 <__aeabi_uldivmod>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4613      	mov	r3, r2
 800303c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003040:	4b41      	ldr	r3, [pc, #260]	; (8003148 <HAL_RCC_GetSysClockFreq+0x354>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	3301      	adds	r3, #1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003062:	e0eb      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003064:	4b38      	ldr	r3, [pc, #224]	; (8003148 <HAL_RCC_GetSysClockFreq+0x354>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800306c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003070:	4b35      	ldr	r3, [pc, #212]	; (8003148 <HAL_RCC_GetSysClockFreq+0x354>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d06b      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307c:	4b32      	ldr	r3, [pc, #200]	; (8003148 <HAL_RCC_GetSysClockFreq+0x354>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	099b      	lsrs	r3, r3, #6
 8003082:	2200      	movs	r2, #0
 8003084:	66bb      	str	r3, [r7, #104]	; 0x68
 8003086:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003088:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800308a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308e:	663b      	str	r3, [r7, #96]	; 0x60
 8003090:	2300      	movs	r3, #0
 8003092:	667b      	str	r3, [r7, #100]	; 0x64
 8003094:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003098:	4622      	mov	r2, r4
 800309a:	462b      	mov	r3, r5
 800309c:	f04f 0000 	mov.w	r0, #0
 80030a0:	f04f 0100 	mov.w	r1, #0
 80030a4:	0159      	lsls	r1, r3, #5
 80030a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030aa:	0150      	lsls	r0, r2, #5
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4621      	mov	r1, r4
 80030b2:	1a51      	subs	r1, r2, r1
 80030b4:	61b9      	str	r1, [r7, #24]
 80030b6:	4629      	mov	r1, r5
 80030b8:	eb63 0301 	sbc.w	r3, r3, r1
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030ca:	4659      	mov	r1, fp
 80030cc:	018b      	lsls	r3, r1, #6
 80030ce:	4651      	mov	r1, sl
 80030d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030d4:	4651      	mov	r1, sl
 80030d6:	018a      	lsls	r2, r1, #6
 80030d8:	4651      	mov	r1, sl
 80030da:	ebb2 0801 	subs.w	r8, r2, r1
 80030de:	4659      	mov	r1, fp
 80030e0:	eb63 0901 	sbc.w	r9, r3, r1
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030f8:	4690      	mov	r8, r2
 80030fa:	4699      	mov	r9, r3
 80030fc:	4623      	mov	r3, r4
 80030fe:	eb18 0303 	adds.w	r3, r8, r3
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	462b      	mov	r3, r5
 8003106:	eb49 0303 	adc.w	r3, r9, r3
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003118:	4629      	mov	r1, r5
 800311a:	024b      	lsls	r3, r1, #9
 800311c:	4621      	mov	r1, r4
 800311e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003122:	4621      	mov	r1, r4
 8003124:	024a      	lsls	r2, r1, #9
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800312e:	2200      	movs	r2, #0
 8003130:	65bb      	str	r3, [r7, #88]	; 0x58
 8003132:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003134:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003138:	f7fd f8ba 	bl	80002b0 <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4613      	mov	r3, r2
 8003142:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003146:	e065      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x420>
 8003148:	40023800 	.word	0x40023800
 800314c:	00f42400 	.word	0x00f42400
 8003150:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003154:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_RCC_GetSysClockFreq+0x458>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	099b      	lsrs	r3, r3, #6
 800315a:	2200      	movs	r2, #0
 800315c:	4618      	mov	r0, r3
 800315e:	4611      	mov	r1, r2
 8003160:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003164:	653b      	str	r3, [r7, #80]	; 0x50
 8003166:	2300      	movs	r3, #0
 8003168:	657b      	str	r3, [r7, #84]	; 0x54
 800316a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800316e:	4642      	mov	r2, r8
 8003170:	464b      	mov	r3, r9
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f04f 0100 	mov.w	r1, #0
 800317a:	0159      	lsls	r1, r3, #5
 800317c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003180:	0150      	lsls	r0, r2, #5
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4641      	mov	r1, r8
 8003188:	1a51      	subs	r1, r2, r1
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	4649      	mov	r1, r9
 800318e:	eb63 0301 	sbc.w	r3, r3, r1
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031a0:	4659      	mov	r1, fp
 80031a2:	018b      	lsls	r3, r1, #6
 80031a4:	4651      	mov	r1, sl
 80031a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031aa:	4651      	mov	r1, sl
 80031ac:	018a      	lsls	r2, r1, #6
 80031ae:	4651      	mov	r1, sl
 80031b0:	1a54      	subs	r4, r2, r1
 80031b2:	4659      	mov	r1, fp
 80031b4:	eb63 0501 	sbc.w	r5, r3, r1
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	00eb      	lsls	r3, r5, #3
 80031c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031c6:	00e2      	lsls	r2, r4, #3
 80031c8:	4614      	mov	r4, r2
 80031ca:	461d      	mov	r5, r3
 80031cc:	4643      	mov	r3, r8
 80031ce:	18e3      	adds	r3, r4, r3
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	464b      	mov	r3, r9
 80031d4:	eb45 0303 	adc.w	r3, r5, r3
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031e6:	4629      	mov	r1, r5
 80031e8:	028b      	lsls	r3, r1, #10
 80031ea:	4621      	mov	r1, r4
 80031ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031f0:	4621      	mov	r1, r4
 80031f2:	028a      	lsls	r2, r1, #10
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031fc:	2200      	movs	r2, #0
 80031fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003200:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003202:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003206:	f7fd f853 	bl	80002b0 <__aeabi_uldivmod>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4613      	mov	r3, r2
 8003210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003214:	4b0d      	ldr	r3, [pc, #52]	; (800324c <HAL_RCC_GetSysClockFreq+0x458>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	0f1b      	lsrs	r3, r3, #28
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003232:	e003      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800323a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800323c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003240:	4618      	mov	r0, r3
 8003242:	37b8      	adds	r7, #184	; 0xb8
 8003244:	46bd      	mov	sp, r7
 8003246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	00f42400 	.word	0x00f42400

08003254 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e28d      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8083 	beq.w	800337a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003274:	4b94      	ldr	r3, [pc, #592]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b04      	cmp	r3, #4
 800327e:	d019      	beq.n	80032b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003280:	4b91      	ldr	r3, [pc, #580]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003288:	2b08      	cmp	r3, #8
 800328a:	d106      	bne.n	800329a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800328c:	4b8e      	ldr	r3, [pc, #568]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003298:	d00c      	beq.n	80032b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800329a:	4b8b      	ldr	r3, [pc, #556]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d112      	bne.n	80032cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032a6:	4b88      	ldr	r3, [pc, #544]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b2:	d10b      	bne.n	80032cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	4b84      	ldr	r3, [pc, #528]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d05b      	beq.n	8003378 <HAL_RCC_OscConfig+0x124>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d157      	bne.n	8003378 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e25a      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	d106      	bne.n	80032e4 <HAL_RCC_OscConfig+0x90>
 80032d6:	4b7c      	ldr	r3, [pc, #496]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a7b      	ldr	r2, [pc, #492]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e01d      	b.n	8003320 <HAL_RCC_OscConfig+0xcc>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0xb4>
 80032ee:	4b76      	ldr	r3, [pc, #472]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a75      	ldr	r2, [pc, #468]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 80032f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b73      	ldr	r3, [pc, #460]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a72      	ldr	r2, [pc, #456]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e00b      	b.n	8003320 <HAL_RCC_OscConfig+0xcc>
 8003308:	4b6f      	ldr	r3, [pc, #444]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a6e      	ldr	r2, [pc, #440]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 800330e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b6c      	ldr	r3, [pc, #432]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a6b      	ldr	r2, [pc, #428]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 800331a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800331e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d013      	beq.n	8003350 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe f85a 	bl	80013e0 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003330:	f7fe f856 	bl	80013e0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e21f      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0xdc>
 800334e:	e014      	b.n	800337a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe f846 	bl	80013e0 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003358:	f7fe f842 	bl	80013e0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e20b      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336a:	4b57      	ldr	r3, [pc, #348]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x104>
 8003376:	e000      	b.n	800337a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d06f      	beq.n	8003466 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003386:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b00      	cmp	r3, #0
 8003390:	d017      	beq.n	80033c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003392:	4b4d      	ldr	r3, [pc, #308]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800339a:	2b08      	cmp	r3, #8
 800339c:	d105      	bne.n	80033aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800339e:	4b4a      	ldr	r3, [pc, #296]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	d11c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b6:	4b44      	ldr	r3, [pc, #272]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d116      	bne.n	80033f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_RCC_OscConfig+0x186>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e1d3      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033da:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4937      	ldr	r1, [pc, #220]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	e03a      	b.n	8003466 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f8:	4b34      	ldr	r3, [pc, #208]	; (80034cc <HAL_RCC_OscConfig+0x278>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fd ffef 	bl	80013e0 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003406:	f7fd ffeb 	bl	80013e0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e1b4      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003424:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4925      	ldr	r1, [pc, #148]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
 8003438:	e015      	b.n	8003466 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343a:	4b24      	ldr	r3, [pc, #144]	; (80034cc <HAL_RCC_OscConfig+0x278>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fd ffce 	bl	80013e0 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003448:	f7fd ffca 	bl	80013e0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e193      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d036      	beq.n	80034e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <HAL_RCC_OscConfig+0x27c>)
 800347c:	2201      	movs	r2, #1
 800347e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003480:	f7fd ffae 	bl	80013e0 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003488:	f7fd ffaa 	bl	80013e0 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e173      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_OscConfig+0x274>)
 800349c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x234>
 80034a6:	e01b      	b.n	80034e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_RCC_OscConfig+0x27c>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ae:	f7fd ff97 	bl	80013e0 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b4:	e00e      	b.n	80034d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b6:	f7fd ff93 	bl	80013e0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d907      	bls.n	80034d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e15c      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
 80034c8:	40023800 	.word	0x40023800
 80034cc:	42470000 	.word	0x42470000
 80034d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d4:	4b8a      	ldr	r3, [pc, #552]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 80034d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1ea      	bne.n	80034b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8097 	beq.w	800361c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ee:	2300      	movs	r3, #0
 80034f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f2:	4b83      	ldr	r3, [pc, #524]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10f      	bne.n	800351e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	4b7f      	ldr	r3, [pc, #508]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	4a7e      	ldr	r2, [pc, #504]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 8003508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350c:	6413      	str	r3, [r2, #64]	; 0x40
 800350e:	4b7c      	ldr	r3, [pc, #496]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351a:	2301      	movs	r3, #1
 800351c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351e:	4b79      	ldr	r3, [pc, #484]	; (8003704 <HAL_RCC_OscConfig+0x4b0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d118      	bne.n	800355c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352a:	4b76      	ldr	r3, [pc, #472]	; (8003704 <HAL_RCC_OscConfig+0x4b0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a75      	ldr	r2, [pc, #468]	; (8003704 <HAL_RCC_OscConfig+0x4b0>)
 8003530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003536:	f7fd ff53 	bl	80013e0 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353e:	f7fd ff4f 	bl	80013e0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e118      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	4b6c      	ldr	r3, [pc, #432]	; (8003704 <HAL_RCC_OscConfig+0x4b0>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d106      	bne.n	8003572 <HAL_RCC_OscConfig+0x31e>
 8003564:	4b66      	ldr	r3, [pc, #408]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4a65      	ldr	r2, [pc, #404]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
 8003570:	e01c      	b.n	80035ac <HAL_RCC_OscConfig+0x358>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b05      	cmp	r3, #5
 8003578:	d10c      	bne.n	8003594 <HAL_RCC_OscConfig+0x340>
 800357a:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	4a60      	ldr	r2, [pc, #384]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 8003580:	f043 0304 	orr.w	r3, r3, #4
 8003584:	6713      	str	r3, [r2, #112]	; 0x70
 8003586:	4b5e      	ldr	r3, [pc, #376]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358a:	4a5d      	ldr	r2, [pc, #372]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6713      	str	r3, [r2, #112]	; 0x70
 8003592:	e00b      	b.n	80035ac <HAL_RCC_OscConfig+0x358>
 8003594:	4b5a      	ldr	r3, [pc, #360]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	4a59      	ldr	r2, [pc, #356]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	6713      	str	r3, [r2, #112]	; 0x70
 80035a0:	4b57      	ldr	r3, [pc, #348]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a56      	ldr	r2, [pc, #344]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	f023 0304 	bic.w	r3, r3, #4
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d015      	beq.n	80035e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fd ff14 	bl	80013e0 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fd ff10 	bl	80013e0 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e0d7      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d2:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0ee      	beq.n	80035bc <HAL_RCC_OscConfig+0x368>
 80035de:	e014      	b.n	800360a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fd fefe 	bl	80013e0 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e8:	f7fd fefa 	bl	80013e0 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e0c1      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fe:	4b40      	ldr	r3, [pc, #256]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1ee      	bne.n	80035e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800360a:	7dfb      	ldrb	r3, [r7, #23]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d105      	bne.n	800361c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003610:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	4a3a      	ldr	r2, [pc, #232]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 8003616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800361a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80ad 	beq.w	8003780 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003626:	4b36      	ldr	r3, [pc, #216]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b08      	cmp	r3, #8
 8003630:	d060      	beq.n	80036f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d145      	bne.n	80036c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363a:	4b33      	ldr	r3, [pc, #204]	; (8003708 <HAL_RCC_OscConfig+0x4b4>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fd fece 	bl	80013e0 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003648:	f7fd feca 	bl	80013e0 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e093      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	4b29      	ldr	r3, [pc, #164]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69da      	ldr	r2, [r3, #28]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	019b      	lsls	r3, r3, #6
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	085b      	lsrs	r3, r3, #1
 800367e:	3b01      	subs	r3, #1
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	061b      	lsls	r3, r3, #24
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	071b      	lsls	r3, r3, #28
 8003692:	491b      	ldr	r1, [pc, #108]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 8003694:	4313      	orrs	r3, r2
 8003696:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_RCC_OscConfig+0x4b4>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fd fe9f 	bl	80013e0 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fd fe9b 	bl	80013e0 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e064      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b8:	4b11      	ldr	r3, [pc, #68]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x452>
 80036c4:	e05c      	b.n	8003780 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <HAL_RCC_OscConfig+0x4b4>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fd fe88 	bl	80013e0 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fd fe84 	bl	80013e0 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e04d      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_RCC_OscConfig+0x4ac>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x480>
 80036f2:	e045      	b.n	8003780 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d107      	bne.n	800370c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e040      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
 8003700:	40023800 	.word	0x40023800
 8003704:	40007000 	.word	0x40007000
 8003708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800370c:	4b1f      	ldr	r3, [pc, #124]	; (800378c <HAL_RCC_OscConfig+0x538>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d030      	beq.n	800377c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d129      	bne.n	800377c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	429a      	cmp	r2, r3
 8003734:	d122      	bne.n	800377c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800373c:	4013      	ands	r3, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003744:	4293      	cmp	r3, r2
 8003746:	d119      	bne.n	800377c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	085b      	lsrs	r3, r3, #1
 8003754:	3b01      	subs	r3, #1
 8003756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d10f      	bne.n	800377c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d107      	bne.n	800377c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800

08003790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e03f      	b.n	8003822 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fcdc 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2224      	movs	r2, #36	; 0x24
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fd7b 	bl	80042d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b08a      	sub	sp, #40	; 0x28
 800382e:	af02      	add	r7, sp, #8
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	603b      	str	r3, [r7, #0]
 8003836:	4613      	mov	r3, r2
 8003838:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b20      	cmp	r3, #32
 8003848:	d17c      	bne.n	8003944 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_UART_Transmit+0x2c>
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e075      	b.n	8003946 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_UART_Transmit+0x3e>
 8003864:	2302      	movs	r3, #2
 8003866:	e06e      	b.n	8003946 <HAL_UART_Transmit+0x11c>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2221      	movs	r2, #33	; 0x21
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800387e:	f7fd fdaf 	bl	80013e0 <HAL_GetTick>
 8003882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003898:	d108      	bne.n	80038ac <HAL_UART_Transmit+0x82>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d104      	bne.n	80038ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	e003      	b.n	80038b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80038bc:	e02a      	b.n	8003914 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2180      	movs	r1, #128	; 0x80
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 faf9 	bl	8003ec0 <UART_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e036      	b.n	8003946 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	3302      	adds	r3, #2
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	e007      	b.n	8003906 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3301      	adds	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1cf      	bne.n	80038be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2200      	movs	r2, #0
 8003926:	2140      	movs	r1, #64	; 0x40
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fac9 	bl	8003ec0 <UART_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e006      	b.n	8003946 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b0ba      	sub	sp, #232	; 0xe8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003976:	2300      	movs	r3, #0
 8003978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800397c:	2300      	movs	r3, #0
 800397e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800398e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10f      	bne.n	80039b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_UART_IRQHandler+0x66>
 80039a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fbd3 	bl	800415a <UART_Receive_IT>
      return;
 80039b4:	e256      	b.n	8003e64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80de 	beq.w	8003b7c <HAL_UART_IRQHandler+0x22c>
 80039c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80d1 	beq.w	8003b7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_UART_IRQHandler+0xae>
 80039e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f043 0201 	orr.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_UART_IRQHandler+0xd2>
 8003a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f043 0202 	orr.w	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <HAL_UART_IRQHandler+0xf6>
 8003a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f043 0204 	orr.w	r2, r3, #4
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d011      	beq.n	8003a76 <HAL_UART_IRQHandler+0x126>
 8003a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f043 0208 	orr.w	r2, r3, #8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 81ed 	beq.w	8003e5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_UART_IRQHandler+0x14e>
 8003a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fb5e 	bl	800415a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d103      	bne.n	8003aca <HAL_UART_IRQHandler+0x17a>
 8003ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d04f      	beq.n	8003b6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fa66 	bl	8003f9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d141      	bne.n	8003b62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3314      	adds	r3, #20
 8003ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3314      	adds	r3, #20
 8003b06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1d9      	bne.n	8003ade <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d013      	beq.n	8003b5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	4a7d      	ldr	r2, [pc, #500]	; (8003d2c <HAL_UART_IRQHandler+0x3dc>)
 8003b38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd fed7 	bl	80018f2 <HAL_DMA_Abort_IT>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d016      	beq.n	8003b78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b54:	4610      	mov	r0, r2
 8003b56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b58:	e00e      	b.n	8003b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f99a 	bl	8003e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	e00a      	b.n	8003b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f996 	bl	8003e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b68:	e006      	b.n	8003b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f992 	bl	8003e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b76:	e170      	b.n	8003e5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b78:	bf00      	nop
    return;
 8003b7a:	e16e      	b.n	8003e5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	f040 814a 	bne.w	8003e1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 8143 	beq.w	8003e1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 813c 	beq.w	8003e1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	f040 80b4 	bne.w	8003d30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8140 	beq.w	8003e5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003be6:	429a      	cmp	r2, r3
 8003be8:	f080 8139 	bcs.w	8003e5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfe:	f000 8088 	beq.w	8003d12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	330c      	adds	r3, #12
 8003c08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1d9      	bne.n	8003c02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3314      	adds	r3, #20
 8003c54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3314      	adds	r3, #20
 8003c6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e1      	bne.n	8003c4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3314      	adds	r3, #20
 8003c90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3314      	adds	r3, #20
 8003caa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e3      	bne.n	8003c8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce2:	f023 0310 	bic.w	r3, r3, #16
 8003ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cf4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cf6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cfc:	e841 2300 	strex	r3, r2, [r1]
 8003d00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e3      	bne.n	8003cd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fd fd80 	bl	8001812 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8c0 	bl	8003ea8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d28:	e099      	b.n	8003e5e <HAL_UART_IRQHandler+0x50e>
 8003d2a:	bf00      	nop
 8003d2c:	08004063 	.word	0x08004063
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 808b 	beq.w	8003e62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8086 	beq.w	8003e62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d7a:	647a      	str	r2, [r7, #68]	; 0x44
 8003d7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e3      	bne.n	8003d56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3314      	adds	r3, #20
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3314      	adds	r3, #20
 8003dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003db2:	633a      	str	r2, [r7, #48]	; 0x30
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e3      	bne.n	8003d8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0310 	bic.w	r3, r3, #16
 8003dea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003df8:	61fa      	str	r2, [r7, #28]
 8003dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	69b9      	ldr	r1, [r7, #24]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	617b      	str	r3, [r7, #20]
   return(result);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e3      	bne.n	8003dd4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e10:	4619      	mov	r1, r3
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f848 	bl	8003ea8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e18:	e023      	b.n	8003e62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_UART_IRQHandler+0x4ea>
 8003e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f929 	bl	800408a <UART_Transmit_IT>
    return;
 8003e38:	e014      	b.n	8003e64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00e      	beq.n	8003e64 <HAL_UART_IRQHandler+0x514>
 8003e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f969 	bl	800412a <UART_EndTransmit_IT>
    return;
 8003e58:	e004      	b.n	8003e64 <HAL_UART_IRQHandler+0x514>
    return;
 8003e5a:	bf00      	nop
 8003e5c:	e002      	b.n	8003e64 <HAL_UART_IRQHandler+0x514>
      return;
 8003e5e:	bf00      	nop
 8003e60:	e000      	b.n	8003e64 <HAL_UART_IRQHandler+0x514>
      return;
 8003e62:	bf00      	nop
  }
}
 8003e64:	37e8      	adds	r7, #232	; 0xe8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop

08003e6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b090      	sub	sp, #64	; 0x40
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed0:	e050      	b.n	8003f74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d04c      	beq.n	8003f74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ee0:	f7fd fa7e 	bl	80013e0 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d241      	bcs.n	8003f74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f10:	637a      	str	r2, [r7, #52]	; 0x34
 8003f12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e5      	bne.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3314      	adds	r3, #20
 8003f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	613b      	str	r3, [r7, #16]
   return(result);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3314      	adds	r3, #20
 8003f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f44:	623a      	str	r2, [r7, #32]
 8003f46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	69f9      	ldr	r1, [r7, #28]
 8003f4a:	6a3a      	ldr	r2, [r7, #32]
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e5      	bne.n	8003f24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e00f      	b.n	8003f94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d09f      	beq.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3740      	adds	r7, #64	; 0x40
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b095      	sub	sp, #84	; 0x54
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	330c      	adds	r3, #12
 8003faa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fc4:	643a      	str	r2, [r7, #64]	; 0x40
 8003fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e5      	bne.n	8003fa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3314      	adds	r3, #20
 8003fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3314      	adds	r3, #20
 8003ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e5      	bne.n	8003fd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	2b01      	cmp	r3, #1
 8004012:	d119      	bne.n	8004048 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	60bb      	str	r3, [r7, #8]
   return(result);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f023 0310 	bic.w	r3, r3, #16
 800402a:	647b      	str	r3, [r7, #68]	; 0x44
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004034:	61ba      	str	r2, [r7, #24]
 8004036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6979      	ldr	r1, [r7, #20]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	613b      	str	r3, [r7, #16]
   return(result);
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e5      	bne.n	8004014 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004056:	bf00      	nop
 8004058:	3754      	adds	r7, #84	; 0x54
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f7ff ff09 	bl	8003e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b21      	cmp	r3, #33	; 0x21
 800409c:	d13e      	bne.n	800411c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	d114      	bne.n	80040d2 <UART_Transmit_IT+0x48>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d110      	bne.n	80040d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	1c9a      	adds	r2, r3, #2
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	621a      	str	r2, [r3, #32]
 80040d0:	e008      	b.n	80040e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	1c59      	adds	r1, r3, #1
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6211      	str	r1, [r2, #32]
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4619      	mov	r1, r3
 80040f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10f      	bne.n	8004118 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004106:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004116:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004140:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff fe8e 	bl	8003e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b08c      	sub	sp, #48	; 0x30
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b22      	cmp	r3, #34	; 0x22
 800416c:	f040 80ab 	bne.w	80042c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004178:	d117      	bne.n	80041aa <UART_Receive_IT+0x50>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d113      	bne.n	80041aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	b29b      	uxth	r3, r3
 8004194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004198:	b29a      	uxth	r2, r3
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	1c9a      	adds	r2, r3, #2
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	629a      	str	r2, [r3, #40]	; 0x28
 80041a8:	e026      	b.n	80041f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041bc:	d007      	beq.n	80041ce <UART_Receive_IT+0x74>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <UART_Receive_IT+0x82>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	e008      	b.n	80041ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29b      	uxth	r3, r3
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	4619      	mov	r1, r3
 8004206:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004208:	2b00      	cmp	r3, #0
 800420a:	d15a      	bne.n	80042c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0220 	bic.w	r2, r2, #32
 800421a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800422a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0201 	bic.w	r2, r2, #1
 800423a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	2b01      	cmp	r3, #1
 800424a:	d135      	bne.n	80042b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	330c      	adds	r3, #12
 8004258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	613b      	str	r3, [r7, #16]
   return(result);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f023 0310 	bic.w	r3, r3, #16
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	330c      	adds	r3, #12
 8004270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004272:	623a      	str	r2, [r7, #32]
 8004274:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	69f9      	ldr	r1, [r7, #28]
 8004278:	6a3a      	ldr	r2, [r7, #32]
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e5      	bne.n	8004252 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b10      	cmp	r3, #16
 8004292:	d10a      	bne.n	80042aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fdf9 	bl	8003ea8 <HAL_UARTEx_RxEventCallback>
 80042b6:	e002      	b.n	80042be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff fde1 	bl	8003e80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e002      	b.n	80042c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
  }
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3730      	adds	r7, #48	; 0x30
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d4:	b0c0      	sub	sp, #256	; 0x100
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ec:	68d9      	ldr	r1, [r3, #12]
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	ea40 0301 	orr.w	r3, r0, r1
 80042f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	431a      	orrs	r2, r3
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	431a      	orrs	r2, r3
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004328:	f021 010c 	bic.w	r1, r1, #12
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004336:	430b      	orrs	r3, r1
 8004338:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434a:	6999      	ldr	r1, [r3, #24]
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	ea40 0301 	orr.w	r3, r0, r1
 8004356:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b8f      	ldr	r3, [pc, #572]	; (800459c <UART_SetConfig+0x2cc>)
 8004360:	429a      	cmp	r2, r3
 8004362:	d005      	beq.n	8004370 <UART_SetConfig+0xa0>
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b8d      	ldr	r3, [pc, #564]	; (80045a0 <UART_SetConfig+0x2d0>)
 800436c:	429a      	cmp	r2, r3
 800436e:	d104      	bne.n	800437a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004370:	f7fe fd2c 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8004374:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004378:	e003      	b.n	8004382 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800437a:	f7fe fd13 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 800437e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800438c:	f040 810c 	bne.w	80045a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004394:	2200      	movs	r2, #0
 8004396:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800439a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800439e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043a2:	4622      	mov	r2, r4
 80043a4:	462b      	mov	r3, r5
 80043a6:	1891      	adds	r1, r2, r2
 80043a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80043aa:	415b      	adcs	r3, r3
 80043ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043b2:	4621      	mov	r1, r4
 80043b4:	eb12 0801 	adds.w	r8, r2, r1
 80043b8:	4629      	mov	r1, r5
 80043ba:	eb43 0901 	adc.w	r9, r3, r1
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043d2:	4690      	mov	r8, r2
 80043d4:	4699      	mov	r9, r3
 80043d6:	4623      	mov	r3, r4
 80043d8:	eb18 0303 	adds.w	r3, r8, r3
 80043dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043e0:	462b      	mov	r3, r5
 80043e2:	eb49 0303 	adc.w	r3, r9, r3
 80043e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043fe:	460b      	mov	r3, r1
 8004400:	18db      	adds	r3, r3, r3
 8004402:	653b      	str	r3, [r7, #80]	; 0x50
 8004404:	4613      	mov	r3, r2
 8004406:	eb42 0303 	adc.w	r3, r2, r3
 800440a:	657b      	str	r3, [r7, #84]	; 0x54
 800440c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004410:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004414:	f7fb ff4c 	bl	80002b0 <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4b61      	ldr	r3, [pc, #388]	; (80045a4 <UART_SetConfig+0x2d4>)
 800441e:	fba3 2302 	umull	r2, r3, r3, r2
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	011c      	lsls	r4, r3, #4
 8004426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800442a:	2200      	movs	r2, #0
 800442c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004430:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004434:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004438:	4642      	mov	r2, r8
 800443a:	464b      	mov	r3, r9
 800443c:	1891      	adds	r1, r2, r2
 800443e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004440:	415b      	adcs	r3, r3
 8004442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004448:	4641      	mov	r1, r8
 800444a:	eb12 0a01 	adds.w	sl, r2, r1
 800444e:	4649      	mov	r1, r9
 8004450:	eb43 0b01 	adc.w	fp, r3, r1
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004460:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004468:	4692      	mov	sl, r2
 800446a:	469b      	mov	fp, r3
 800446c:	4643      	mov	r3, r8
 800446e:	eb1a 0303 	adds.w	r3, sl, r3
 8004472:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004476:	464b      	mov	r3, r9
 8004478:	eb4b 0303 	adc.w	r3, fp, r3
 800447c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800448c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004490:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004494:	460b      	mov	r3, r1
 8004496:	18db      	adds	r3, r3, r3
 8004498:	643b      	str	r3, [r7, #64]	; 0x40
 800449a:	4613      	mov	r3, r2
 800449c:	eb42 0303 	adc.w	r3, r2, r3
 80044a0:	647b      	str	r3, [r7, #68]	; 0x44
 80044a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044aa:	f7fb ff01 	bl	80002b0 <__aeabi_uldivmod>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	4b3b      	ldr	r3, [pc, #236]	; (80045a4 <UART_SetConfig+0x2d4>)
 80044b6:	fba3 2301 	umull	r2, r3, r3, r1
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	2264      	movs	r2, #100	; 0x64
 80044be:	fb02 f303 	mul.w	r3, r2, r3
 80044c2:	1acb      	subs	r3, r1, r3
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044ca:	4b36      	ldr	r3, [pc, #216]	; (80045a4 <UART_SetConfig+0x2d4>)
 80044cc:	fba3 2302 	umull	r2, r3, r3, r2
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044d8:	441c      	add	r4, r3
 80044da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044ec:	4642      	mov	r2, r8
 80044ee:	464b      	mov	r3, r9
 80044f0:	1891      	adds	r1, r2, r2
 80044f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80044f4:	415b      	adcs	r3, r3
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044fc:	4641      	mov	r1, r8
 80044fe:	1851      	adds	r1, r2, r1
 8004500:	6339      	str	r1, [r7, #48]	; 0x30
 8004502:	4649      	mov	r1, r9
 8004504:	414b      	adcs	r3, r1
 8004506:	637b      	str	r3, [r7, #52]	; 0x34
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004514:	4659      	mov	r1, fp
 8004516:	00cb      	lsls	r3, r1, #3
 8004518:	4651      	mov	r1, sl
 800451a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451e:	4651      	mov	r1, sl
 8004520:	00ca      	lsls	r2, r1, #3
 8004522:	4610      	mov	r0, r2
 8004524:	4619      	mov	r1, r3
 8004526:	4603      	mov	r3, r0
 8004528:	4642      	mov	r2, r8
 800452a:	189b      	adds	r3, r3, r2
 800452c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004530:	464b      	mov	r3, r9
 8004532:	460a      	mov	r2, r1
 8004534:	eb42 0303 	adc.w	r3, r2, r3
 8004538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004548:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800454c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004550:	460b      	mov	r3, r1
 8004552:	18db      	adds	r3, r3, r3
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
 8004556:	4613      	mov	r3, r2
 8004558:	eb42 0303 	adc.w	r3, r2, r3
 800455c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800455e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004562:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004566:	f7fb fea3 	bl	80002b0 <__aeabi_uldivmod>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <UART_SetConfig+0x2d4>)
 8004570:	fba3 1302 	umull	r1, r3, r3, r2
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	2164      	movs	r1, #100	; 0x64
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	3332      	adds	r3, #50	; 0x32
 8004582:	4a08      	ldr	r2, [pc, #32]	; (80045a4 <UART_SetConfig+0x2d4>)
 8004584:	fba2 2303 	umull	r2, r3, r2, r3
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	f003 0207 	and.w	r2, r3, #7
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4422      	add	r2, r4
 8004596:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004598:	e106      	b.n	80047a8 <UART_SetConfig+0x4d8>
 800459a:	bf00      	nop
 800459c:	40011000 	.word	0x40011000
 80045a0:	40011400 	.word	0x40011400
 80045a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045ba:	4642      	mov	r2, r8
 80045bc:	464b      	mov	r3, r9
 80045be:	1891      	adds	r1, r2, r2
 80045c0:	6239      	str	r1, [r7, #32]
 80045c2:	415b      	adcs	r3, r3
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
 80045c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ca:	4641      	mov	r1, r8
 80045cc:	1854      	adds	r4, r2, r1
 80045ce:	4649      	mov	r1, r9
 80045d0:	eb43 0501 	adc.w	r5, r3, r1
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	00eb      	lsls	r3, r5, #3
 80045de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045e2:	00e2      	lsls	r2, r4, #3
 80045e4:	4614      	mov	r4, r2
 80045e6:	461d      	mov	r5, r3
 80045e8:	4643      	mov	r3, r8
 80045ea:	18e3      	adds	r3, r4, r3
 80045ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045f0:	464b      	mov	r3, r9
 80045f2:	eb45 0303 	adc.w	r3, r5, r3
 80045f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004606:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004616:	4629      	mov	r1, r5
 8004618:	008b      	lsls	r3, r1, #2
 800461a:	4621      	mov	r1, r4
 800461c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004620:	4621      	mov	r1, r4
 8004622:	008a      	lsls	r2, r1, #2
 8004624:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004628:	f7fb fe42 	bl	80002b0 <__aeabi_uldivmod>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4b60      	ldr	r3, [pc, #384]	; (80047b4 <UART_SetConfig+0x4e4>)
 8004632:	fba3 2302 	umull	r2, r3, r3, r2
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	011c      	lsls	r4, r3, #4
 800463a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800463e:	2200      	movs	r2, #0
 8004640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004644:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004648:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800464c:	4642      	mov	r2, r8
 800464e:	464b      	mov	r3, r9
 8004650:	1891      	adds	r1, r2, r2
 8004652:	61b9      	str	r1, [r7, #24]
 8004654:	415b      	adcs	r3, r3
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800465c:	4641      	mov	r1, r8
 800465e:	1851      	adds	r1, r2, r1
 8004660:	6139      	str	r1, [r7, #16]
 8004662:	4649      	mov	r1, r9
 8004664:	414b      	adcs	r3, r1
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004674:	4659      	mov	r1, fp
 8004676:	00cb      	lsls	r3, r1, #3
 8004678:	4651      	mov	r1, sl
 800467a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467e:	4651      	mov	r1, sl
 8004680:	00ca      	lsls	r2, r1, #3
 8004682:	4610      	mov	r0, r2
 8004684:	4619      	mov	r1, r3
 8004686:	4603      	mov	r3, r0
 8004688:	4642      	mov	r2, r8
 800468a:	189b      	adds	r3, r3, r2
 800468c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004690:	464b      	mov	r3, r9
 8004692:	460a      	mov	r2, r1
 8004694:	eb42 0303 	adc.w	r3, r2, r3
 8004698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80046a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046b4:	4649      	mov	r1, r9
 80046b6:	008b      	lsls	r3, r1, #2
 80046b8:	4641      	mov	r1, r8
 80046ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046be:	4641      	mov	r1, r8
 80046c0:	008a      	lsls	r2, r1, #2
 80046c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046c6:	f7fb fdf3 	bl	80002b0 <__aeabi_uldivmod>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4611      	mov	r1, r2
 80046d0:	4b38      	ldr	r3, [pc, #224]	; (80047b4 <UART_SetConfig+0x4e4>)
 80046d2:	fba3 2301 	umull	r2, r3, r3, r1
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2264      	movs	r2, #100	; 0x64
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	1acb      	subs	r3, r1, r3
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	3332      	adds	r3, #50	; 0x32
 80046e4:	4a33      	ldr	r2, [pc, #204]	; (80047b4 <UART_SetConfig+0x4e4>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f0:	441c      	add	r4, r3
 80046f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046f6:	2200      	movs	r2, #0
 80046f8:	673b      	str	r3, [r7, #112]	; 0x70
 80046fa:	677a      	str	r2, [r7, #116]	; 0x74
 80046fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	1891      	adds	r1, r2, r2
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	415b      	adcs	r3, r3
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004710:	4641      	mov	r1, r8
 8004712:	1851      	adds	r1, r2, r1
 8004714:	6039      	str	r1, [r7, #0]
 8004716:	4649      	mov	r1, r9
 8004718:	414b      	adcs	r3, r1
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004728:	4659      	mov	r1, fp
 800472a:	00cb      	lsls	r3, r1, #3
 800472c:	4651      	mov	r1, sl
 800472e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004732:	4651      	mov	r1, sl
 8004734:	00ca      	lsls	r2, r1, #3
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	4603      	mov	r3, r0
 800473c:	4642      	mov	r2, r8
 800473e:	189b      	adds	r3, r3, r2
 8004740:	66bb      	str	r3, [r7, #104]	; 0x68
 8004742:	464b      	mov	r3, r9
 8004744:	460a      	mov	r2, r1
 8004746:	eb42 0303 	adc.w	r3, r2, r3
 800474a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	663b      	str	r3, [r7, #96]	; 0x60
 8004756:	667a      	str	r2, [r7, #100]	; 0x64
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004764:	4649      	mov	r1, r9
 8004766:	008b      	lsls	r3, r1, #2
 8004768:	4641      	mov	r1, r8
 800476a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800476e:	4641      	mov	r1, r8
 8004770:	008a      	lsls	r2, r1, #2
 8004772:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004776:	f7fb fd9b 	bl	80002b0 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <UART_SetConfig+0x4e4>)
 8004780:	fba3 1302 	umull	r1, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	2164      	movs	r1, #100	; 0x64
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	3332      	adds	r3, #50	; 0x32
 8004792:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <UART_SetConfig+0x4e4>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	f003 020f 	and.w	r2, r3, #15
 800479e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4422      	add	r2, r4
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	bf00      	nop
 80047aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047ae:	46bd      	mov	sp, r7
 80047b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b4:	51eb851f 	.word	0x51eb851f

080047b8 <std>:
 80047b8:	2300      	movs	r3, #0
 80047ba:	b510      	push	{r4, lr}
 80047bc:	4604      	mov	r4, r0
 80047be:	e9c0 3300 	strd	r3, r3, [r0]
 80047c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047c6:	6083      	str	r3, [r0, #8]
 80047c8:	8181      	strh	r1, [r0, #12]
 80047ca:	6643      	str	r3, [r0, #100]	; 0x64
 80047cc:	81c2      	strh	r2, [r0, #14]
 80047ce:	6183      	str	r3, [r0, #24]
 80047d0:	4619      	mov	r1, r3
 80047d2:	2208      	movs	r2, #8
 80047d4:	305c      	adds	r0, #92	; 0x5c
 80047d6:	f000 f9ed 	bl	8004bb4 <memset>
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <std+0x38>)
 80047dc:	6263      	str	r3, [r4, #36]	; 0x24
 80047de:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <std+0x3c>)
 80047e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80047e2:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <std+0x40>)
 80047e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047e6:	4b05      	ldr	r3, [pc, #20]	; (80047fc <std+0x44>)
 80047e8:	6224      	str	r4, [r4, #32]
 80047ea:	6323      	str	r3, [r4, #48]	; 0x30
 80047ec:	bd10      	pop	{r4, pc}
 80047ee:	bf00      	nop
 80047f0:	08004a05 	.word	0x08004a05
 80047f4:	08004a27 	.word	0x08004a27
 80047f8:	08004a5f 	.word	0x08004a5f
 80047fc:	08004a83 	.word	0x08004a83

08004800 <stdio_exit_handler>:
 8004800:	4a02      	ldr	r2, [pc, #8]	; (800480c <stdio_exit_handler+0xc>)
 8004802:	4903      	ldr	r1, [pc, #12]	; (8004810 <stdio_exit_handler+0x10>)
 8004804:	4803      	ldr	r0, [pc, #12]	; (8004814 <stdio_exit_handler+0x14>)
 8004806:	f000 b869 	b.w	80048dc <_fwalk_sglue>
 800480a:	bf00      	nop
 800480c:	20000030 	.word	0x20000030
 8004810:	0800554d 	.word	0x0800554d
 8004814:	2000003c 	.word	0x2000003c

08004818 <cleanup_stdio>:
 8004818:	6841      	ldr	r1, [r0, #4]
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <cleanup_stdio+0x34>)
 800481c:	4299      	cmp	r1, r3
 800481e:	b510      	push	{r4, lr}
 8004820:	4604      	mov	r4, r0
 8004822:	d001      	beq.n	8004828 <cleanup_stdio+0x10>
 8004824:	f000 fe92 	bl	800554c <_fflush_r>
 8004828:	68a1      	ldr	r1, [r4, #8]
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <cleanup_stdio+0x38>)
 800482c:	4299      	cmp	r1, r3
 800482e:	d002      	beq.n	8004836 <cleanup_stdio+0x1e>
 8004830:	4620      	mov	r0, r4
 8004832:	f000 fe8b 	bl	800554c <_fflush_r>
 8004836:	68e1      	ldr	r1, [r4, #12]
 8004838:	4b06      	ldr	r3, [pc, #24]	; (8004854 <cleanup_stdio+0x3c>)
 800483a:	4299      	cmp	r1, r3
 800483c:	d004      	beq.n	8004848 <cleanup_stdio+0x30>
 800483e:	4620      	mov	r0, r4
 8004840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004844:	f000 be82 	b.w	800554c <_fflush_r>
 8004848:	bd10      	pop	{r4, pc}
 800484a:	bf00      	nop
 800484c:	20000208 	.word	0x20000208
 8004850:	20000270 	.word	0x20000270
 8004854:	200002d8 	.word	0x200002d8

08004858 <global_stdio_init.part.0>:
 8004858:	b510      	push	{r4, lr}
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <global_stdio_init.part.0+0x30>)
 800485c:	4c0b      	ldr	r4, [pc, #44]	; (800488c <global_stdio_init.part.0+0x34>)
 800485e:	4a0c      	ldr	r2, [pc, #48]	; (8004890 <global_stdio_init.part.0+0x38>)
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	4620      	mov	r0, r4
 8004864:	2200      	movs	r2, #0
 8004866:	2104      	movs	r1, #4
 8004868:	f7ff ffa6 	bl	80047b8 <std>
 800486c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004870:	2201      	movs	r2, #1
 8004872:	2109      	movs	r1, #9
 8004874:	f7ff ffa0 	bl	80047b8 <std>
 8004878:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800487c:	2202      	movs	r2, #2
 800487e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004882:	2112      	movs	r1, #18
 8004884:	f7ff bf98 	b.w	80047b8 <std>
 8004888:	20000340 	.word	0x20000340
 800488c:	20000208 	.word	0x20000208
 8004890:	08004801 	.word	0x08004801

08004894 <__sfp_lock_acquire>:
 8004894:	4801      	ldr	r0, [pc, #4]	; (800489c <__sfp_lock_acquire+0x8>)
 8004896:	f000 ba05 	b.w	8004ca4 <__retarget_lock_acquire_recursive>
 800489a:	bf00      	nop
 800489c:	20000349 	.word	0x20000349

080048a0 <__sfp_lock_release>:
 80048a0:	4801      	ldr	r0, [pc, #4]	; (80048a8 <__sfp_lock_release+0x8>)
 80048a2:	f000 ba00 	b.w	8004ca6 <__retarget_lock_release_recursive>
 80048a6:	bf00      	nop
 80048a8:	20000349 	.word	0x20000349

080048ac <__sinit>:
 80048ac:	b510      	push	{r4, lr}
 80048ae:	4604      	mov	r4, r0
 80048b0:	f7ff fff0 	bl	8004894 <__sfp_lock_acquire>
 80048b4:	6a23      	ldr	r3, [r4, #32]
 80048b6:	b11b      	cbz	r3, 80048c0 <__sinit+0x14>
 80048b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048bc:	f7ff bff0 	b.w	80048a0 <__sfp_lock_release>
 80048c0:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <__sinit+0x28>)
 80048c2:	6223      	str	r3, [r4, #32]
 80048c4:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <__sinit+0x2c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f5      	bne.n	80048b8 <__sinit+0xc>
 80048cc:	f7ff ffc4 	bl	8004858 <global_stdio_init.part.0>
 80048d0:	e7f2      	b.n	80048b8 <__sinit+0xc>
 80048d2:	bf00      	nop
 80048d4:	08004819 	.word	0x08004819
 80048d8:	20000340 	.word	0x20000340

080048dc <_fwalk_sglue>:
 80048dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e0:	4607      	mov	r7, r0
 80048e2:	4688      	mov	r8, r1
 80048e4:	4614      	mov	r4, r2
 80048e6:	2600      	movs	r6, #0
 80048e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048ec:	f1b9 0901 	subs.w	r9, r9, #1
 80048f0:	d505      	bpl.n	80048fe <_fwalk_sglue+0x22>
 80048f2:	6824      	ldr	r4, [r4, #0]
 80048f4:	2c00      	cmp	r4, #0
 80048f6:	d1f7      	bne.n	80048e8 <_fwalk_sglue+0xc>
 80048f8:	4630      	mov	r0, r6
 80048fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048fe:	89ab      	ldrh	r3, [r5, #12]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d907      	bls.n	8004914 <_fwalk_sglue+0x38>
 8004904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004908:	3301      	adds	r3, #1
 800490a:	d003      	beq.n	8004914 <_fwalk_sglue+0x38>
 800490c:	4629      	mov	r1, r5
 800490e:	4638      	mov	r0, r7
 8004910:	47c0      	blx	r8
 8004912:	4306      	orrs	r6, r0
 8004914:	3568      	adds	r5, #104	; 0x68
 8004916:	e7e9      	b.n	80048ec <_fwalk_sglue+0x10>

08004918 <iprintf>:
 8004918:	b40f      	push	{r0, r1, r2, r3}
 800491a:	b507      	push	{r0, r1, r2, lr}
 800491c:	4906      	ldr	r1, [pc, #24]	; (8004938 <iprintf+0x20>)
 800491e:	ab04      	add	r3, sp, #16
 8004920:	6808      	ldr	r0, [r1, #0]
 8004922:	f853 2b04 	ldr.w	r2, [r3], #4
 8004926:	6881      	ldr	r1, [r0, #8]
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	f000 fadf 	bl	8004eec <_vfiprintf_r>
 800492e:	b003      	add	sp, #12
 8004930:	f85d eb04 	ldr.w	lr, [sp], #4
 8004934:	b004      	add	sp, #16
 8004936:	4770      	bx	lr
 8004938:	20000088 	.word	0x20000088

0800493c <putchar>:
 800493c:	4b02      	ldr	r3, [pc, #8]	; (8004948 <putchar+0xc>)
 800493e:	4601      	mov	r1, r0
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	6882      	ldr	r2, [r0, #8]
 8004944:	f000 be8c 	b.w	8005660 <_putc_r>
 8004948:	20000088 	.word	0x20000088

0800494c <_puts_r>:
 800494c:	6a03      	ldr	r3, [r0, #32]
 800494e:	b570      	push	{r4, r5, r6, lr}
 8004950:	6884      	ldr	r4, [r0, #8]
 8004952:	4605      	mov	r5, r0
 8004954:	460e      	mov	r6, r1
 8004956:	b90b      	cbnz	r3, 800495c <_puts_r+0x10>
 8004958:	f7ff ffa8 	bl	80048ac <__sinit>
 800495c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800495e:	07db      	lsls	r3, r3, #31
 8004960:	d405      	bmi.n	800496e <_puts_r+0x22>
 8004962:	89a3      	ldrh	r3, [r4, #12]
 8004964:	0598      	lsls	r0, r3, #22
 8004966:	d402      	bmi.n	800496e <_puts_r+0x22>
 8004968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800496a:	f000 f99b 	bl	8004ca4 <__retarget_lock_acquire_recursive>
 800496e:	89a3      	ldrh	r3, [r4, #12]
 8004970:	0719      	lsls	r1, r3, #28
 8004972:	d513      	bpl.n	800499c <_puts_r+0x50>
 8004974:	6923      	ldr	r3, [r4, #16]
 8004976:	b18b      	cbz	r3, 800499c <_puts_r+0x50>
 8004978:	3e01      	subs	r6, #1
 800497a:	68a3      	ldr	r3, [r4, #8]
 800497c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004980:	3b01      	subs	r3, #1
 8004982:	60a3      	str	r3, [r4, #8]
 8004984:	b9e9      	cbnz	r1, 80049c2 <_puts_r+0x76>
 8004986:	2b00      	cmp	r3, #0
 8004988:	da2e      	bge.n	80049e8 <_puts_r+0x9c>
 800498a:	4622      	mov	r2, r4
 800498c:	210a      	movs	r1, #10
 800498e:	4628      	mov	r0, r5
 8004990:	f000 f87b 	bl	8004a8a <__swbuf_r>
 8004994:	3001      	adds	r0, #1
 8004996:	d007      	beq.n	80049a8 <_puts_r+0x5c>
 8004998:	250a      	movs	r5, #10
 800499a:	e007      	b.n	80049ac <_puts_r+0x60>
 800499c:	4621      	mov	r1, r4
 800499e:	4628      	mov	r0, r5
 80049a0:	f000 f8b0 	bl	8004b04 <__swsetup_r>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	d0e7      	beq.n	8004978 <_puts_r+0x2c>
 80049a8:	f04f 35ff 	mov.w	r5, #4294967295
 80049ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049ae:	07da      	lsls	r2, r3, #31
 80049b0:	d405      	bmi.n	80049be <_puts_r+0x72>
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	059b      	lsls	r3, r3, #22
 80049b6:	d402      	bmi.n	80049be <_puts_r+0x72>
 80049b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ba:	f000 f974 	bl	8004ca6 <__retarget_lock_release_recursive>
 80049be:	4628      	mov	r0, r5
 80049c0:	bd70      	pop	{r4, r5, r6, pc}
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	da04      	bge.n	80049d0 <_puts_r+0x84>
 80049c6:	69a2      	ldr	r2, [r4, #24]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	dc06      	bgt.n	80049da <_puts_r+0x8e>
 80049cc:	290a      	cmp	r1, #10
 80049ce:	d004      	beq.n	80049da <_puts_r+0x8e>
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	6022      	str	r2, [r4, #0]
 80049d6:	7019      	strb	r1, [r3, #0]
 80049d8:	e7cf      	b.n	800497a <_puts_r+0x2e>
 80049da:	4622      	mov	r2, r4
 80049dc:	4628      	mov	r0, r5
 80049de:	f000 f854 	bl	8004a8a <__swbuf_r>
 80049e2:	3001      	adds	r0, #1
 80049e4:	d1c9      	bne.n	800497a <_puts_r+0x2e>
 80049e6:	e7df      	b.n	80049a8 <_puts_r+0x5c>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	250a      	movs	r5, #10
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	6022      	str	r2, [r4, #0]
 80049f0:	701d      	strb	r5, [r3, #0]
 80049f2:	e7db      	b.n	80049ac <_puts_r+0x60>

080049f4 <puts>:
 80049f4:	4b02      	ldr	r3, [pc, #8]	; (8004a00 <puts+0xc>)
 80049f6:	4601      	mov	r1, r0
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	f7ff bfa7 	b.w	800494c <_puts_r>
 80049fe:	bf00      	nop
 8004a00:	20000088 	.word	0x20000088

08004a04 <__sread>:
 8004a04:	b510      	push	{r4, lr}
 8004a06:	460c      	mov	r4, r1
 8004a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a0c:	f000 f8fc 	bl	8004c08 <_read_r>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	bfab      	itete	ge
 8004a14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a16:	89a3      	ldrhlt	r3, [r4, #12]
 8004a18:	181b      	addge	r3, r3, r0
 8004a1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a1e:	bfac      	ite	ge
 8004a20:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a22:	81a3      	strhlt	r3, [r4, #12]
 8004a24:	bd10      	pop	{r4, pc}

08004a26 <__swrite>:
 8004a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2a:	461f      	mov	r7, r3
 8004a2c:	898b      	ldrh	r3, [r1, #12]
 8004a2e:	05db      	lsls	r3, r3, #23
 8004a30:	4605      	mov	r5, r0
 8004a32:	460c      	mov	r4, r1
 8004a34:	4616      	mov	r6, r2
 8004a36:	d505      	bpl.n	8004a44 <__swrite+0x1e>
 8004a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f000 f8d0 	bl	8004be4 <_lseek_r>
 8004a44:	89a3      	ldrh	r3, [r4, #12]
 8004a46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a4e:	81a3      	strh	r3, [r4, #12]
 8004a50:	4632      	mov	r2, r6
 8004a52:	463b      	mov	r3, r7
 8004a54:	4628      	mov	r0, r5
 8004a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a5a:	f000 b8e7 	b.w	8004c2c <_write_r>

08004a5e <__sseek>:
 8004a5e:	b510      	push	{r4, lr}
 8004a60:	460c      	mov	r4, r1
 8004a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a66:	f000 f8bd 	bl	8004be4 <_lseek_r>
 8004a6a:	1c43      	adds	r3, r0, #1
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	bf15      	itete	ne
 8004a70:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a7a:	81a3      	strheq	r3, [r4, #12]
 8004a7c:	bf18      	it	ne
 8004a7e:	81a3      	strhne	r3, [r4, #12]
 8004a80:	bd10      	pop	{r4, pc}

08004a82 <__sclose>:
 8004a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a86:	f000 b89d 	b.w	8004bc4 <_close_r>

08004a8a <__swbuf_r>:
 8004a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8c:	460e      	mov	r6, r1
 8004a8e:	4614      	mov	r4, r2
 8004a90:	4605      	mov	r5, r0
 8004a92:	b118      	cbz	r0, 8004a9c <__swbuf_r+0x12>
 8004a94:	6a03      	ldr	r3, [r0, #32]
 8004a96:	b90b      	cbnz	r3, 8004a9c <__swbuf_r+0x12>
 8004a98:	f7ff ff08 	bl	80048ac <__sinit>
 8004a9c:	69a3      	ldr	r3, [r4, #24]
 8004a9e:	60a3      	str	r3, [r4, #8]
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	071a      	lsls	r2, r3, #28
 8004aa4:	d525      	bpl.n	8004af2 <__swbuf_r+0x68>
 8004aa6:	6923      	ldr	r3, [r4, #16]
 8004aa8:	b31b      	cbz	r3, 8004af2 <__swbuf_r+0x68>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	6922      	ldr	r2, [r4, #16]
 8004aae:	1a98      	subs	r0, r3, r2
 8004ab0:	6963      	ldr	r3, [r4, #20]
 8004ab2:	b2f6      	uxtb	r6, r6
 8004ab4:	4283      	cmp	r3, r0
 8004ab6:	4637      	mov	r7, r6
 8004ab8:	dc04      	bgt.n	8004ac4 <__swbuf_r+0x3a>
 8004aba:	4621      	mov	r1, r4
 8004abc:	4628      	mov	r0, r5
 8004abe:	f000 fd45 	bl	800554c <_fflush_r>
 8004ac2:	b9e0      	cbnz	r0, 8004afe <__swbuf_r+0x74>
 8004ac4:	68a3      	ldr	r3, [r4, #8]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	60a3      	str	r3, [r4, #8]
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	6022      	str	r2, [r4, #0]
 8004ad0:	701e      	strb	r6, [r3, #0]
 8004ad2:	6962      	ldr	r2, [r4, #20]
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d004      	beq.n	8004ae4 <__swbuf_r+0x5a>
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	07db      	lsls	r3, r3, #31
 8004ade:	d506      	bpl.n	8004aee <__swbuf_r+0x64>
 8004ae0:	2e0a      	cmp	r6, #10
 8004ae2:	d104      	bne.n	8004aee <__swbuf_r+0x64>
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 fd30 	bl	800554c <_fflush_r>
 8004aec:	b938      	cbnz	r0, 8004afe <__swbuf_r+0x74>
 8004aee:	4638      	mov	r0, r7
 8004af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af2:	4621      	mov	r1, r4
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 f805 	bl	8004b04 <__swsetup_r>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d0d5      	beq.n	8004aaa <__swbuf_r+0x20>
 8004afe:	f04f 37ff 	mov.w	r7, #4294967295
 8004b02:	e7f4      	b.n	8004aee <__swbuf_r+0x64>

08004b04 <__swsetup_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	4b2a      	ldr	r3, [pc, #168]	; (8004bb0 <__swsetup_r+0xac>)
 8004b08:	4605      	mov	r5, r0
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	b118      	cbz	r0, 8004b18 <__swsetup_r+0x14>
 8004b10:	6a03      	ldr	r3, [r0, #32]
 8004b12:	b90b      	cbnz	r3, 8004b18 <__swsetup_r+0x14>
 8004b14:	f7ff feca 	bl	80048ac <__sinit>
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b1e:	0718      	lsls	r0, r3, #28
 8004b20:	d422      	bmi.n	8004b68 <__swsetup_r+0x64>
 8004b22:	06d9      	lsls	r1, r3, #27
 8004b24:	d407      	bmi.n	8004b36 <__swsetup_r+0x32>
 8004b26:	2309      	movs	r3, #9
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b2e:	81a3      	strh	r3, [r4, #12]
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295
 8004b34:	e034      	b.n	8004ba0 <__swsetup_r+0x9c>
 8004b36:	0758      	lsls	r0, r3, #29
 8004b38:	d512      	bpl.n	8004b60 <__swsetup_r+0x5c>
 8004b3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b3c:	b141      	cbz	r1, 8004b50 <__swsetup_r+0x4c>
 8004b3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b42:	4299      	cmp	r1, r3
 8004b44:	d002      	beq.n	8004b4c <__swsetup_r+0x48>
 8004b46:	4628      	mov	r0, r5
 8004b48:	f000 f8ae 	bl	8004ca8 <_free_r>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	6363      	str	r3, [r4, #52]	; 0x34
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b56:	81a3      	strh	r3, [r4, #12]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	6063      	str	r3, [r4, #4]
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	6023      	str	r3, [r4, #0]
 8004b60:	89a3      	ldrh	r3, [r4, #12]
 8004b62:	f043 0308 	orr.w	r3, r3, #8
 8004b66:	81a3      	strh	r3, [r4, #12]
 8004b68:	6923      	ldr	r3, [r4, #16]
 8004b6a:	b94b      	cbnz	r3, 8004b80 <__swsetup_r+0x7c>
 8004b6c:	89a3      	ldrh	r3, [r4, #12]
 8004b6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b76:	d003      	beq.n	8004b80 <__swsetup_r+0x7c>
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f000 fd34 	bl	80055e8 <__smakebuf_r>
 8004b80:	89a0      	ldrh	r0, [r4, #12]
 8004b82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b86:	f010 0301 	ands.w	r3, r0, #1
 8004b8a:	d00a      	beq.n	8004ba2 <__swsetup_r+0x9e>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60a3      	str	r3, [r4, #8]
 8004b90:	6963      	ldr	r3, [r4, #20]
 8004b92:	425b      	negs	r3, r3
 8004b94:	61a3      	str	r3, [r4, #24]
 8004b96:	6923      	ldr	r3, [r4, #16]
 8004b98:	b943      	cbnz	r3, 8004bac <__swsetup_r+0xa8>
 8004b9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b9e:	d1c4      	bne.n	8004b2a <__swsetup_r+0x26>
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
 8004ba2:	0781      	lsls	r1, r0, #30
 8004ba4:	bf58      	it	pl
 8004ba6:	6963      	ldrpl	r3, [r4, #20]
 8004ba8:	60a3      	str	r3, [r4, #8]
 8004baa:	e7f4      	b.n	8004b96 <__swsetup_r+0x92>
 8004bac:	2000      	movs	r0, #0
 8004bae:	e7f7      	b.n	8004ba0 <__swsetup_r+0x9c>
 8004bb0:	20000088 	.word	0x20000088

08004bb4 <memset>:
 8004bb4:	4402      	add	r2, r0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d100      	bne.n	8004bbe <memset+0xa>
 8004bbc:	4770      	bx	lr
 8004bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc2:	e7f9      	b.n	8004bb8 <memset+0x4>

08004bc4 <_close_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4d06      	ldr	r5, [pc, #24]	; (8004be0 <_close_r+0x1c>)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4604      	mov	r4, r0
 8004bcc:	4608      	mov	r0, r1
 8004bce:	602b      	str	r3, [r5, #0]
 8004bd0:	f7fc f9ff 	bl	8000fd2 <_close>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d102      	bne.n	8004bde <_close_r+0x1a>
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	b103      	cbz	r3, 8004bde <_close_r+0x1a>
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	20000344 	.word	0x20000344

08004be4 <_lseek_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4d07      	ldr	r5, [pc, #28]	; (8004c04 <_lseek_r+0x20>)
 8004be8:	4604      	mov	r4, r0
 8004bea:	4608      	mov	r0, r1
 8004bec:	4611      	mov	r1, r2
 8004bee:	2200      	movs	r2, #0
 8004bf0:	602a      	str	r2, [r5, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f7fc fa14 	bl	8001020 <_lseek>
 8004bf8:	1c43      	adds	r3, r0, #1
 8004bfa:	d102      	bne.n	8004c02 <_lseek_r+0x1e>
 8004bfc:	682b      	ldr	r3, [r5, #0]
 8004bfe:	b103      	cbz	r3, 8004c02 <_lseek_r+0x1e>
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	bd38      	pop	{r3, r4, r5, pc}
 8004c04:	20000344 	.word	0x20000344

08004c08 <_read_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4d07      	ldr	r5, [pc, #28]	; (8004c28 <_read_r+0x20>)
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	4608      	mov	r0, r1
 8004c10:	4611      	mov	r1, r2
 8004c12:	2200      	movs	r2, #0
 8004c14:	602a      	str	r2, [r5, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f7fc f9a2 	bl	8000f60 <_read>
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d102      	bne.n	8004c26 <_read_r+0x1e>
 8004c20:	682b      	ldr	r3, [r5, #0]
 8004c22:	b103      	cbz	r3, 8004c26 <_read_r+0x1e>
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
 8004c28:	20000344 	.word	0x20000344

08004c2c <_write_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4d07      	ldr	r5, [pc, #28]	; (8004c4c <_write_r+0x20>)
 8004c30:	4604      	mov	r4, r0
 8004c32:	4608      	mov	r0, r1
 8004c34:	4611      	mov	r1, r2
 8004c36:	2200      	movs	r2, #0
 8004c38:	602a      	str	r2, [r5, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f7fc f9ad 	bl	8000f9a <_write>
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d102      	bne.n	8004c4a <_write_r+0x1e>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	b103      	cbz	r3, 8004c4a <_write_r+0x1e>
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	bd38      	pop	{r3, r4, r5, pc}
 8004c4c:	20000344 	.word	0x20000344

08004c50 <__errno>:
 8004c50:	4b01      	ldr	r3, [pc, #4]	; (8004c58 <__errno+0x8>)
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	20000088 	.word	0x20000088

08004c5c <__libc_init_array>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	4d0d      	ldr	r5, [pc, #52]	; (8004c94 <__libc_init_array+0x38>)
 8004c60:	4c0d      	ldr	r4, [pc, #52]	; (8004c98 <__libc_init_array+0x3c>)
 8004c62:	1b64      	subs	r4, r4, r5
 8004c64:	10a4      	asrs	r4, r4, #2
 8004c66:	2600      	movs	r6, #0
 8004c68:	42a6      	cmp	r6, r4
 8004c6a:	d109      	bne.n	8004c80 <__libc_init_array+0x24>
 8004c6c:	4d0b      	ldr	r5, [pc, #44]	; (8004c9c <__libc_init_array+0x40>)
 8004c6e:	4c0c      	ldr	r4, [pc, #48]	; (8004ca0 <__libc_init_array+0x44>)
 8004c70:	f000 fd5c 	bl	800572c <_init>
 8004c74:	1b64      	subs	r4, r4, r5
 8004c76:	10a4      	asrs	r4, r4, #2
 8004c78:	2600      	movs	r6, #0
 8004c7a:	42a6      	cmp	r6, r4
 8004c7c:	d105      	bne.n	8004c8a <__libc_init_array+0x2e>
 8004c7e:	bd70      	pop	{r4, r5, r6, pc}
 8004c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c84:	4798      	blx	r3
 8004c86:	3601      	adds	r6, #1
 8004c88:	e7ee      	b.n	8004c68 <__libc_init_array+0xc>
 8004c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c8e:	4798      	blx	r3
 8004c90:	3601      	adds	r6, #1
 8004c92:	e7f2      	b.n	8004c7a <__libc_init_array+0x1e>
 8004c94:	08005888 	.word	0x08005888
 8004c98:	08005888 	.word	0x08005888
 8004c9c:	08005888 	.word	0x08005888
 8004ca0:	0800588c 	.word	0x0800588c

08004ca4 <__retarget_lock_acquire_recursive>:
 8004ca4:	4770      	bx	lr

08004ca6 <__retarget_lock_release_recursive>:
 8004ca6:	4770      	bx	lr

08004ca8 <_free_r>:
 8004ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004caa:	2900      	cmp	r1, #0
 8004cac:	d044      	beq.n	8004d38 <_free_r+0x90>
 8004cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cb2:	9001      	str	r0, [sp, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f1a1 0404 	sub.w	r4, r1, #4
 8004cba:	bfb8      	it	lt
 8004cbc:	18e4      	addlt	r4, r4, r3
 8004cbe:	f000 f8df 	bl	8004e80 <__malloc_lock>
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <_free_r+0x94>)
 8004cc4:	9801      	ldr	r0, [sp, #4]
 8004cc6:	6813      	ldr	r3, [r2, #0]
 8004cc8:	b933      	cbnz	r3, 8004cd8 <_free_r+0x30>
 8004cca:	6063      	str	r3, [r4, #4]
 8004ccc:	6014      	str	r4, [r2, #0]
 8004cce:	b003      	add	sp, #12
 8004cd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cd4:	f000 b8da 	b.w	8004e8c <__malloc_unlock>
 8004cd8:	42a3      	cmp	r3, r4
 8004cda:	d908      	bls.n	8004cee <_free_r+0x46>
 8004cdc:	6825      	ldr	r5, [r4, #0]
 8004cde:	1961      	adds	r1, r4, r5
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	bf01      	itttt	eq
 8004ce4:	6819      	ldreq	r1, [r3, #0]
 8004ce6:	685b      	ldreq	r3, [r3, #4]
 8004ce8:	1949      	addeq	r1, r1, r5
 8004cea:	6021      	streq	r1, [r4, #0]
 8004cec:	e7ed      	b.n	8004cca <_free_r+0x22>
 8004cee:	461a      	mov	r2, r3
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	b10b      	cbz	r3, 8004cf8 <_free_r+0x50>
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	d9fa      	bls.n	8004cee <_free_r+0x46>
 8004cf8:	6811      	ldr	r1, [r2, #0]
 8004cfa:	1855      	adds	r5, r2, r1
 8004cfc:	42a5      	cmp	r5, r4
 8004cfe:	d10b      	bne.n	8004d18 <_free_r+0x70>
 8004d00:	6824      	ldr	r4, [r4, #0]
 8004d02:	4421      	add	r1, r4
 8004d04:	1854      	adds	r4, r2, r1
 8004d06:	42a3      	cmp	r3, r4
 8004d08:	6011      	str	r1, [r2, #0]
 8004d0a:	d1e0      	bne.n	8004cce <_free_r+0x26>
 8004d0c:	681c      	ldr	r4, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	6053      	str	r3, [r2, #4]
 8004d12:	440c      	add	r4, r1
 8004d14:	6014      	str	r4, [r2, #0]
 8004d16:	e7da      	b.n	8004cce <_free_r+0x26>
 8004d18:	d902      	bls.n	8004d20 <_free_r+0x78>
 8004d1a:	230c      	movs	r3, #12
 8004d1c:	6003      	str	r3, [r0, #0]
 8004d1e:	e7d6      	b.n	8004cce <_free_r+0x26>
 8004d20:	6825      	ldr	r5, [r4, #0]
 8004d22:	1961      	adds	r1, r4, r5
 8004d24:	428b      	cmp	r3, r1
 8004d26:	bf04      	itt	eq
 8004d28:	6819      	ldreq	r1, [r3, #0]
 8004d2a:	685b      	ldreq	r3, [r3, #4]
 8004d2c:	6063      	str	r3, [r4, #4]
 8004d2e:	bf04      	itt	eq
 8004d30:	1949      	addeq	r1, r1, r5
 8004d32:	6021      	streq	r1, [r4, #0]
 8004d34:	6054      	str	r4, [r2, #4]
 8004d36:	e7ca      	b.n	8004cce <_free_r+0x26>
 8004d38:	b003      	add	sp, #12
 8004d3a:	bd30      	pop	{r4, r5, pc}
 8004d3c:	2000034c 	.word	0x2000034c

08004d40 <sbrk_aligned>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	4e0e      	ldr	r6, [pc, #56]	; (8004d7c <sbrk_aligned+0x3c>)
 8004d44:	460c      	mov	r4, r1
 8004d46:	6831      	ldr	r1, [r6, #0]
 8004d48:	4605      	mov	r5, r0
 8004d4a:	b911      	cbnz	r1, 8004d52 <sbrk_aligned+0x12>
 8004d4c:	f000 fcde 	bl	800570c <_sbrk_r>
 8004d50:	6030      	str	r0, [r6, #0]
 8004d52:	4621      	mov	r1, r4
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 fcd9 	bl	800570c <_sbrk_r>
 8004d5a:	1c43      	adds	r3, r0, #1
 8004d5c:	d00a      	beq.n	8004d74 <sbrk_aligned+0x34>
 8004d5e:	1cc4      	adds	r4, r0, #3
 8004d60:	f024 0403 	bic.w	r4, r4, #3
 8004d64:	42a0      	cmp	r0, r4
 8004d66:	d007      	beq.n	8004d78 <sbrk_aligned+0x38>
 8004d68:	1a21      	subs	r1, r4, r0
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f000 fcce 	bl	800570c <_sbrk_r>
 8004d70:	3001      	adds	r0, #1
 8004d72:	d101      	bne.n	8004d78 <sbrk_aligned+0x38>
 8004d74:	f04f 34ff 	mov.w	r4, #4294967295
 8004d78:	4620      	mov	r0, r4
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	20000350 	.word	0x20000350

08004d80 <_malloc_r>:
 8004d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d84:	1ccd      	adds	r5, r1, #3
 8004d86:	f025 0503 	bic.w	r5, r5, #3
 8004d8a:	3508      	adds	r5, #8
 8004d8c:	2d0c      	cmp	r5, #12
 8004d8e:	bf38      	it	cc
 8004d90:	250c      	movcc	r5, #12
 8004d92:	2d00      	cmp	r5, #0
 8004d94:	4607      	mov	r7, r0
 8004d96:	db01      	blt.n	8004d9c <_malloc_r+0x1c>
 8004d98:	42a9      	cmp	r1, r5
 8004d9a:	d905      	bls.n	8004da8 <_malloc_r+0x28>
 8004d9c:	230c      	movs	r3, #12
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	2600      	movs	r6, #0
 8004da2:	4630      	mov	r0, r6
 8004da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004da8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e7c <_malloc_r+0xfc>
 8004dac:	f000 f868 	bl	8004e80 <__malloc_lock>
 8004db0:	f8d8 3000 	ldr.w	r3, [r8]
 8004db4:	461c      	mov	r4, r3
 8004db6:	bb5c      	cbnz	r4, 8004e10 <_malloc_r+0x90>
 8004db8:	4629      	mov	r1, r5
 8004dba:	4638      	mov	r0, r7
 8004dbc:	f7ff ffc0 	bl	8004d40 <sbrk_aligned>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	d155      	bne.n	8004e72 <_malloc_r+0xf2>
 8004dc6:	f8d8 4000 	ldr.w	r4, [r8]
 8004dca:	4626      	mov	r6, r4
 8004dcc:	2e00      	cmp	r6, #0
 8004dce:	d145      	bne.n	8004e5c <_malloc_r+0xdc>
 8004dd0:	2c00      	cmp	r4, #0
 8004dd2:	d048      	beq.n	8004e66 <_malloc_r+0xe6>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4638      	mov	r0, r7
 8004dda:	eb04 0903 	add.w	r9, r4, r3
 8004dde:	f000 fc95 	bl	800570c <_sbrk_r>
 8004de2:	4581      	cmp	r9, r0
 8004de4:	d13f      	bne.n	8004e66 <_malloc_r+0xe6>
 8004de6:	6821      	ldr	r1, [r4, #0]
 8004de8:	1a6d      	subs	r5, r5, r1
 8004dea:	4629      	mov	r1, r5
 8004dec:	4638      	mov	r0, r7
 8004dee:	f7ff ffa7 	bl	8004d40 <sbrk_aligned>
 8004df2:	3001      	adds	r0, #1
 8004df4:	d037      	beq.n	8004e66 <_malloc_r+0xe6>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	442b      	add	r3, r5
 8004dfa:	6023      	str	r3, [r4, #0]
 8004dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d038      	beq.n	8004e76 <_malloc_r+0xf6>
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	42a2      	cmp	r2, r4
 8004e08:	d12b      	bne.n	8004e62 <_malloc_r+0xe2>
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	e00f      	b.n	8004e30 <_malloc_r+0xb0>
 8004e10:	6822      	ldr	r2, [r4, #0]
 8004e12:	1b52      	subs	r2, r2, r5
 8004e14:	d41f      	bmi.n	8004e56 <_malloc_r+0xd6>
 8004e16:	2a0b      	cmp	r2, #11
 8004e18:	d917      	bls.n	8004e4a <_malloc_r+0xca>
 8004e1a:	1961      	adds	r1, r4, r5
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	6025      	str	r5, [r4, #0]
 8004e20:	bf18      	it	ne
 8004e22:	6059      	strne	r1, [r3, #4]
 8004e24:	6863      	ldr	r3, [r4, #4]
 8004e26:	bf08      	it	eq
 8004e28:	f8c8 1000 	streq.w	r1, [r8]
 8004e2c:	5162      	str	r2, [r4, r5]
 8004e2e:	604b      	str	r3, [r1, #4]
 8004e30:	4638      	mov	r0, r7
 8004e32:	f104 060b 	add.w	r6, r4, #11
 8004e36:	f000 f829 	bl	8004e8c <__malloc_unlock>
 8004e3a:	f026 0607 	bic.w	r6, r6, #7
 8004e3e:	1d23      	adds	r3, r4, #4
 8004e40:	1af2      	subs	r2, r6, r3
 8004e42:	d0ae      	beq.n	8004da2 <_malloc_r+0x22>
 8004e44:	1b9b      	subs	r3, r3, r6
 8004e46:	50a3      	str	r3, [r4, r2]
 8004e48:	e7ab      	b.n	8004da2 <_malloc_r+0x22>
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	6862      	ldr	r2, [r4, #4]
 8004e4e:	d1dd      	bne.n	8004e0c <_malloc_r+0x8c>
 8004e50:	f8c8 2000 	str.w	r2, [r8]
 8004e54:	e7ec      	b.n	8004e30 <_malloc_r+0xb0>
 8004e56:	4623      	mov	r3, r4
 8004e58:	6864      	ldr	r4, [r4, #4]
 8004e5a:	e7ac      	b.n	8004db6 <_malloc_r+0x36>
 8004e5c:	4634      	mov	r4, r6
 8004e5e:	6876      	ldr	r6, [r6, #4]
 8004e60:	e7b4      	b.n	8004dcc <_malloc_r+0x4c>
 8004e62:	4613      	mov	r3, r2
 8004e64:	e7cc      	b.n	8004e00 <_malloc_r+0x80>
 8004e66:	230c      	movs	r3, #12
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f000 f80e 	bl	8004e8c <__malloc_unlock>
 8004e70:	e797      	b.n	8004da2 <_malloc_r+0x22>
 8004e72:	6025      	str	r5, [r4, #0]
 8004e74:	e7dc      	b.n	8004e30 <_malloc_r+0xb0>
 8004e76:	605b      	str	r3, [r3, #4]
 8004e78:	deff      	udf	#255	; 0xff
 8004e7a:	bf00      	nop
 8004e7c:	2000034c 	.word	0x2000034c

08004e80 <__malloc_lock>:
 8004e80:	4801      	ldr	r0, [pc, #4]	; (8004e88 <__malloc_lock+0x8>)
 8004e82:	f7ff bf0f 	b.w	8004ca4 <__retarget_lock_acquire_recursive>
 8004e86:	bf00      	nop
 8004e88:	20000348 	.word	0x20000348

08004e8c <__malloc_unlock>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	; (8004e94 <__malloc_unlock+0x8>)
 8004e8e:	f7ff bf0a 	b.w	8004ca6 <__retarget_lock_release_recursive>
 8004e92:	bf00      	nop
 8004e94:	20000348 	.word	0x20000348

08004e98 <__sfputc_r>:
 8004e98:	6893      	ldr	r3, [r2, #8]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	b410      	push	{r4}
 8004ea0:	6093      	str	r3, [r2, #8]
 8004ea2:	da08      	bge.n	8004eb6 <__sfputc_r+0x1e>
 8004ea4:	6994      	ldr	r4, [r2, #24]
 8004ea6:	42a3      	cmp	r3, r4
 8004ea8:	db01      	blt.n	8004eae <__sfputc_r+0x16>
 8004eaa:	290a      	cmp	r1, #10
 8004eac:	d103      	bne.n	8004eb6 <__sfputc_r+0x1e>
 8004eae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eb2:	f7ff bdea 	b.w	8004a8a <__swbuf_r>
 8004eb6:	6813      	ldr	r3, [r2, #0]
 8004eb8:	1c58      	adds	r0, r3, #1
 8004eba:	6010      	str	r0, [r2, #0]
 8004ebc:	7019      	strb	r1, [r3, #0]
 8004ebe:	4608      	mov	r0, r1
 8004ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <__sfputs_r>:
 8004ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec8:	4606      	mov	r6, r0
 8004eca:	460f      	mov	r7, r1
 8004ecc:	4614      	mov	r4, r2
 8004ece:	18d5      	adds	r5, r2, r3
 8004ed0:	42ac      	cmp	r4, r5
 8004ed2:	d101      	bne.n	8004ed8 <__sfputs_r+0x12>
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	e007      	b.n	8004ee8 <__sfputs_r+0x22>
 8004ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004edc:	463a      	mov	r2, r7
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f7ff ffda 	bl	8004e98 <__sfputc_r>
 8004ee4:	1c43      	adds	r3, r0, #1
 8004ee6:	d1f3      	bne.n	8004ed0 <__sfputs_r+0xa>
 8004ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004eec <_vfiprintf_r>:
 8004eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef0:	460d      	mov	r5, r1
 8004ef2:	b09d      	sub	sp, #116	; 0x74
 8004ef4:	4614      	mov	r4, r2
 8004ef6:	4698      	mov	r8, r3
 8004ef8:	4606      	mov	r6, r0
 8004efa:	b118      	cbz	r0, 8004f04 <_vfiprintf_r+0x18>
 8004efc:	6a03      	ldr	r3, [r0, #32]
 8004efe:	b90b      	cbnz	r3, 8004f04 <_vfiprintf_r+0x18>
 8004f00:	f7ff fcd4 	bl	80048ac <__sinit>
 8004f04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f06:	07d9      	lsls	r1, r3, #31
 8004f08:	d405      	bmi.n	8004f16 <_vfiprintf_r+0x2a>
 8004f0a:	89ab      	ldrh	r3, [r5, #12]
 8004f0c:	059a      	lsls	r2, r3, #22
 8004f0e:	d402      	bmi.n	8004f16 <_vfiprintf_r+0x2a>
 8004f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f12:	f7ff fec7 	bl	8004ca4 <__retarget_lock_acquire_recursive>
 8004f16:	89ab      	ldrh	r3, [r5, #12]
 8004f18:	071b      	lsls	r3, r3, #28
 8004f1a:	d501      	bpl.n	8004f20 <_vfiprintf_r+0x34>
 8004f1c:	692b      	ldr	r3, [r5, #16]
 8004f1e:	b99b      	cbnz	r3, 8004f48 <_vfiprintf_r+0x5c>
 8004f20:	4629      	mov	r1, r5
 8004f22:	4630      	mov	r0, r6
 8004f24:	f7ff fdee 	bl	8004b04 <__swsetup_r>
 8004f28:	b170      	cbz	r0, 8004f48 <_vfiprintf_r+0x5c>
 8004f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f2c:	07dc      	lsls	r4, r3, #31
 8004f2e:	d504      	bpl.n	8004f3a <_vfiprintf_r+0x4e>
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295
 8004f34:	b01d      	add	sp, #116	; 0x74
 8004f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3a:	89ab      	ldrh	r3, [r5, #12]
 8004f3c:	0598      	lsls	r0, r3, #22
 8004f3e:	d4f7      	bmi.n	8004f30 <_vfiprintf_r+0x44>
 8004f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f42:	f7ff feb0 	bl	8004ca6 <__retarget_lock_release_recursive>
 8004f46:	e7f3      	b.n	8004f30 <_vfiprintf_r+0x44>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f52:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f56:	2330      	movs	r3, #48	; 0x30
 8004f58:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800510c <_vfiprintf_r+0x220>
 8004f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f60:	f04f 0901 	mov.w	r9, #1
 8004f64:	4623      	mov	r3, r4
 8004f66:	469a      	mov	sl, r3
 8004f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f6c:	b10a      	cbz	r2, 8004f72 <_vfiprintf_r+0x86>
 8004f6e:	2a25      	cmp	r2, #37	; 0x25
 8004f70:	d1f9      	bne.n	8004f66 <_vfiprintf_r+0x7a>
 8004f72:	ebba 0b04 	subs.w	fp, sl, r4
 8004f76:	d00b      	beq.n	8004f90 <_vfiprintf_r+0xa4>
 8004f78:	465b      	mov	r3, fp
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f7ff ffa1 	bl	8004ec6 <__sfputs_r>
 8004f84:	3001      	adds	r0, #1
 8004f86:	f000 80a9 	beq.w	80050dc <_vfiprintf_r+0x1f0>
 8004f8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f8c:	445a      	add	r2, fp
 8004f8e:	9209      	str	r2, [sp, #36]	; 0x24
 8004f90:	f89a 3000 	ldrb.w	r3, [sl]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80a1 	beq.w	80050dc <_vfiprintf_r+0x1f0>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa4:	f10a 0a01 	add.w	sl, sl, #1
 8004fa8:	9304      	str	r3, [sp, #16]
 8004faa:	9307      	str	r3, [sp, #28]
 8004fac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fb0:	931a      	str	r3, [sp, #104]	; 0x68
 8004fb2:	4654      	mov	r4, sl
 8004fb4:	2205      	movs	r2, #5
 8004fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fba:	4854      	ldr	r0, [pc, #336]	; (800510c <_vfiprintf_r+0x220>)
 8004fbc:	f7fb f928 	bl	8000210 <memchr>
 8004fc0:	9a04      	ldr	r2, [sp, #16]
 8004fc2:	b9d8      	cbnz	r0, 8004ffc <_vfiprintf_r+0x110>
 8004fc4:	06d1      	lsls	r1, r2, #27
 8004fc6:	bf44      	itt	mi
 8004fc8:	2320      	movmi	r3, #32
 8004fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fce:	0713      	lsls	r3, r2, #28
 8004fd0:	bf44      	itt	mi
 8004fd2:	232b      	movmi	r3, #43	; 0x2b
 8004fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8004fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fde:	d015      	beq.n	800500c <_vfiprintf_r+0x120>
 8004fe0:	9a07      	ldr	r2, [sp, #28]
 8004fe2:	4654      	mov	r4, sl
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f04f 0c0a 	mov.w	ip, #10
 8004fea:	4621      	mov	r1, r4
 8004fec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff0:	3b30      	subs	r3, #48	; 0x30
 8004ff2:	2b09      	cmp	r3, #9
 8004ff4:	d94d      	bls.n	8005092 <_vfiprintf_r+0x1a6>
 8004ff6:	b1b0      	cbz	r0, 8005026 <_vfiprintf_r+0x13a>
 8004ff8:	9207      	str	r2, [sp, #28]
 8004ffa:	e014      	b.n	8005026 <_vfiprintf_r+0x13a>
 8004ffc:	eba0 0308 	sub.w	r3, r0, r8
 8005000:	fa09 f303 	lsl.w	r3, r9, r3
 8005004:	4313      	orrs	r3, r2
 8005006:	9304      	str	r3, [sp, #16]
 8005008:	46a2      	mov	sl, r4
 800500a:	e7d2      	b.n	8004fb2 <_vfiprintf_r+0xc6>
 800500c:	9b03      	ldr	r3, [sp, #12]
 800500e:	1d19      	adds	r1, r3, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	9103      	str	r1, [sp, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	bfbb      	ittet	lt
 8005018:	425b      	neglt	r3, r3
 800501a:	f042 0202 	orrlt.w	r2, r2, #2
 800501e:	9307      	strge	r3, [sp, #28]
 8005020:	9307      	strlt	r3, [sp, #28]
 8005022:	bfb8      	it	lt
 8005024:	9204      	strlt	r2, [sp, #16]
 8005026:	7823      	ldrb	r3, [r4, #0]
 8005028:	2b2e      	cmp	r3, #46	; 0x2e
 800502a:	d10c      	bne.n	8005046 <_vfiprintf_r+0x15a>
 800502c:	7863      	ldrb	r3, [r4, #1]
 800502e:	2b2a      	cmp	r3, #42	; 0x2a
 8005030:	d134      	bne.n	800509c <_vfiprintf_r+0x1b0>
 8005032:	9b03      	ldr	r3, [sp, #12]
 8005034:	1d1a      	adds	r2, r3, #4
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	9203      	str	r2, [sp, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	bfb8      	it	lt
 800503e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005042:	3402      	adds	r4, #2
 8005044:	9305      	str	r3, [sp, #20]
 8005046:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800511c <_vfiprintf_r+0x230>
 800504a:	7821      	ldrb	r1, [r4, #0]
 800504c:	2203      	movs	r2, #3
 800504e:	4650      	mov	r0, sl
 8005050:	f7fb f8de 	bl	8000210 <memchr>
 8005054:	b138      	cbz	r0, 8005066 <_vfiprintf_r+0x17a>
 8005056:	9b04      	ldr	r3, [sp, #16]
 8005058:	eba0 000a 	sub.w	r0, r0, sl
 800505c:	2240      	movs	r2, #64	; 0x40
 800505e:	4082      	lsls	r2, r0
 8005060:	4313      	orrs	r3, r2
 8005062:	3401      	adds	r4, #1
 8005064:	9304      	str	r3, [sp, #16]
 8005066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506a:	4829      	ldr	r0, [pc, #164]	; (8005110 <_vfiprintf_r+0x224>)
 800506c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005070:	2206      	movs	r2, #6
 8005072:	f7fb f8cd 	bl	8000210 <memchr>
 8005076:	2800      	cmp	r0, #0
 8005078:	d03f      	beq.n	80050fa <_vfiprintf_r+0x20e>
 800507a:	4b26      	ldr	r3, [pc, #152]	; (8005114 <_vfiprintf_r+0x228>)
 800507c:	bb1b      	cbnz	r3, 80050c6 <_vfiprintf_r+0x1da>
 800507e:	9b03      	ldr	r3, [sp, #12]
 8005080:	3307      	adds	r3, #7
 8005082:	f023 0307 	bic.w	r3, r3, #7
 8005086:	3308      	adds	r3, #8
 8005088:	9303      	str	r3, [sp, #12]
 800508a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508c:	443b      	add	r3, r7
 800508e:	9309      	str	r3, [sp, #36]	; 0x24
 8005090:	e768      	b.n	8004f64 <_vfiprintf_r+0x78>
 8005092:	fb0c 3202 	mla	r2, ip, r2, r3
 8005096:	460c      	mov	r4, r1
 8005098:	2001      	movs	r0, #1
 800509a:	e7a6      	b.n	8004fea <_vfiprintf_r+0xfe>
 800509c:	2300      	movs	r3, #0
 800509e:	3401      	adds	r4, #1
 80050a0:	9305      	str	r3, [sp, #20]
 80050a2:	4619      	mov	r1, r3
 80050a4:	f04f 0c0a 	mov.w	ip, #10
 80050a8:	4620      	mov	r0, r4
 80050aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050ae:	3a30      	subs	r2, #48	; 0x30
 80050b0:	2a09      	cmp	r2, #9
 80050b2:	d903      	bls.n	80050bc <_vfiprintf_r+0x1d0>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0c6      	beq.n	8005046 <_vfiprintf_r+0x15a>
 80050b8:	9105      	str	r1, [sp, #20]
 80050ba:	e7c4      	b.n	8005046 <_vfiprintf_r+0x15a>
 80050bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c0:	4604      	mov	r4, r0
 80050c2:	2301      	movs	r3, #1
 80050c4:	e7f0      	b.n	80050a8 <_vfiprintf_r+0x1bc>
 80050c6:	ab03      	add	r3, sp, #12
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	462a      	mov	r2, r5
 80050cc:	4b12      	ldr	r3, [pc, #72]	; (8005118 <_vfiprintf_r+0x22c>)
 80050ce:	a904      	add	r1, sp, #16
 80050d0:	4630      	mov	r0, r6
 80050d2:	f3af 8000 	nop.w
 80050d6:	4607      	mov	r7, r0
 80050d8:	1c78      	adds	r0, r7, #1
 80050da:	d1d6      	bne.n	800508a <_vfiprintf_r+0x19e>
 80050dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050de:	07d9      	lsls	r1, r3, #31
 80050e0:	d405      	bmi.n	80050ee <_vfiprintf_r+0x202>
 80050e2:	89ab      	ldrh	r3, [r5, #12]
 80050e4:	059a      	lsls	r2, r3, #22
 80050e6:	d402      	bmi.n	80050ee <_vfiprintf_r+0x202>
 80050e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050ea:	f7ff fddc 	bl	8004ca6 <__retarget_lock_release_recursive>
 80050ee:	89ab      	ldrh	r3, [r5, #12]
 80050f0:	065b      	lsls	r3, r3, #25
 80050f2:	f53f af1d 	bmi.w	8004f30 <_vfiprintf_r+0x44>
 80050f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050f8:	e71c      	b.n	8004f34 <_vfiprintf_r+0x48>
 80050fa:	ab03      	add	r3, sp, #12
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	462a      	mov	r2, r5
 8005100:	4b05      	ldr	r3, [pc, #20]	; (8005118 <_vfiprintf_r+0x22c>)
 8005102:	a904      	add	r1, sp, #16
 8005104:	4630      	mov	r0, r6
 8005106:	f000 f879 	bl	80051fc <_printf_i>
 800510a:	e7e4      	b.n	80050d6 <_vfiprintf_r+0x1ea>
 800510c:	0800584c 	.word	0x0800584c
 8005110:	08005856 	.word	0x08005856
 8005114:	00000000 	.word	0x00000000
 8005118:	08004ec7 	.word	0x08004ec7
 800511c:	08005852 	.word	0x08005852

08005120 <_printf_common>:
 8005120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005124:	4616      	mov	r6, r2
 8005126:	4699      	mov	r9, r3
 8005128:	688a      	ldr	r2, [r1, #8]
 800512a:	690b      	ldr	r3, [r1, #16]
 800512c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005130:	4293      	cmp	r3, r2
 8005132:	bfb8      	it	lt
 8005134:	4613      	movlt	r3, r2
 8005136:	6033      	str	r3, [r6, #0]
 8005138:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800513c:	4607      	mov	r7, r0
 800513e:	460c      	mov	r4, r1
 8005140:	b10a      	cbz	r2, 8005146 <_printf_common+0x26>
 8005142:	3301      	adds	r3, #1
 8005144:	6033      	str	r3, [r6, #0]
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	0699      	lsls	r1, r3, #26
 800514a:	bf42      	ittt	mi
 800514c:	6833      	ldrmi	r3, [r6, #0]
 800514e:	3302      	addmi	r3, #2
 8005150:	6033      	strmi	r3, [r6, #0]
 8005152:	6825      	ldr	r5, [r4, #0]
 8005154:	f015 0506 	ands.w	r5, r5, #6
 8005158:	d106      	bne.n	8005168 <_printf_common+0x48>
 800515a:	f104 0a19 	add.w	sl, r4, #25
 800515e:	68e3      	ldr	r3, [r4, #12]
 8005160:	6832      	ldr	r2, [r6, #0]
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	42ab      	cmp	r3, r5
 8005166:	dc26      	bgt.n	80051b6 <_printf_common+0x96>
 8005168:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800516c:	1e13      	subs	r3, r2, #0
 800516e:	6822      	ldr	r2, [r4, #0]
 8005170:	bf18      	it	ne
 8005172:	2301      	movne	r3, #1
 8005174:	0692      	lsls	r2, r2, #26
 8005176:	d42b      	bmi.n	80051d0 <_printf_common+0xb0>
 8005178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800517c:	4649      	mov	r1, r9
 800517e:	4638      	mov	r0, r7
 8005180:	47c0      	blx	r8
 8005182:	3001      	adds	r0, #1
 8005184:	d01e      	beq.n	80051c4 <_printf_common+0xa4>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	6922      	ldr	r2, [r4, #16]
 800518a:	f003 0306 	and.w	r3, r3, #6
 800518e:	2b04      	cmp	r3, #4
 8005190:	bf02      	ittt	eq
 8005192:	68e5      	ldreq	r5, [r4, #12]
 8005194:	6833      	ldreq	r3, [r6, #0]
 8005196:	1aed      	subeq	r5, r5, r3
 8005198:	68a3      	ldr	r3, [r4, #8]
 800519a:	bf0c      	ite	eq
 800519c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a0:	2500      	movne	r5, #0
 80051a2:	4293      	cmp	r3, r2
 80051a4:	bfc4      	itt	gt
 80051a6:	1a9b      	subgt	r3, r3, r2
 80051a8:	18ed      	addgt	r5, r5, r3
 80051aa:	2600      	movs	r6, #0
 80051ac:	341a      	adds	r4, #26
 80051ae:	42b5      	cmp	r5, r6
 80051b0:	d11a      	bne.n	80051e8 <_printf_common+0xc8>
 80051b2:	2000      	movs	r0, #0
 80051b4:	e008      	b.n	80051c8 <_printf_common+0xa8>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4652      	mov	r2, sl
 80051ba:	4649      	mov	r1, r9
 80051bc:	4638      	mov	r0, r7
 80051be:	47c0      	blx	r8
 80051c0:	3001      	adds	r0, #1
 80051c2:	d103      	bne.n	80051cc <_printf_common+0xac>
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295
 80051c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051cc:	3501      	adds	r5, #1
 80051ce:	e7c6      	b.n	800515e <_printf_common+0x3e>
 80051d0:	18e1      	adds	r1, r4, r3
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	2030      	movs	r0, #48	; 0x30
 80051d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051da:	4422      	add	r2, r4
 80051dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051e4:	3302      	adds	r3, #2
 80051e6:	e7c7      	b.n	8005178 <_printf_common+0x58>
 80051e8:	2301      	movs	r3, #1
 80051ea:	4622      	mov	r2, r4
 80051ec:	4649      	mov	r1, r9
 80051ee:	4638      	mov	r0, r7
 80051f0:	47c0      	blx	r8
 80051f2:	3001      	adds	r0, #1
 80051f4:	d0e6      	beq.n	80051c4 <_printf_common+0xa4>
 80051f6:	3601      	adds	r6, #1
 80051f8:	e7d9      	b.n	80051ae <_printf_common+0x8e>
	...

080051fc <_printf_i>:
 80051fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005200:	7e0f      	ldrb	r7, [r1, #24]
 8005202:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005204:	2f78      	cmp	r7, #120	; 0x78
 8005206:	4691      	mov	r9, r2
 8005208:	4680      	mov	r8, r0
 800520a:	460c      	mov	r4, r1
 800520c:	469a      	mov	sl, r3
 800520e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005212:	d807      	bhi.n	8005224 <_printf_i+0x28>
 8005214:	2f62      	cmp	r7, #98	; 0x62
 8005216:	d80a      	bhi.n	800522e <_printf_i+0x32>
 8005218:	2f00      	cmp	r7, #0
 800521a:	f000 80d4 	beq.w	80053c6 <_printf_i+0x1ca>
 800521e:	2f58      	cmp	r7, #88	; 0x58
 8005220:	f000 80c0 	beq.w	80053a4 <_printf_i+0x1a8>
 8005224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005228:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800522c:	e03a      	b.n	80052a4 <_printf_i+0xa8>
 800522e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005232:	2b15      	cmp	r3, #21
 8005234:	d8f6      	bhi.n	8005224 <_printf_i+0x28>
 8005236:	a101      	add	r1, pc, #4	; (adr r1, 800523c <_printf_i+0x40>)
 8005238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800523c:	08005295 	.word	0x08005295
 8005240:	080052a9 	.word	0x080052a9
 8005244:	08005225 	.word	0x08005225
 8005248:	08005225 	.word	0x08005225
 800524c:	08005225 	.word	0x08005225
 8005250:	08005225 	.word	0x08005225
 8005254:	080052a9 	.word	0x080052a9
 8005258:	08005225 	.word	0x08005225
 800525c:	08005225 	.word	0x08005225
 8005260:	08005225 	.word	0x08005225
 8005264:	08005225 	.word	0x08005225
 8005268:	080053ad 	.word	0x080053ad
 800526c:	080052d5 	.word	0x080052d5
 8005270:	08005367 	.word	0x08005367
 8005274:	08005225 	.word	0x08005225
 8005278:	08005225 	.word	0x08005225
 800527c:	080053cf 	.word	0x080053cf
 8005280:	08005225 	.word	0x08005225
 8005284:	080052d5 	.word	0x080052d5
 8005288:	08005225 	.word	0x08005225
 800528c:	08005225 	.word	0x08005225
 8005290:	0800536f 	.word	0x0800536f
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	1d1a      	adds	r2, r3, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	602a      	str	r2, [r5, #0]
 800529c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052a4:	2301      	movs	r3, #1
 80052a6:	e09f      	b.n	80053e8 <_printf_i+0x1ec>
 80052a8:	6820      	ldr	r0, [r4, #0]
 80052aa:	682b      	ldr	r3, [r5, #0]
 80052ac:	0607      	lsls	r7, r0, #24
 80052ae:	f103 0104 	add.w	r1, r3, #4
 80052b2:	6029      	str	r1, [r5, #0]
 80052b4:	d501      	bpl.n	80052ba <_printf_i+0xbe>
 80052b6:	681e      	ldr	r6, [r3, #0]
 80052b8:	e003      	b.n	80052c2 <_printf_i+0xc6>
 80052ba:	0646      	lsls	r6, r0, #25
 80052bc:	d5fb      	bpl.n	80052b6 <_printf_i+0xba>
 80052be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052c2:	2e00      	cmp	r6, #0
 80052c4:	da03      	bge.n	80052ce <_printf_i+0xd2>
 80052c6:	232d      	movs	r3, #45	; 0x2d
 80052c8:	4276      	negs	r6, r6
 80052ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ce:	485a      	ldr	r0, [pc, #360]	; (8005438 <_printf_i+0x23c>)
 80052d0:	230a      	movs	r3, #10
 80052d2:	e012      	b.n	80052fa <_printf_i+0xfe>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	6820      	ldr	r0, [r4, #0]
 80052d8:	1d19      	adds	r1, r3, #4
 80052da:	6029      	str	r1, [r5, #0]
 80052dc:	0605      	lsls	r5, r0, #24
 80052de:	d501      	bpl.n	80052e4 <_printf_i+0xe8>
 80052e0:	681e      	ldr	r6, [r3, #0]
 80052e2:	e002      	b.n	80052ea <_printf_i+0xee>
 80052e4:	0641      	lsls	r1, r0, #25
 80052e6:	d5fb      	bpl.n	80052e0 <_printf_i+0xe4>
 80052e8:	881e      	ldrh	r6, [r3, #0]
 80052ea:	4853      	ldr	r0, [pc, #332]	; (8005438 <_printf_i+0x23c>)
 80052ec:	2f6f      	cmp	r7, #111	; 0x6f
 80052ee:	bf0c      	ite	eq
 80052f0:	2308      	moveq	r3, #8
 80052f2:	230a      	movne	r3, #10
 80052f4:	2100      	movs	r1, #0
 80052f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052fa:	6865      	ldr	r5, [r4, #4]
 80052fc:	60a5      	str	r5, [r4, #8]
 80052fe:	2d00      	cmp	r5, #0
 8005300:	bfa2      	ittt	ge
 8005302:	6821      	ldrge	r1, [r4, #0]
 8005304:	f021 0104 	bicge.w	r1, r1, #4
 8005308:	6021      	strge	r1, [r4, #0]
 800530a:	b90e      	cbnz	r6, 8005310 <_printf_i+0x114>
 800530c:	2d00      	cmp	r5, #0
 800530e:	d04b      	beq.n	80053a8 <_printf_i+0x1ac>
 8005310:	4615      	mov	r5, r2
 8005312:	fbb6 f1f3 	udiv	r1, r6, r3
 8005316:	fb03 6711 	mls	r7, r3, r1, r6
 800531a:	5dc7      	ldrb	r7, [r0, r7]
 800531c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005320:	4637      	mov	r7, r6
 8005322:	42bb      	cmp	r3, r7
 8005324:	460e      	mov	r6, r1
 8005326:	d9f4      	bls.n	8005312 <_printf_i+0x116>
 8005328:	2b08      	cmp	r3, #8
 800532a:	d10b      	bne.n	8005344 <_printf_i+0x148>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	07de      	lsls	r6, r3, #31
 8005330:	d508      	bpl.n	8005344 <_printf_i+0x148>
 8005332:	6923      	ldr	r3, [r4, #16]
 8005334:	6861      	ldr	r1, [r4, #4]
 8005336:	4299      	cmp	r1, r3
 8005338:	bfde      	ittt	le
 800533a:	2330      	movle	r3, #48	; 0x30
 800533c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005340:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005344:	1b52      	subs	r2, r2, r5
 8005346:	6122      	str	r2, [r4, #16]
 8005348:	f8cd a000 	str.w	sl, [sp]
 800534c:	464b      	mov	r3, r9
 800534e:	aa03      	add	r2, sp, #12
 8005350:	4621      	mov	r1, r4
 8005352:	4640      	mov	r0, r8
 8005354:	f7ff fee4 	bl	8005120 <_printf_common>
 8005358:	3001      	adds	r0, #1
 800535a:	d14a      	bne.n	80053f2 <_printf_i+0x1f6>
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	b004      	add	sp, #16
 8005362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	f043 0320 	orr.w	r3, r3, #32
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	4833      	ldr	r0, [pc, #204]	; (800543c <_printf_i+0x240>)
 8005370:	2778      	movs	r7, #120	; 0x78
 8005372:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	6829      	ldr	r1, [r5, #0]
 800537a:	061f      	lsls	r7, r3, #24
 800537c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005380:	d402      	bmi.n	8005388 <_printf_i+0x18c>
 8005382:	065f      	lsls	r7, r3, #25
 8005384:	bf48      	it	mi
 8005386:	b2b6      	uxthmi	r6, r6
 8005388:	07df      	lsls	r7, r3, #31
 800538a:	bf48      	it	mi
 800538c:	f043 0320 	orrmi.w	r3, r3, #32
 8005390:	6029      	str	r1, [r5, #0]
 8005392:	bf48      	it	mi
 8005394:	6023      	strmi	r3, [r4, #0]
 8005396:	b91e      	cbnz	r6, 80053a0 <_printf_i+0x1a4>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	f023 0320 	bic.w	r3, r3, #32
 800539e:	6023      	str	r3, [r4, #0]
 80053a0:	2310      	movs	r3, #16
 80053a2:	e7a7      	b.n	80052f4 <_printf_i+0xf8>
 80053a4:	4824      	ldr	r0, [pc, #144]	; (8005438 <_printf_i+0x23c>)
 80053a6:	e7e4      	b.n	8005372 <_printf_i+0x176>
 80053a8:	4615      	mov	r5, r2
 80053aa:	e7bd      	b.n	8005328 <_printf_i+0x12c>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	6826      	ldr	r6, [r4, #0]
 80053b0:	6961      	ldr	r1, [r4, #20]
 80053b2:	1d18      	adds	r0, r3, #4
 80053b4:	6028      	str	r0, [r5, #0]
 80053b6:	0635      	lsls	r5, r6, #24
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	d501      	bpl.n	80053c0 <_printf_i+0x1c4>
 80053bc:	6019      	str	r1, [r3, #0]
 80053be:	e002      	b.n	80053c6 <_printf_i+0x1ca>
 80053c0:	0670      	lsls	r0, r6, #25
 80053c2:	d5fb      	bpl.n	80053bc <_printf_i+0x1c0>
 80053c4:	8019      	strh	r1, [r3, #0]
 80053c6:	2300      	movs	r3, #0
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	4615      	mov	r5, r2
 80053cc:	e7bc      	b.n	8005348 <_printf_i+0x14c>
 80053ce:	682b      	ldr	r3, [r5, #0]
 80053d0:	1d1a      	adds	r2, r3, #4
 80053d2:	602a      	str	r2, [r5, #0]
 80053d4:	681d      	ldr	r5, [r3, #0]
 80053d6:	6862      	ldr	r2, [r4, #4]
 80053d8:	2100      	movs	r1, #0
 80053da:	4628      	mov	r0, r5
 80053dc:	f7fa ff18 	bl	8000210 <memchr>
 80053e0:	b108      	cbz	r0, 80053e6 <_printf_i+0x1ea>
 80053e2:	1b40      	subs	r0, r0, r5
 80053e4:	6060      	str	r0, [r4, #4]
 80053e6:	6863      	ldr	r3, [r4, #4]
 80053e8:	6123      	str	r3, [r4, #16]
 80053ea:	2300      	movs	r3, #0
 80053ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f0:	e7aa      	b.n	8005348 <_printf_i+0x14c>
 80053f2:	6923      	ldr	r3, [r4, #16]
 80053f4:	462a      	mov	r2, r5
 80053f6:	4649      	mov	r1, r9
 80053f8:	4640      	mov	r0, r8
 80053fa:	47d0      	blx	sl
 80053fc:	3001      	adds	r0, #1
 80053fe:	d0ad      	beq.n	800535c <_printf_i+0x160>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	079b      	lsls	r3, r3, #30
 8005404:	d413      	bmi.n	800542e <_printf_i+0x232>
 8005406:	68e0      	ldr	r0, [r4, #12]
 8005408:	9b03      	ldr	r3, [sp, #12]
 800540a:	4298      	cmp	r0, r3
 800540c:	bfb8      	it	lt
 800540e:	4618      	movlt	r0, r3
 8005410:	e7a6      	b.n	8005360 <_printf_i+0x164>
 8005412:	2301      	movs	r3, #1
 8005414:	4632      	mov	r2, r6
 8005416:	4649      	mov	r1, r9
 8005418:	4640      	mov	r0, r8
 800541a:	47d0      	blx	sl
 800541c:	3001      	adds	r0, #1
 800541e:	d09d      	beq.n	800535c <_printf_i+0x160>
 8005420:	3501      	adds	r5, #1
 8005422:	68e3      	ldr	r3, [r4, #12]
 8005424:	9903      	ldr	r1, [sp, #12]
 8005426:	1a5b      	subs	r3, r3, r1
 8005428:	42ab      	cmp	r3, r5
 800542a:	dcf2      	bgt.n	8005412 <_printf_i+0x216>
 800542c:	e7eb      	b.n	8005406 <_printf_i+0x20a>
 800542e:	2500      	movs	r5, #0
 8005430:	f104 0619 	add.w	r6, r4, #25
 8005434:	e7f5      	b.n	8005422 <_printf_i+0x226>
 8005436:	bf00      	nop
 8005438:	0800585d 	.word	0x0800585d
 800543c:	0800586e 	.word	0x0800586e

08005440 <__sflush_r>:
 8005440:	898a      	ldrh	r2, [r1, #12]
 8005442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005446:	4605      	mov	r5, r0
 8005448:	0710      	lsls	r0, r2, #28
 800544a:	460c      	mov	r4, r1
 800544c:	d458      	bmi.n	8005500 <__sflush_r+0xc0>
 800544e:	684b      	ldr	r3, [r1, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	dc05      	bgt.n	8005460 <__sflush_r+0x20>
 8005454:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	dc02      	bgt.n	8005460 <__sflush_r+0x20>
 800545a:	2000      	movs	r0, #0
 800545c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005462:	2e00      	cmp	r6, #0
 8005464:	d0f9      	beq.n	800545a <__sflush_r+0x1a>
 8005466:	2300      	movs	r3, #0
 8005468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800546c:	682f      	ldr	r7, [r5, #0]
 800546e:	6a21      	ldr	r1, [r4, #32]
 8005470:	602b      	str	r3, [r5, #0]
 8005472:	d032      	beq.n	80054da <__sflush_r+0x9a>
 8005474:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005476:	89a3      	ldrh	r3, [r4, #12]
 8005478:	075a      	lsls	r2, r3, #29
 800547a:	d505      	bpl.n	8005488 <__sflush_r+0x48>
 800547c:	6863      	ldr	r3, [r4, #4]
 800547e:	1ac0      	subs	r0, r0, r3
 8005480:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005482:	b10b      	cbz	r3, 8005488 <__sflush_r+0x48>
 8005484:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005486:	1ac0      	subs	r0, r0, r3
 8005488:	2300      	movs	r3, #0
 800548a:	4602      	mov	r2, r0
 800548c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800548e:	6a21      	ldr	r1, [r4, #32]
 8005490:	4628      	mov	r0, r5
 8005492:	47b0      	blx	r6
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	d106      	bne.n	80054a8 <__sflush_r+0x68>
 800549a:	6829      	ldr	r1, [r5, #0]
 800549c:	291d      	cmp	r1, #29
 800549e:	d82b      	bhi.n	80054f8 <__sflush_r+0xb8>
 80054a0:	4a29      	ldr	r2, [pc, #164]	; (8005548 <__sflush_r+0x108>)
 80054a2:	410a      	asrs	r2, r1
 80054a4:	07d6      	lsls	r6, r2, #31
 80054a6:	d427      	bmi.n	80054f8 <__sflush_r+0xb8>
 80054a8:	2200      	movs	r2, #0
 80054aa:	6062      	str	r2, [r4, #4]
 80054ac:	04d9      	lsls	r1, r3, #19
 80054ae:	6922      	ldr	r2, [r4, #16]
 80054b0:	6022      	str	r2, [r4, #0]
 80054b2:	d504      	bpl.n	80054be <__sflush_r+0x7e>
 80054b4:	1c42      	adds	r2, r0, #1
 80054b6:	d101      	bne.n	80054bc <__sflush_r+0x7c>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	b903      	cbnz	r3, 80054be <__sflush_r+0x7e>
 80054bc:	6560      	str	r0, [r4, #84]	; 0x54
 80054be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054c0:	602f      	str	r7, [r5, #0]
 80054c2:	2900      	cmp	r1, #0
 80054c4:	d0c9      	beq.n	800545a <__sflush_r+0x1a>
 80054c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054ca:	4299      	cmp	r1, r3
 80054cc:	d002      	beq.n	80054d4 <__sflush_r+0x94>
 80054ce:	4628      	mov	r0, r5
 80054d0:	f7ff fbea 	bl	8004ca8 <_free_r>
 80054d4:	2000      	movs	r0, #0
 80054d6:	6360      	str	r0, [r4, #52]	; 0x34
 80054d8:	e7c0      	b.n	800545c <__sflush_r+0x1c>
 80054da:	2301      	movs	r3, #1
 80054dc:	4628      	mov	r0, r5
 80054de:	47b0      	blx	r6
 80054e0:	1c41      	adds	r1, r0, #1
 80054e2:	d1c8      	bne.n	8005476 <__sflush_r+0x36>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0c5      	beq.n	8005476 <__sflush_r+0x36>
 80054ea:	2b1d      	cmp	r3, #29
 80054ec:	d001      	beq.n	80054f2 <__sflush_r+0xb2>
 80054ee:	2b16      	cmp	r3, #22
 80054f0:	d101      	bne.n	80054f6 <__sflush_r+0xb6>
 80054f2:	602f      	str	r7, [r5, #0]
 80054f4:	e7b1      	b.n	800545a <__sflush_r+0x1a>
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054fc:	81a3      	strh	r3, [r4, #12]
 80054fe:	e7ad      	b.n	800545c <__sflush_r+0x1c>
 8005500:	690f      	ldr	r7, [r1, #16]
 8005502:	2f00      	cmp	r7, #0
 8005504:	d0a9      	beq.n	800545a <__sflush_r+0x1a>
 8005506:	0793      	lsls	r3, r2, #30
 8005508:	680e      	ldr	r6, [r1, #0]
 800550a:	bf08      	it	eq
 800550c:	694b      	ldreq	r3, [r1, #20]
 800550e:	600f      	str	r7, [r1, #0]
 8005510:	bf18      	it	ne
 8005512:	2300      	movne	r3, #0
 8005514:	eba6 0807 	sub.w	r8, r6, r7
 8005518:	608b      	str	r3, [r1, #8]
 800551a:	f1b8 0f00 	cmp.w	r8, #0
 800551e:	dd9c      	ble.n	800545a <__sflush_r+0x1a>
 8005520:	6a21      	ldr	r1, [r4, #32]
 8005522:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005524:	4643      	mov	r3, r8
 8005526:	463a      	mov	r2, r7
 8005528:	4628      	mov	r0, r5
 800552a:	47b0      	blx	r6
 800552c:	2800      	cmp	r0, #0
 800552e:	dc06      	bgt.n	800553e <__sflush_r+0xfe>
 8005530:	89a3      	ldrh	r3, [r4, #12]
 8005532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005536:	81a3      	strh	r3, [r4, #12]
 8005538:	f04f 30ff 	mov.w	r0, #4294967295
 800553c:	e78e      	b.n	800545c <__sflush_r+0x1c>
 800553e:	4407      	add	r7, r0
 8005540:	eba8 0800 	sub.w	r8, r8, r0
 8005544:	e7e9      	b.n	800551a <__sflush_r+0xda>
 8005546:	bf00      	nop
 8005548:	dfbffffe 	.word	0xdfbffffe

0800554c <_fflush_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	690b      	ldr	r3, [r1, #16]
 8005550:	4605      	mov	r5, r0
 8005552:	460c      	mov	r4, r1
 8005554:	b913      	cbnz	r3, 800555c <_fflush_r+0x10>
 8005556:	2500      	movs	r5, #0
 8005558:	4628      	mov	r0, r5
 800555a:	bd38      	pop	{r3, r4, r5, pc}
 800555c:	b118      	cbz	r0, 8005566 <_fflush_r+0x1a>
 800555e:	6a03      	ldr	r3, [r0, #32]
 8005560:	b90b      	cbnz	r3, 8005566 <_fflush_r+0x1a>
 8005562:	f7ff f9a3 	bl	80048ac <__sinit>
 8005566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f3      	beq.n	8005556 <_fflush_r+0xa>
 800556e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005570:	07d0      	lsls	r0, r2, #31
 8005572:	d404      	bmi.n	800557e <_fflush_r+0x32>
 8005574:	0599      	lsls	r1, r3, #22
 8005576:	d402      	bmi.n	800557e <_fflush_r+0x32>
 8005578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800557a:	f7ff fb93 	bl	8004ca4 <__retarget_lock_acquire_recursive>
 800557e:	4628      	mov	r0, r5
 8005580:	4621      	mov	r1, r4
 8005582:	f7ff ff5d 	bl	8005440 <__sflush_r>
 8005586:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005588:	07da      	lsls	r2, r3, #31
 800558a:	4605      	mov	r5, r0
 800558c:	d4e4      	bmi.n	8005558 <_fflush_r+0xc>
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	059b      	lsls	r3, r3, #22
 8005592:	d4e1      	bmi.n	8005558 <_fflush_r+0xc>
 8005594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005596:	f7ff fb86 	bl	8004ca6 <__retarget_lock_release_recursive>
 800559a:	e7dd      	b.n	8005558 <_fflush_r+0xc>

0800559c <__swhatbuf_r>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	460c      	mov	r4, r1
 80055a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a4:	2900      	cmp	r1, #0
 80055a6:	b096      	sub	sp, #88	; 0x58
 80055a8:	4615      	mov	r5, r2
 80055aa:	461e      	mov	r6, r3
 80055ac:	da0d      	bge.n	80055ca <__swhatbuf_r+0x2e>
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80055b4:	f04f 0100 	mov.w	r1, #0
 80055b8:	bf0c      	ite	eq
 80055ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80055be:	2340      	movne	r3, #64	; 0x40
 80055c0:	2000      	movs	r0, #0
 80055c2:	6031      	str	r1, [r6, #0]
 80055c4:	602b      	str	r3, [r5, #0]
 80055c6:	b016      	add	sp, #88	; 0x58
 80055c8:	bd70      	pop	{r4, r5, r6, pc}
 80055ca:	466a      	mov	r2, sp
 80055cc:	f000 f87c 	bl	80056c8 <_fstat_r>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	dbec      	blt.n	80055ae <__swhatbuf_r+0x12>
 80055d4:	9901      	ldr	r1, [sp, #4]
 80055d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80055da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80055de:	4259      	negs	r1, r3
 80055e0:	4159      	adcs	r1, r3
 80055e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055e6:	e7eb      	b.n	80055c0 <__swhatbuf_r+0x24>

080055e8 <__smakebuf_r>:
 80055e8:	898b      	ldrh	r3, [r1, #12]
 80055ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055ec:	079d      	lsls	r5, r3, #30
 80055ee:	4606      	mov	r6, r0
 80055f0:	460c      	mov	r4, r1
 80055f2:	d507      	bpl.n	8005604 <__smakebuf_r+0x1c>
 80055f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	6123      	str	r3, [r4, #16]
 80055fc:	2301      	movs	r3, #1
 80055fe:	6163      	str	r3, [r4, #20]
 8005600:	b002      	add	sp, #8
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	ab01      	add	r3, sp, #4
 8005606:	466a      	mov	r2, sp
 8005608:	f7ff ffc8 	bl	800559c <__swhatbuf_r>
 800560c:	9900      	ldr	r1, [sp, #0]
 800560e:	4605      	mov	r5, r0
 8005610:	4630      	mov	r0, r6
 8005612:	f7ff fbb5 	bl	8004d80 <_malloc_r>
 8005616:	b948      	cbnz	r0, 800562c <__smakebuf_r+0x44>
 8005618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800561c:	059a      	lsls	r2, r3, #22
 800561e:	d4ef      	bmi.n	8005600 <__smakebuf_r+0x18>
 8005620:	f023 0303 	bic.w	r3, r3, #3
 8005624:	f043 0302 	orr.w	r3, r3, #2
 8005628:	81a3      	strh	r3, [r4, #12]
 800562a:	e7e3      	b.n	80055f4 <__smakebuf_r+0xc>
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	6020      	str	r0, [r4, #0]
 8005630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	9b00      	ldr	r3, [sp, #0]
 8005638:	6163      	str	r3, [r4, #20]
 800563a:	9b01      	ldr	r3, [sp, #4]
 800563c:	6120      	str	r0, [r4, #16]
 800563e:	b15b      	cbz	r3, 8005658 <__smakebuf_r+0x70>
 8005640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005644:	4630      	mov	r0, r6
 8005646:	f000 f851 	bl	80056ec <_isatty_r>
 800564a:	b128      	cbz	r0, 8005658 <__smakebuf_r+0x70>
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	81a3      	strh	r3, [r4, #12]
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	431d      	orrs	r5, r3
 800565c:	81a5      	strh	r5, [r4, #12]
 800565e:	e7cf      	b.n	8005600 <__smakebuf_r+0x18>

08005660 <_putc_r>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	460d      	mov	r5, r1
 8005664:	4614      	mov	r4, r2
 8005666:	4606      	mov	r6, r0
 8005668:	b118      	cbz	r0, 8005672 <_putc_r+0x12>
 800566a:	6a03      	ldr	r3, [r0, #32]
 800566c:	b90b      	cbnz	r3, 8005672 <_putc_r+0x12>
 800566e:	f7ff f91d 	bl	80048ac <__sinit>
 8005672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005674:	07d8      	lsls	r0, r3, #31
 8005676:	d405      	bmi.n	8005684 <_putc_r+0x24>
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	0599      	lsls	r1, r3, #22
 800567c:	d402      	bmi.n	8005684 <_putc_r+0x24>
 800567e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005680:	f7ff fb10 	bl	8004ca4 <__retarget_lock_acquire_recursive>
 8005684:	68a3      	ldr	r3, [r4, #8]
 8005686:	3b01      	subs	r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	60a3      	str	r3, [r4, #8]
 800568c:	da05      	bge.n	800569a <_putc_r+0x3a>
 800568e:	69a2      	ldr	r2, [r4, #24]
 8005690:	4293      	cmp	r3, r2
 8005692:	db12      	blt.n	80056ba <_putc_r+0x5a>
 8005694:	b2eb      	uxtb	r3, r5
 8005696:	2b0a      	cmp	r3, #10
 8005698:	d00f      	beq.n	80056ba <_putc_r+0x5a>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	6022      	str	r2, [r4, #0]
 80056a0:	701d      	strb	r5, [r3, #0]
 80056a2:	b2ed      	uxtb	r5, r5
 80056a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056a6:	07da      	lsls	r2, r3, #31
 80056a8:	d405      	bmi.n	80056b6 <_putc_r+0x56>
 80056aa:	89a3      	ldrh	r3, [r4, #12]
 80056ac:	059b      	lsls	r3, r3, #22
 80056ae:	d402      	bmi.n	80056b6 <_putc_r+0x56>
 80056b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056b2:	f7ff faf8 	bl	8004ca6 <__retarget_lock_release_recursive>
 80056b6:	4628      	mov	r0, r5
 80056b8:	bd70      	pop	{r4, r5, r6, pc}
 80056ba:	4629      	mov	r1, r5
 80056bc:	4622      	mov	r2, r4
 80056be:	4630      	mov	r0, r6
 80056c0:	f7ff f9e3 	bl	8004a8a <__swbuf_r>
 80056c4:	4605      	mov	r5, r0
 80056c6:	e7ed      	b.n	80056a4 <_putc_r+0x44>

080056c8 <_fstat_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4d07      	ldr	r5, [pc, #28]	; (80056e8 <_fstat_r+0x20>)
 80056cc:	2300      	movs	r3, #0
 80056ce:	4604      	mov	r4, r0
 80056d0:	4608      	mov	r0, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	602b      	str	r3, [r5, #0]
 80056d6:	f7fb fc88 	bl	8000fea <_fstat>
 80056da:	1c43      	adds	r3, r0, #1
 80056dc:	d102      	bne.n	80056e4 <_fstat_r+0x1c>
 80056de:	682b      	ldr	r3, [r5, #0]
 80056e0:	b103      	cbz	r3, 80056e4 <_fstat_r+0x1c>
 80056e2:	6023      	str	r3, [r4, #0]
 80056e4:	bd38      	pop	{r3, r4, r5, pc}
 80056e6:	bf00      	nop
 80056e8:	20000344 	.word	0x20000344

080056ec <_isatty_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4d06      	ldr	r5, [pc, #24]	; (8005708 <_isatty_r+0x1c>)
 80056f0:	2300      	movs	r3, #0
 80056f2:	4604      	mov	r4, r0
 80056f4:	4608      	mov	r0, r1
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	f7fb fc87 	bl	800100a <_isatty>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d102      	bne.n	8005706 <_isatty_r+0x1a>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	b103      	cbz	r3, 8005706 <_isatty_r+0x1a>
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	bd38      	pop	{r3, r4, r5, pc}
 8005708:	20000344 	.word	0x20000344

0800570c <_sbrk_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4d06      	ldr	r5, [pc, #24]	; (8005728 <_sbrk_r+0x1c>)
 8005710:	2300      	movs	r3, #0
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	602b      	str	r3, [r5, #0]
 8005718:	f7fb fc90 	bl	800103c <_sbrk>
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	d102      	bne.n	8005726 <_sbrk_r+0x1a>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	b103      	cbz	r3, 8005726 <_sbrk_r+0x1a>
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	bd38      	pop	{r3, r4, r5, pc}
 8005728:	20000344 	.word	0x20000344

0800572c <_init>:
 800572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572e:	bf00      	nop
 8005730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005732:	bc08      	pop	{r3}
 8005734:	469e      	mov	lr, r3
 8005736:	4770      	bx	lr

08005738 <_fini>:
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	bf00      	nop
 800573c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573e:	bc08      	pop	{r3}
 8005740:	469e      	mov	lr, r3
 8005742:	4770      	bx	lr
