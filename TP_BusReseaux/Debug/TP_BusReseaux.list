
TP_BusReseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d9c  08005d9c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005da4  08005da4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08005dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000094  08005e40  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08005e40  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f02c  00000000  00000000  00020107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002922  00000000  00000000  0002f133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  00031a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c2  00000000  00000000  00032700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023568  00000000  00000000  000330c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125d9  00000000  00000000  0005662a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf31b  00000000  00000000  00068c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c14  00000000  00000000  00137f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0013bb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005ab4 	.word	0x08005ab4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	08005ab4 	.word	0x08005ab4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <devID_BMP>:
int16_t  dig_P7 = 0x8C;
int16_t  dig_P8 = 0xF8;
int16_t  dig_P9 = 0x70;

void devID_BMP(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af02      	add	r7, sp, #8
	printf("Debut de l'ID\r\n");
 80005d2:	480f      	ldr	r0, [pc, #60]	; (8000610 <devID_BMP+0x44>)
 80005d4:	f004 fbd2 	bl	8004d7c <puts>
	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&dev_ID, 1, HAL_MAX_DELAY);
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2301      	movs	r3, #1
 80005e0:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <devID_BMP+0x48>)
 80005e2:	21ee      	movs	r1, #238	; 0xee
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <devID_BMP+0x4c>)
 80005e6:	f001 fd69 	bl	80020bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1)|0x01, dataBuffer, sizeof(dataBuffer), HAL_MAX_DELAY);
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2308      	movs	r3, #8
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <devID_BMP+0x50>)
 80005f4:	21ef      	movs	r1, #239	; 0xef
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <devID_BMP+0x4c>)
 80005f8:	f001 fe5e 	bl	80022b8 <HAL_I2C_Master_Receive>
	printf("%s",dataBuffer);
 80005fc:	4907      	ldr	r1, [pc, #28]	; (800061c <devID_BMP+0x50>)
 80005fe:	4808      	ldr	r0, [pc, #32]	; (8000620 <devID_BMP+0x54>)
 8000600:	f004 fb4e 	bl	8004ca0 <iprintf>
	printf("Fin ID\r\n");
 8000604:	4807      	ldr	r0, [pc, #28]	; (8000624 <devID_BMP+0x58>)
 8000606:	f004 fbb9 	bl	8004d7c <puts>
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	08005acc 	.word	0x08005acc
 8000614:	20000000 	.word	0x20000000
 8000618:	2000011c 	.word	0x2000011c
 800061c:	200000b0 	.word	0x200000b0
 8000620:	08005adc 	.word	0x08005adc
 8000624:	08005ae0 	.word	0x08005ae0

08000628 <setConfig_BMP>:

void setConfig_BMP(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af02      	add	r7, sp, #8
	printf("Debut de la config\r\n");
 800062e:	4810      	ldr	r0, [pc, #64]	; (8000670 <setConfig_BMP+0x48>)
 8000630:	f004 fba4 	bl	8004d7c <puts>
	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,TabConfig, 2, HAL_MAX_DELAY);
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2302      	movs	r3, #2
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <setConfig_BMP+0x4c>)
 800063e:	21ee      	movs	r1, #238	; 0xee
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <setConfig_BMP+0x50>)
 8000642:	f001 fd3b 	bl	80020bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, Sendback, sizeof(Sendback), HAL_MAX_DELAY);
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2308      	movs	r3, #8
 800064e:	4a0b      	ldr	r2, [pc, #44]	; (800067c <setConfig_BMP+0x54>)
 8000650:	21ef      	movs	r1, #239	; 0xef
 8000652:	4809      	ldr	r0, [pc, #36]	; (8000678 <setConfig_BMP+0x50>)
 8000654:	f001 fe30 	bl	80022b8 <HAL_I2C_Master_Receive>
	uint8_t newvalue= Sendback[0];
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <setConfig_BMP+0x54>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	71fb      	strb	r3, [r7, #7]
	printf("%02X\r\n",newvalue);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4619      	mov	r1, r3
 8000662:	4807      	ldr	r0, [pc, #28]	; (8000680 <setConfig_BMP+0x58>)
 8000664:	f004 fb1c 	bl	8004ca0 <iprintf>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	08005ae8 	.word	0x08005ae8
 8000674:	20000004 	.word	0x20000004
 8000678:	2000011c 	.word	0x2000011c
 800067c:	200000b8 	.word	0x200000b8
 8000680:	08005afc 	.word	0x08005afc

08000684 <temperatureNonCompense>:


uint32_t temperatureNonCompense(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&TMsbAdress, 1, HAL_MAX_DELAY);
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2301      	movs	r3, #1
 8000692:	4a30      	ldr	r2, [pc, #192]	; (8000754 <temperatureNonCompense+0xd0>)
 8000694:	21ee      	movs	r1, #238	; 0xee
 8000696:	4830      	ldr	r0, [pc, #192]	; (8000758 <temperatureNonCompense+0xd4>)
 8000698:	f001 fd10 	bl	80020bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, T_Msb, sizeof(T_Msb), HAL_MAX_DELAY);
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2308      	movs	r3, #8
 80006a4:	4a2d      	ldr	r2, [pc, #180]	; (800075c <temperatureNonCompense+0xd8>)
 80006a6:	21ef      	movs	r1, #239	; 0xef
 80006a8:	482b      	ldr	r0, [pc, #172]	; (8000758 <temperatureNonCompense+0xd4>)
 80006aa:	f001 fe05 	bl	80022b8 <HAL_I2C_Master_Receive>
	uint8_t MSB= T_Msb[0];
 80006ae:	4b2b      	ldr	r3, [pc, #172]	; (800075c <temperatureNonCompense+0xd8>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&TLsbAdress, 1, HAL_MAX_DELAY);
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2301      	movs	r3, #1
 80006bc:	4a28      	ldr	r2, [pc, #160]	; (8000760 <temperatureNonCompense+0xdc>)
 80006be:	21ee      	movs	r1, #238	; 0xee
 80006c0:	4825      	ldr	r0, [pc, #148]	; (8000758 <temperatureNonCompense+0xd4>)
 80006c2:	f001 fcfb 	bl	80020bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, T_Lsb, sizeof(T_Lsb), HAL_MAX_DELAY);
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2308      	movs	r3, #8
 80006ce:	4a25      	ldr	r2, [pc, #148]	; (8000764 <temperatureNonCompense+0xe0>)
 80006d0:	21ef      	movs	r1, #239	; 0xef
 80006d2:	4821      	ldr	r0, [pc, #132]	; (8000758 <temperatureNonCompense+0xd4>)
 80006d4:	f001 fdf0 	bl	80022b8 <HAL_I2C_Master_Receive>
	uint8_t LSB= T_Lsb[0];
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <temperatureNonCompense+0xe0>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&TxLsbAdress, 1, HAL_MAX_DELAY);
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2301      	movs	r3, #1
 80006e6:	4a20      	ldr	r2, [pc, #128]	; (8000768 <temperatureNonCompense+0xe4>)
 80006e8:	21ee      	movs	r1, #238	; 0xee
 80006ea:	481b      	ldr	r0, [pc, #108]	; (8000758 <temperatureNonCompense+0xd4>)
 80006ec:	f001 fce6 	bl	80020bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, T_xLsb, sizeof(T_xLsb), HAL_MAX_DELAY);
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2304      	movs	r3, #4
 80006f8:	4a1c      	ldr	r2, [pc, #112]	; (800076c <temperatureNonCompense+0xe8>)
 80006fa:	21ef      	movs	r1, #239	; 0xef
 80006fc:	4816      	ldr	r0, [pc, #88]	; (8000758 <temperatureNonCompense+0xd4>)
 80006fe:	f001 fddb 	bl	80022b8 <HAL_I2C_Master_Receive>
	uint8_t xLSB= T_xLsb[0];
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <temperatureNonCompense+0xe8>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	717b      	strb	r3, [r7, #5]

	TempValue |= ((uint32_t)MSB << 12);
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	031a      	lsls	r2, r3, #12
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <temperatureNonCompense+0xec>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4313      	orrs	r3, r2
 8000712:	4a17      	ldr	r2, [pc, #92]	; (8000770 <temperatureNonCompense+0xec>)
 8000714:	6013      	str	r3, [r2, #0]
	TempValue |= ((uint32_t)LSB << 4);
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	011a      	lsls	r2, r3, #4
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <temperatureNonCompense+0xec>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4313      	orrs	r3, r2
 8000720:	4a13      	ldr	r2, [pc, #76]	; (8000770 <temperatureNonCompense+0xec>)
 8000722:	6013      	str	r3, [r2, #0]
	TempValue |= (xLSB & 0x0F);
 8000724:	797b      	ldrb	r3, [r7, #5]
 8000726:	f003 020f 	and.w	r2, r3, #15
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <temperatureNonCompense+0xec>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4313      	orrs	r3, r2
 8000730:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <temperatureNonCompense+0xec>)
 8000732:	6013      	str	r3, [r2, #0]

	printf("La temprature non compense est de : %lX\r\n", TempValue);
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <temperatureNonCompense+0xec>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	480e      	ldr	r0, [pc, #56]	; (8000774 <temperatureNonCompense+0xf0>)
 800073c:	f004 fab0 	bl	8004ca0 <iprintf>
	printf("\n");
 8000740:	200a      	movs	r0, #10
 8000742:	f004 fabf 	bl	8004cc4 <putchar>
	return TempValue;
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <temperatureNonCompense+0xec>)
 8000748:	681b      	ldr	r3, [r3, #0]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000006 	.word	0x20000006
 8000758:	2000011c 	.word	0x2000011c
 800075c:	200000c0 	.word	0x200000c0
 8000760:	20000007 	.word	0x20000007
 8000764:	200000c8 	.word	0x200000c8
 8000768:	20000008 	.word	0x20000008
 800076c:	200000d0 	.word	0x200000d0
 8000770:	200000d4 	.word	0x200000d4
 8000774:	08005b04 	.word	0x08005b04

08000778 <pressionNonCompense>:
uint32_t pressionNonCompense(void){
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&PMsbAdress, 1, HAL_MAX_DELAY);
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	4a30      	ldr	r2, [pc, #192]	; (8000848 <pressionNonCompense+0xd0>)
 8000788:	21ee      	movs	r1, #238	; 0xee
 800078a:	4830      	ldr	r0, [pc, #192]	; (800084c <pressionNonCompense+0xd4>)
 800078c:	f001 fc96 	bl	80020bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, P_Msb, sizeof(P_Msb), HAL_MAX_DELAY);
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2308      	movs	r3, #8
 8000798:	4a2d      	ldr	r2, [pc, #180]	; (8000850 <pressionNonCompense+0xd8>)
 800079a:	21ef      	movs	r1, #239	; 0xef
 800079c:	482b      	ldr	r0, [pc, #172]	; (800084c <pressionNonCompense+0xd4>)
 800079e:	f001 fd8b 	bl	80022b8 <HAL_I2C_Master_Receive>
	uint8_t PMSB= P_Msb[0];
 80007a2:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <pressionNonCompense+0xd8>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&PLsbAdress, 1, HAL_MAX_DELAY);
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2301      	movs	r3, #1
 80007b0:	4a28      	ldr	r2, [pc, #160]	; (8000854 <pressionNonCompense+0xdc>)
 80007b2:	21ee      	movs	r1, #238	; 0xee
 80007b4:	4825      	ldr	r0, [pc, #148]	; (800084c <pressionNonCompense+0xd4>)
 80007b6:	f001 fc81 	bl	80020bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, P_Lsb, sizeof(P_Lsb), HAL_MAX_DELAY);
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2308      	movs	r3, #8
 80007c2:	4a25      	ldr	r2, [pc, #148]	; (8000858 <pressionNonCompense+0xe0>)
 80007c4:	21ef      	movs	r1, #239	; 0xef
 80007c6:	4821      	ldr	r0, [pc, #132]	; (800084c <pressionNonCompense+0xd4>)
 80007c8:	f001 fd76 	bl	80022b8 <HAL_I2C_Master_Receive>
	uint8_t PLSB= P_Lsb[0];
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <pressionNonCompense+0xe0>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Master_Transmit(&hi2c1, BMPAddress << 1,&PxLsbAdress, 1, HAL_MAX_DELAY);
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	4a20      	ldr	r2, [pc, #128]	; (800085c <pressionNonCompense+0xe4>)
 80007dc:	21ee      	movs	r1, #238	; 0xee
 80007de:	481b      	ldr	r0, [pc, #108]	; (800084c <pressionNonCompense+0xd4>)
 80007e0:	f001 fc6c 	bl	80020bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (BMPAddress << 1) | 0x01, P_xLsb, sizeof(P_xLsb), HAL_MAX_DELAY);
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2304      	movs	r3, #4
 80007ec:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <pressionNonCompense+0xe8>)
 80007ee:	21ef      	movs	r1, #239	; 0xef
 80007f0:	4816      	ldr	r0, [pc, #88]	; (800084c <pressionNonCompense+0xd4>)
 80007f2:	f001 fd61 	bl	80022b8 <HAL_I2C_Master_Receive>
	uint8_t PxLSB= P_xLsb[0];
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <pressionNonCompense+0xe8>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	717b      	strb	r3, [r7, #5]

	PressValue |= ((uint32_t)PMSB << 12);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	031a      	lsls	r2, r3, #12
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <pressionNonCompense+0xec>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4313      	orrs	r3, r2
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <pressionNonCompense+0xec>)
 8000808:	6013      	str	r3, [r2, #0]
	PressValue |= ((uint32_t)PLSB << 4);
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	011a      	lsls	r2, r3, #4
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <pressionNonCompense+0xec>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4313      	orrs	r3, r2
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <pressionNonCompense+0xec>)
 8000816:	6013      	str	r3, [r2, #0]
	PressValue |= (PxLSB & 0x0F);
 8000818:	797b      	ldrb	r3, [r7, #5]
 800081a:	f003 020f 	and.w	r2, r3, #15
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <pressionNonCompense+0xec>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4313      	orrs	r3, r2
 8000824:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <pressionNonCompense+0xec>)
 8000826:	6013      	str	r3, [r2, #0]

	printf("La pression non compense  est de : %lX\r\n", PressValue);
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <pressionNonCompense+0xec>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <pressionNonCompense+0xf0>)
 8000830:	f004 fa36 	bl	8004ca0 <iprintf>
	printf("\n");
 8000834:	200a      	movs	r0, #10
 8000836:	f004 fa45 	bl	8004cc4 <putchar>
	return PressValue;
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <pressionNonCompense+0xec>)
 800083c:	681b      	ldr	r3, [r3, #0]

}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000009 	.word	0x20000009
 800084c:	2000011c 	.word	0x2000011c
 8000850:	200000d8 	.word	0x200000d8
 8000854:	2000000a 	.word	0x2000000a
 8000858:	200000e0 	.word	0x200000e0
 800085c:	2000000b 	.word	0x2000000b
 8000860:	200000e8 	.word	0x200000e8
 8000864:	200000ec 	.word	0x200000ec
 8000868:	08005b30 	.word	0x08005b30

0800086c <bmp280_compensate_T_int32>:
BMP280_S32_t t_fine;
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	10da      	asrs	r2, r3, #3
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <bmp280_compensate_T_int32+0x74>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <bmp280_compensate_T_int32+0x78>)
 8000882:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	12db      	asrs	r3, r3, #11
 800088c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	111b      	asrs	r3, r3, #4
 8000892:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <bmp280_compensate_T_int32+0x74>)
 8000894:	8812      	ldrh	r2, [r2, #0]
 8000896:	1a9b      	subs	r3, r3, r2
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	1112      	asrs	r2, r2, #4
 800089c:	4910      	ldr	r1, [pc, #64]	; (80008e0 <bmp280_compensate_T_int32+0x74>)
 800089e:	8809      	ldrh	r1, [r1, #0]
 80008a0:	1a52      	subs	r2, r2, r1
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
 80008a6:	131b      	asrs	r3, r3, #12
			((BMP280_S32_t)dig_T3)) >> 14;
 80008a8:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <bmp280_compensate_T_int32+0x7c>)
 80008aa:	f9b2 2000 	ldrsh.w	r2, [r2]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 80008ae:	fb02 f303 	mul.w	r3, r2, r3
 80008b2:	139b      	asrs	r3, r3, #14
 80008b4:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	4413      	add	r3, r2
 80008bc:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <bmp280_compensate_T_int32+0x80>)
 80008be:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <bmp280_compensate_T_int32+0x80>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	3380      	adds	r3, #128	; 0x80
 80008cc:	121b      	asrs	r3, r3, #8
 80008ce:	60fb      	str	r3, [r7, #12]
	return T;
 80008d0:	68fb      	ldr	r3, [r7, #12]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	371c      	adds	r7, #28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	2000000c 	.word	0x2000000c
 80008e4:	2000000e 	.word	0x2000000e
 80008e8:	20000010 	.word	0x20000010
 80008ec:	200000f0 	.word	0x200000f0

080008f0 <bmp280_compensate_P_int32>:
// Returns pressure in Pa as unsigned 32 bit integer. Output value of “96386” equals 96386 Pa = 963.86 hPa
BMP280_U32_t bmp280_compensate_P_int32(BMP280_S32_t adc_P)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b087      	sub	sp, #28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2;
	BMP280_U32_t p;
	var1 = (((BMP280_S32_t)t_fine)>>1) - (BMP280_S32_t)64000;
 80008f8:	4b4a      	ldr	r3, [pc, #296]	; (8000a24 <bmp280_compensate_P_int32+0x134>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	105b      	asrs	r3, r3, #1
 80008fe:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000902:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((BMP280_S32_t)dig_P6);
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	109b      	asrs	r3, r3, #2
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	1092      	asrs	r2, r2, #2
 800090c:	fb02 f303 	mul.w	r3, r2, r3
 8000910:	12db      	asrs	r3, r3, #11
 8000912:	4a45      	ldr	r2, [pc, #276]	; (8000a28 <bmp280_compensate_P_int32+0x138>)
 8000914:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000918:	fb02 f303 	mul.w	r3, r2, r3
 800091c:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((BMP280_S32_t)dig_P5))<<1);
 800091e:	4b43      	ldr	r3, [pc, #268]	; (8000a2c <bmp280_compensate_P_int32+0x13c>)
 8000920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000924:	461a      	mov	r2, r3
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	fb02 f303 	mul.w	r3, r2, r3
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4413      	add	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((BMP280_S32_t)dig_P4)<<16);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	109a      	asrs	r2, r3, #2
 8000938:	4b3d      	ldr	r3, [pc, #244]	; (8000a30 <bmp280_compensate_P_int32+0x140>)
 800093a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093e:	041b      	lsls	r3, r3, #16
 8000940:	4413      	add	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
	var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((BMP280_S32_t)dig_P2) * var1)>>1))>>18;
 8000944:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <bmp280_compensate_P_int32+0x144>)
 8000946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800094a:	4619      	mov	r1, r3
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	109b      	asrs	r3, r3, #2
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	1092      	asrs	r2, r2, #2
 8000954:	fb02 f303 	mul.w	r3, r2, r3
 8000958:	135b      	asrs	r3, r3, #13
 800095a:	fb01 f303 	mul.w	r3, r1, r3
 800095e:	10da      	asrs	r2, r3, #3
 8000960:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <bmp280_compensate_P_int32+0x148>)
 8000962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000966:	4619      	mov	r1, r3
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	fb01 f303 	mul.w	r3, r1, r3
 800096e:	105b      	asrs	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	149b      	asrs	r3, r3, #18
 8000974:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((BMP280_S32_t)dig_P1))>>15);
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800097c:	4a2f      	ldr	r2, [pc, #188]	; (8000a3c <bmp280_compensate_P_int32+0x14c>)
 800097e:	8812      	ldrh	r2, [r2, #0]
 8000980:	fb02 f303 	mul.w	r3, r2, r3
 8000984:	13db      	asrs	r3, r3, #15
 8000986:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d101      	bne.n	8000992 <bmp280_compensate_P_int32+0xa2>
	{
		return 0; // avoid exception caused by division by zero
 800098e:	2300      	movs	r3, #0
 8000990:	e041      	b.n	8000a16 <bmp280_compensate_P_int32+0x126>
	}
	p = (((BMP280_U32_t)(((BMP280_S32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	131b      	asrs	r3, r3, #12
 8000996:	461a      	mov	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	4a28      	ldr	r2, [pc, #160]	; (8000a40 <bmp280_compensate_P_int32+0x150>)
 800099e:	fb02 f303 	mul.w	r3, r2, r3
 80009a2:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 80009a6:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 80009aa:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db06      	blt.n	80009c0 <bmp280_compensate_P_int32+0xd0>
	{
		p = (p << 1) / ((BMP280_U32_t)var1);
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005a      	lsls	r2, r3, #1
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	e005      	b.n	80009cc <bmp280_compensate_P_int32+0xdc>
	}
	else
	{
		p = (p / (BMP280_U32_t)var1) * 2;
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
	}
	var1 = (((BMP280_S32_t)dig_P9) * ((BMP280_S32_t)(((p>>3) * (p>>3))>>13)))>>12;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <bmp280_compensate_P_int32+0x154>)
 80009ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d2:	4619      	mov	r1, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	08d2      	lsrs	r2, r2, #3
 80009dc:	fb02 f303 	mul.w	r3, r2, r3
 80009e0:	0b5b      	lsrs	r3, r3, #13
 80009e2:	fb01 f303 	mul.w	r3, r1, r3
 80009e6:	131b      	asrs	r3, r3, #12
 80009e8:	613b      	str	r3, [r7, #16]
	var2 = (((BMP280_S32_t)(p>>2)) * ((BMP280_S32_t)dig_P8))>>13;
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <bmp280_compensate_P_int32+0x158>)
 80009f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f6:	fb02 f303 	mul.w	r3, r2, r3
 80009fa:	135b      	asrs	r3, r3, #13
 80009fc:	60fb      	str	r3, [r7, #12]
	p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <bmp280_compensate_P_int32+0x15c>)
 8000a06:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	111a      	asrs	r2, r3, #4
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	4413      	add	r3, r2
 8000a12:	617b      	str	r3, [r7, #20]
	return p;
 8000a14:	697b      	ldr	r3, [r7, #20]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	371c      	adds	r7, #28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	200000f0 	.word	0x200000f0
 8000a28:	2000001c 	.word	0x2000001c
 8000a2c:	2000001a 	.word	0x2000001a
 8000a30:	20000018 	.word	0x20000018
 8000a34:	20000016 	.word	0x20000016
 8000a38:	20000014 	.word	0x20000014
 8000a3c:	20000012 	.word	0x20000012
 8000a40:	fffff3cb 	.word	0xfffff3cb
 8000a44:	20000022 	.word	0x20000022
 8000a48:	20000020 	.word	0x20000020
 8000a4c:	2000001e 	.word	0x2000001e

08000a50 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <MX_CAN1_Init+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a5c:	2206      	movs	r2, #6
 8000a5e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a6e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000a72:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a7a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000aa2:	f000 fd79 	bl	8001598 <HAL_CAN_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000aac:	f000 fab4 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200000f4 	.word	0x200000f4
 8000ab8:	40006400 	.word	0x40006400

08000abc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_CAN_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12c      	bne.n	8000b38 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_CAN_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_CAN_MspInit+0x88>)
 8000ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_CAN_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_CAN_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_CAN_MspInit+0x88>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_CAN_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b28:	2309      	movs	r3, #9
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <HAL_CAN_MspInit+0x8c>)
 8000b34:	f000 ffd0 	bl	8001ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40006400 	.word	0x40006400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a2c      	ldr	r2, [pc, #176]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a25      	ldr	r2, [pc, #148]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a1e      	ldr	r2, [pc, #120]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_GPIO_Init+0xd0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	4812      	ldr	r0, [pc, #72]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000bd8:	f001 f912 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480c      	ldr	r0, [pc, #48]	; (8000c24 <MX_GPIO_Init+0xd8>)
 8000bf4:	f000 ff70 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_GPIO_Init+0xd4>)
 8000c10:	f000 ff62 	bl	8001ad8 <HAL_GPIO_Init>

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020800 	.word	0x40020800

08000c28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c2e:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <MX_I2C1_Init+0x54>)
 8000c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c34:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_I2C1_Init+0x58>)
 8000c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_I2C1_Init+0x50>)
 8000c66:	f001 f8e5 	bl	8001e34 <HAL_I2C_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c70:	f000 f9d2 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000011c 	.word	0x2000011c
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	000186a0 	.word	0x000186a0

08000c84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_I2C_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12c      	bne.n	8000d00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc8:	2312      	movs	r3, #18
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480c      	ldr	r0, [pc, #48]	; (8000d10 <HAL_I2C_MspInit+0x8c>)
 8000ce0:	f000 fefa 	bl	8001ad8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_I2C_MspInit+0x88>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020400 	.word	0x40020400

08000d14 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a4d      	ldr	r2, [pc, #308]	; (8000e54 <HAL_UART_RxCpltCallback+0x140>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	f040 808e 	bne.w	8000e42 <HAL_UART_RxCpltCallback+0x12e>
	{
		printf("%s",rxPiBuffer);
 8000d26:	494c      	ldr	r1, [pc, #304]	; (8000e58 <HAL_UART_RxCpltCallback+0x144>)
 8000d28:	484c      	ldr	r0, [pc, #304]	; (8000e5c <HAL_UART_RxCpltCallback+0x148>)
 8000d2a:	f003 ffb9 	bl	8004ca0 <iprintf>
		if (strcmp(rxPiBuffer, "GET_T") == 0) {
 8000d2e:	494c      	ldr	r1, [pc, #304]	; (8000e60 <HAL_UART_RxCpltCallback+0x14c>)
 8000d30:	4849      	ldr	r0, [pc, #292]	; (8000e58 <HAL_UART_RxCpltCallback+0x144>)
 8000d32:	f7ff fa6d 	bl	8000210 <strcmp>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d113      	bne.n	8000d64 <HAL_UART_RxCpltCallback+0x50>
			noneCompensatedTemperature=temperatureNonCompense();
 8000d3c:	f7ff fca2 	bl	8000684 <temperatureNonCompense>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a48      	ldr	r2, [pc, #288]	; (8000e64 <HAL_UART_RxCpltCallback+0x150>)
 8000d44:	6013      	str	r3, [r2, #0]
			compensatedTemperature=bmp280_compensate_T_int32(noneCompensatedTemperature);
 8000d46:	4b47      	ldr	r3, [pc, #284]	; (8000e64 <HAL_UART_RxCpltCallback+0x150>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fd8e 	bl	800086c <bmp280_compensate_T_int32>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4a45      	ldr	r2, [pc, #276]	; (8000e68 <HAL_UART_RxCpltCallback+0x154>)
 8000d54:	6013      	str	r3, [r2, #0]
			  printf("Tcompense=%d_C\n\r",(int)(compensatedTemperature));
 8000d56:	4b44      	ldr	r3, [pc, #272]	; (8000e68 <HAL_UART_RxCpltCallback+0x154>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4843      	ldr	r0, [pc, #268]	; (8000e6c <HAL_UART_RxCpltCallback+0x158>)
 8000d5e:	f003 ff9f 	bl	8004ca0 <iprintf>
 8000d62:	e06e      	b.n	8000e42 <HAL_UART_RxCpltCallback+0x12e>
		}
		else if (strcmp(rxPiBuffer, "GET_P") == 0) {
 8000d64:	4942      	ldr	r1, [pc, #264]	; (8000e70 <HAL_UART_RxCpltCallback+0x15c>)
 8000d66:	483c      	ldr	r0, [pc, #240]	; (8000e58 <HAL_UART_RxCpltCallback+0x144>)
 8000d68:	f7ff fa52 	bl	8000210 <strcmp>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d114      	bne.n	8000d9c <HAL_UART_RxCpltCallback+0x88>

			nonecompensatedPression = pressionNonCompense();
 8000d72:	f7ff fd01 	bl	8000778 <pressionNonCompense>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a3e      	ldr	r2, [pc, #248]	; (8000e74 <HAL_UART_RxCpltCallback+0x160>)
 8000d7a:	6013      	str	r3, [r2, #0]
			compensatedPression=bmp280_compensate_T_int32(nonecompensatedPression);
 8000d7c:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <HAL_UART_RxCpltCallback+0x160>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fd73 	bl	800086c <bmp280_compensate_T_int32>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <HAL_UART_RxCpltCallback+0x164>)
 8000d8c:	601a      	str	r2, [r3, #0]
			  printf("Pcompense=%dPA\n\r",(int)(compensatedPression));
 8000d8e:	4b3a      	ldr	r3, [pc, #232]	; (8000e78 <HAL_UART_RxCpltCallback+0x164>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4619      	mov	r1, r3
 8000d94:	4839      	ldr	r0, [pc, #228]	; (8000e7c <HAL_UART_RxCpltCallback+0x168>)
 8000d96:	f003 ff83 	bl	8004ca0 <iprintf>
 8000d9a:	e052      	b.n	8000e42 <HAL_UART_RxCpltCallback+0x12e>
		}
		else if (strcmp(rxPiBuffer, "GET_K") == 0) {
 8000d9c:	4938      	ldr	r1, [pc, #224]	; (8000e80 <HAL_UART_RxCpltCallback+0x16c>)
 8000d9e:	482e      	ldr	r0, [pc, #184]	; (8000e58 <HAL_UART_RxCpltCallback+0x144>)
 8000da0:	f7ff fa36 	bl	8000210 <strcmp>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d118      	bne.n	8000ddc <HAL_UART_RxCpltCallback+0xc8>
			printf("K=%d.%d000\r\n",(int)(K/100),K%100);
 8000daa:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <HAL_UART_RxCpltCallback+0x170>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a36      	ldr	r2, [pc, #216]	; (8000e88 <HAL_UART_RxCpltCallback+0x174>)
 8000db0:	fb82 1203 	smull	r1, r2, r2, r3
 8000db4:	1152      	asrs	r2, r2, #5
 8000db6:	17db      	asrs	r3, r3, #31
 8000db8:	1ad0      	subs	r0, r2, r3
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <HAL_UART_RxCpltCallback+0x170>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a32      	ldr	r2, [pc, #200]	; (8000e88 <HAL_UART_RxCpltCallback+0x174>)
 8000dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc4:	1151      	asrs	r1, r2, #5
 8000dc6:	17da      	asrs	r2, r3, #31
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	2164      	movs	r1, #100	; 0x64
 8000dcc:	fb01 f202 	mul.w	r2, r1, r2
 8000dd0:	1a9a      	subs	r2, r3, r2
 8000dd2:	4601      	mov	r1, r0
 8000dd4:	482d      	ldr	r0, [pc, #180]	; (8000e8c <HAL_UART_RxCpltCallback+0x178>)
 8000dd6:	f003 ff63 	bl	8004ca0 <iprintf>
 8000dda:	e032      	b.n	8000e42 <HAL_UART_RxCpltCallback+0x12e>
				}
		else if (strcmp(rxPiBuffer, "GET_A") == 0) {
 8000ddc:	492c      	ldr	r1, [pc, #176]	; (8000e90 <HAL_UART_RxCpltCallback+0x17c>)
 8000dde:	481e      	ldr	r0, [pc, #120]	; (8000e58 <HAL_UART_RxCpltCallback+0x144>)
 8000de0:	f7ff fa16 	bl	8000210 <strcmp>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d119      	bne.n	8000e1e <HAL_UART_RxCpltCallback+0x10a>
			printf("A=%d.%d000\r\n",(int)(A/1000),A%1000);
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <HAL_UART_RxCpltCallback+0x180>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a2a      	ldr	r2, [pc, #168]	; (8000e98 <HAL_UART_RxCpltCallback+0x184>)
 8000df0:	fb82 1203 	smull	r1, r2, r2, r3
 8000df4:	1192      	asrs	r2, r2, #6
 8000df6:	17db      	asrs	r3, r3, #31
 8000df8:	1ad0      	subs	r0, r2, r3
 8000dfa:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <HAL_UART_RxCpltCallback+0x180>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <HAL_UART_RxCpltCallback+0x184>)
 8000e00:	fb82 1203 	smull	r1, r2, r2, r3
 8000e04:	1191      	asrs	r1, r2, #6
 8000e06:	17da      	asrs	r2, r3, #31
 8000e08:	1a8a      	subs	r2, r1, r2
 8000e0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e0e:	fb01 f202 	mul.w	r2, r1, r2
 8000e12:	1a9a      	subs	r2, r3, r2
 8000e14:	4601      	mov	r1, r0
 8000e16:	4821      	ldr	r0, [pc, #132]	; (8000e9c <HAL_UART_RxCpltCallback+0x188>)
 8000e18:	f003 ff42 	bl	8004ca0 <iprintf>
 8000e1c:	e011      	b.n	8000e42 <HAL_UART_RxCpltCallback+0x12e>

				}
		else if (strcmp(rxPiBuffer, "SET_K") == 0) {
 8000e1e:	4920      	ldr	r1, [pc, #128]	; (8000ea0 <HAL_UART_RxCpltCallback+0x18c>)
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <HAL_UART_RxCpltCallback+0x144>)
 8000e22:	f7ff f9f5 	bl	8000210 <strcmp>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d107      	bne.n	8000e3c <HAL_UART_RxCpltCallback+0x128>
			K=atoi(rxPiBuffer+strlen("SET_K")+strlen("="));
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_UART_RxCpltCallback+0x190>)
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 fdf6 	bl	8004a20 <atoi>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_UART_RxCpltCallback+0x170>)
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	e002      	b.n	8000e42 <HAL_UART_RxCpltCallback+0x12e>
				}
		else {
			printf("Command no exist \r\n");
 8000e3c:	481a      	ldr	r0, [pc, #104]	; (8000ea8 <HAL_UART_RxCpltCallback+0x194>)
 8000e3e:	f003 ff9d 	bl	8004d7c <puts>

		}
	}
	HAL_UART_Receive_IT(&huart3, &rxPiBuffer, 1);
 8000e42:	2201      	movs	r2, #1
 8000e44:	4904      	ldr	r1, [pc, #16]	; (8000e58 <HAL_UART_RxCpltCallback+0x144>)
 8000e46:	4803      	ldr	r0, [pc, #12]	; (8000e54 <HAL_UART_RxCpltCallback+0x140>)
 8000e48:	f002 fe51 	bl	8003aee <HAL_UART_Receive_IT>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200001c8 	.word	0x200001c8
 8000e58:	08005c44 	.word	0x08005c44
 8000e5c:	08005b5c 	.word	0x08005b5c
 8000e60:	08005b60 	.word	0x08005b60
 8000e64:	20000174 	.word	0x20000174
 8000e68:	20000178 	.word	0x20000178
 8000e6c:	08005b68 	.word	0x08005b68
 8000e70:	08005b7c 	.word	0x08005b7c
 8000e74:	20000170 	.word	0x20000170
 8000e78:	2000017c 	.word	0x2000017c
 8000e7c:	08005b84 	.word	0x08005b84
 8000e80:	08005b98 	.word	0x08005b98
 8000e84:	20000024 	.word	0x20000024
 8000e88:	51eb851f 	.word	0x51eb851f
 8000e8c:	08005ba0 	.word	0x08005ba0
 8000e90:	08005bb0 	.word	0x08005bb0
 8000e94:	20000028 	.word	0x20000028
 8000e98:	10624dd3 	.word	0x10624dd3
 8000e9c:	08005bb8 	.word	0x08005bb8
 8000ea0:	08005bc8 	.word	0x08005bc8
 8000ea4:	08005c4a 	.word	0x08005c4a
 8000ea8:	08005bd0 	.word	0x08005bd0

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb0:	f000 fb00 	bl	80014b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb4:	f000 f842 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb8:	f7ff fe48 	bl	8000b4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ebc:	f000 f9d6 	bl	800126c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ec0:	f7ff feb2 	bl	8000c28 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000ec4:	f7ff fdc4 	bl	8000a50 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8000ec8:	f000 f9fa 	bl	80012c0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  devID_BMP();
 8000ecc:	f7ff fb7e 	bl	80005cc <devID_BMP>
  setConfig_BMP();
 8000ed0:	f7ff fbaa 	bl	8000628 <setConfig_BMP>
  noneCompensatedTemperature=temperatureNonCompense();
 8000ed4:	f7ff fbd6 	bl	8000684 <temperatureNonCompense>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <main+0x78>)
 8000edc:	6013      	str	r3, [r2, #0]
  nonecompensatedPression=pressionNonCompense();
 8000ede:	f7ff fc4b 	bl	8000778 <pressionNonCompense>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <main+0x7c>)
 8000ee6:	6013      	str	r3, [r2, #0]
  compensatedTemperature= bmp280_compensate_T_int32(noneCompensatedTemperature);
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <main+0x78>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fcbd 	bl	800086c <bmp280_compensate_T_int32>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <main+0x80>)
 8000ef6:	6013      	str	r3, [r2, #0]
  compensatedPression = bmp280_compensate_P_int32(nonecompensatedPression);
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <main+0x7c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fcf7 	bl	80008f0 <bmp280_compensate_P_int32>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <main+0x84>)
 8000f08:	601a      	str	r2, [r3, #0]
  printf("La valeur de la pression compense = %d hPa\n\r",(int)(compensatedPression));
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <main+0x84>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <main+0x88>)
 8000f12:	f003 fec5 	bl	8004ca0 <iprintf>
  printf("La valeur de la temperature compense = %d C\n\r",(int)(compensatedTemperature));
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <main+0x80>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4806      	ldr	r0, [pc, #24]	; (8000f38 <main+0x8c>)
 8000f1e:	f003 febf 	bl	8004ca0 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000f22:	e7fe      	b.n	8000f22 <main+0x76>
 8000f24:	20000174 	.word	0x20000174
 8000f28:	20000170 	.word	0x20000170
 8000f2c:	20000178 	.word	0x20000178
 8000f30:	2000017c 	.word	0x2000017c
 8000f34:	08005be4 	.word	0x08005be4
 8000f38:	08005c14 	.word	0x08005c14

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	; 0x50
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	2234      	movs	r2, #52	; 0x34
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f003 fff6 	bl	8004f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <SystemClock_Config+0xd4>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	4a29      	ldr	r2, [pc, #164]	; (8001010 <SystemClock_Config+0xd4>)
 8000f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <SystemClock_Config+0xd4>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <SystemClock_Config+0xd8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f88:	4a22      	ldr	r2, [pc, #136]	; (8001014 <SystemClock_Config+0xd8>)
 8000f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <SystemClock_Config+0xd8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fb4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fb8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fa12 	bl	80033f4 <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fd6:	f000 f81f 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 feb2 	bl	8002d60 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001002:	f000 f809 	bl	8001018 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3750      	adds	r7, #80	; 0x50
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_MspInit+0x4c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <HAL_MspInit+0x4c>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_MspInit+0x4c>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a08      	ldr	r2, [pc, #32]	; (8001070 <HAL_MspInit+0x4c>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_MspInit+0x4c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001062:	2007      	movs	r0, #7
 8001064:	f000 fc64 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800

08001074 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800107c:	1d39      	adds	r1, r7, #4
 800107e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001082:	2201      	movs	r2, #1
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <__io_putchar+0x20>)
 8001086:	f002 fca0 	bl	80039ca <HAL_UART_Transmit>

  return ch;
 800108a:	687b      	ldr	r3, [r7, #4]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000184 	.word	0x20000184

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e4:	f000 fa38 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <USART3_IRQHandler+0x10>)
 80010f2:	f002 fd2d 	bl	8003b50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001c8 	.word	0x200001c8

08001100 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e00a      	b.n	8001128 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001112:	f3af 8000 	nop.w
 8001116:	4601      	mov	r1, r0
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	60ba      	str	r2, [r7, #8]
 800111e:	b2ca      	uxtb	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbf0      	blt.n	8001112 <_read+0x12>
  }

  return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	e009      	b.n	8001160 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	60ba      	str	r2, [r7, #8]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff8d 	bl	8001074 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf1      	blt.n	800114c <_write+0x12>
  }
  return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_close>:

int _close(int file)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119a:	605a      	str	r2, [r3, #4]
  return 0;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_isatty>:

int _isatty(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f003 fee4 	bl	8004fd8 <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20020000 	.word	0x20020000
 800123c:	00000400 	.word	0x00000400
 8001240:	20000180 	.word	0x20000180
 8001244:	20000360 	.word	0x20000360

08001248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <SystemInit+0x20>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <SystemInit+0x20>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <MX_USART2_UART_Init+0x50>)
 8001274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 80012a4:	f002 fb44 	bl	8003930 <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ae:	f7ff feb3 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000184 	.word	0x20000184
 80012bc:	40004400 	.word	0x40004400

080012c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_USART3_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_USART3_UART_Init+0x4c>)
 80012f8:	f002 fb1a 	bl	8003930 <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f7ff fe89 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001c8 	.word	0x200001c8
 8001310:	40004800 	.word	0x40004800

08001314 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a45      	ldr	r2, [pc, #276]	; (8001448 <HAL_UART_MspInit+0x134>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12c      	bne.n	8001390 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	4b44      	ldr	r3, [pc, #272]	; (800144c <HAL_UART_MspInit+0x138>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a43      	ldr	r2, [pc, #268]	; (800144c <HAL_UART_MspInit+0x138>)
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_UART_MspInit+0x138>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <HAL_UART_MspInit+0x138>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a3c      	ldr	r2, [pc, #240]	; (800144c <HAL_UART_MspInit+0x138>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b3a      	ldr	r3, [pc, #232]	; (800144c <HAL_UART_MspInit+0x138>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800136e:	230c      	movs	r3, #12
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800137e:	2307      	movs	r3, #7
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4831      	ldr	r0, [pc, #196]	; (8001450 <HAL_UART_MspInit+0x13c>)
 800138a:	f000 fba5 	bl	8001ad8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800138e:	e057      	b.n	8001440 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a2f      	ldr	r2, [pc, #188]	; (8001454 <HAL_UART_MspInit+0x140>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d152      	bne.n	8001440 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b2b      	ldr	r3, [pc, #172]	; (800144c <HAL_UART_MspInit+0x138>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a2a      	ldr	r2, [pc, #168]	; (800144c <HAL_UART_MspInit+0x138>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <HAL_UART_MspInit+0x138>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_UART_MspInit+0x138>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a23      	ldr	r2, [pc, #140]	; (800144c <HAL_UART_MspInit+0x138>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <HAL_UART_MspInit+0x138>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_UART_MspInit+0x138>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a1c      	ldr	r2, [pc, #112]	; (800144c <HAL_UART_MspInit+0x138>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <HAL_UART_MspInit+0x138>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013ee:	2320      	movs	r3, #32
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013fe:	2307      	movs	r3, #7
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4813      	ldr	r0, [pc, #76]	; (8001458 <HAL_UART_MspInit+0x144>)
 800140a:	f000 fb65 	bl	8001ad8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800140e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001420:	2307      	movs	r3, #7
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <HAL_UART_MspInit+0x148>)
 800142c:	f000 fb54 	bl	8001ad8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2027      	movs	r0, #39	; 0x27
 8001436:	f000 fa86 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800143a:	2027      	movs	r0, #39	; 0x27
 800143c:	f000 fa9f 	bl	800197e <HAL_NVIC_EnableIRQ>
}
 8001440:	bf00      	nop
 8001442:	3730      	adds	r7, #48	; 0x30
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40004400 	.word	0x40004400
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000
 8001454:	40004800 	.word	0x40004800
 8001458:	40020800 	.word	0x40020800
 800145c:	40020400 	.word	0x40020400

08001460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001498 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001464:	480d      	ldr	r0, [pc, #52]	; (800149c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001466:	490e      	ldr	r1, [pc, #56]	; (80014a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001468:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800147c:	4c0b      	ldr	r4, [pc, #44]	; (80014ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800148a:	f7ff fedd 	bl	8001248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148e:	f003 fda9 	bl	8004fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001492:	f7ff fd0b 	bl	8000eac <main>
  bx  lr    
 8001496:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001498:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80014a4:	08005dac 	.word	0x08005dac
  ldr r2, =_sbss
 80014a8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80014ac:	2000035c 	.word	0x2000035c

080014b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC_IRQHandler>
	...

080014b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_Init+0x40>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <HAL_Init+0x40>)
 80014be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_Init+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <HAL_Init+0x40>)
 80014ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_Init+0x40>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_Init+0x40>)
 80014d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 fa27 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 f808 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e8:	f7ff fd9c 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023c00 	.word	0x40023c00

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x54>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x58>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fa3f 	bl	800199a <HAL_SYSTICK_Config>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e00e      	b.n	8001544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d80a      	bhi.n	8001542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f000 fa07 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001538:	4a06      	ldr	r2, [pc, #24]	; (8001554 <HAL_InitTick+0x5c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000002c 	.word	0x2000002c
 8001550:	20000034 	.word	0x20000034
 8001554:	20000030 	.word	0x20000030

08001558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x20>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x24>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_IncTick+0x24>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000034 	.word	0x20000034
 800157c:	2000020c 	.word	0x2000020c

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <HAL_GetTick+0x14>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	2000020c 	.word	0x2000020c

08001598 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0ed      	b.n	8001786 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fa80 	bl	8000abc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015cc:	f7ff ffd8 	bl	8001580 <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015d2:	e012      	b.n	80015fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015d4:	f7ff ffd4 	bl	8001580 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b0a      	cmp	r3, #10
 80015e0:	d90b      	bls.n	80015fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2205      	movs	r2, #5
 80015f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0c5      	b.n	8001786 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0e5      	beq.n	80015d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0202 	bic.w	r2, r2, #2
 8001616:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001618:	f7ff ffb2 	bl	8001580 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800161e:	e012      	b.n	8001646 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001620:	f7ff ffae 	bl	8001580 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b0a      	cmp	r3, #10
 800162c:	d90b      	bls.n	8001646 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2205      	movs	r2, #5
 800163e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e09f      	b.n	8001786 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1e5      	bne.n	8001620 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7e1b      	ldrb	r3, [r3, #24]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d108      	bne.n	800166e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e007      	b.n	800167e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7e5b      	ldrb	r3, [r3, #25]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d108      	bne.n	8001698 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e007      	b.n	80016a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7e9b      	ldrb	r3, [r3, #26]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d108      	bne.n	80016c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0220 	orr.w	r2, r2, #32
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e007      	b.n	80016d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0220 	bic.w	r2, r2, #32
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7edb      	ldrb	r3, [r3, #27]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d108      	bne.n	80016ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0210 	bic.w	r2, r2, #16
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e007      	b.n	80016fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0210 	orr.w	r2, r2, #16
 80016fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7f1b      	ldrb	r3, [r3, #28]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d108      	bne.n	8001716 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0208 	orr.w	r2, r2, #8
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e007      	b.n	8001726 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0208 	bic.w	r2, r2, #8
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7f5b      	ldrb	r3, [r3, #29]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d108      	bne.n	8001740 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0204 	orr.w	r2, r2, #4
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	e007      	b.n	8001750 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0204 	bic.w	r2, r2, #4
 800174e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	ea42 0103 	orr.w	r1, r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	1e5a      	subs	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff29 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff3e 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff31 	bl	80017f4 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff fdde 	bl	8001580 <HAL_GetTick>
 80019c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d008      	beq.n	80019e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e052      	b.n	8001a8a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0216 	bic.w	r2, r2, #22
 80019f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a02:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d103      	bne.n	8001a14 <HAL_DMA_Abort+0x62>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d007      	beq.n	8001a24 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0208 	bic.w	r2, r2, #8
 8001a22:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a34:	e013      	b.n	8001a5e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a36:	f7ff fda3 	bl	8001580 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d90c      	bls.n	8001a5e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2220      	movs	r2, #32
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e015      	b.n	8001a8a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1e4      	bne.n	8001a36 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	223f      	movs	r2, #63	; 0x3f
 8001a72:	409a      	lsls	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d004      	beq.n	8001ab0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e00c      	b.n	8001aca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2205      	movs	r2, #5
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	e165      	b.n	8001dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af4:	2201      	movs	r2, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	f040 8154 	bne.w	8001dba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d005      	beq.n	8001b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d130      	bne.n	8001b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d017      	beq.n	8001bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d123      	bne.n	8001c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	08da      	lsrs	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3208      	adds	r2, #8
 8001c16:	69b9      	ldr	r1, [r7, #24]
 8001c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0203 	and.w	r2, r3, #3
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80ae 	beq.w	8001dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b5d      	ldr	r3, [pc, #372]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a5c      	ldr	r2, [pc, #368]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <HAL_GPIO_Init+0x300>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c7a:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4f      	ldr	r2, [pc, #316]	; (8001de0 <HAL_GPIO_Init+0x308>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d025      	beq.n	8001cf2 <HAL_GPIO_Init+0x21a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4e      	ldr	r2, [pc, #312]	; (8001de4 <HAL_GPIO_Init+0x30c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d01f      	beq.n	8001cee <HAL_GPIO_Init+0x216>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4d      	ldr	r2, [pc, #308]	; (8001de8 <HAL_GPIO_Init+0x310>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d019      	beq.n	8001cea <HAL_GPIO_Init+0x212>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4c      	ldr	r2, [pc, #304]	; (8001dec <HAL_GPIO_Init+0x314>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0x20e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4b      	ldr	r2, [pc, #300]	; (8001df0 <HAL_GPIO_Init+0x318>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00d      	beq.n	8001ce2 <HAL_GPIO_Init+0x20a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4a      	ldr	r2, [pc, #296]	; (8001df4 <HAL_GPIO_Init+0x31c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <HAL_GPIO_Init+0x206>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a49      	ldr	r2, [pc, #292]	; (8001df8 <HAL_GPIO_Init+0x320>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_GPIO_Init+0x202>
 8001cd6:	2306      	movs	r3, #6
 8001cd8:	e00c      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001cda:	2307      	movs	r3, #7
 8001cdc:	e00a      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001cde:	2305      	movs	r3, #5
 8001ce0:	e008      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e004      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e002      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_GPIO_Init+0x21c>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	f002 0203 	and.w	r2, r2, #3
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	4093      	lsls	r3, r2
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d04:	4935      	ldr	r1, [pc, #212]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d12:	4b3a      	ldr	r3, [pc, #232]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d36:	4a31      	ldr	r2, [pc, #196]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d3c:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d60:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d66:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d8a:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db4:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <HAL_GPIO_Init+0x324>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b0f      	cmp	r3, #15
 8001dc4:	f67f ae96 	bls.w	8001af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	40020000 	.word	0x40020000
 8001de4:	40020400 	.word	0x40020400
 8001de8:	40020800 	.word	0x40020800
 8001dec:	40020c00 	.word	0x40020c00
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40021400 	.word	0x40021400
 8001df8:	40021800 	.word	0x40021800
 8001dfc:	40013c00 	.word	0x40013c00

08001e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e10:	787b      	ldrb	r3, [r7, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e1c:	e003      	b.n	8001e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	041a      	lsls	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	619a      	str	r2, [r3, #24]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e12b      	b.n	800209e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe ff12 	bl	8000c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2224      	movs	r2, #36	; 0x24
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e98:	f001 f854 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 8001e9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4a81      	ldr	r2, [pc, #516]	; (80020a8 <HAL_I2C_Init+0x274>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d807      	bhi.n	8001eb8 <HAL_I2C_Init+0x84>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4a80      	ldr	r2, [pc, #512]	; (80020ac <HAL_I2C_Init+0x278>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	bf94      	ite	ls
 8001eb0:	2301      	movls	r3, #1
 8001eb2:	2300      	movhi	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	e006      	b.n	8001ec6 <HAL_I2C_Init+0x92>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4a7d      	ldr	r2, [pc, #500]	; (80020b0 <HAL_I2C_Init+0x27c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	bf94      	ite	ls
 8001ec0:	2301      	movls	r3, #1
 8001ec2:	2300      	movhi	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0e7      	b.n	800209e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4a78      	ldr	r2, [pc, #480]	; (80020b4 <HAL_I2C_Init+0x280>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0c9b      	lsrs	r3, r3, #18
 8001ed8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a6a      	ldr	r2, [pc, #424]	; (80020a8 <HAL_I2C_Init+0x274>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d802      	bhi.n	8001f08 <HAL_I2C_Init+0xd4>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	3301      	adds	r3, #1
 8001f06:	e009      	b.n	8001f1c <HAL_I2C_Init+0xe8>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	4a69      	ldr	r2, [pc, #420]	; (80020b8 <HAL_I2C_Init+0x284>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	099b      	lsrs	r3, r3, #6
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	430b      	orrs	r3, r1
 8001f22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	495c      	ldr	r1, [pc, #368]	; (80020a8 <HAL_I2C_Init+0x274>)
 8001f38:	428b      	cmp	r3, r1
 8001f3a:	d819      	bhi.n	8001f70 <HAL_I2C_Init+0x13c>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1e59      	subs	r1, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f4a:	1c59      	adds	r1, r3, #1
 8001f4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f50:	400b      	ands	r3, r1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00a      	beq.n	8001f6c <HAL_I2C_Init+0x138>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1e59      	subs	r1, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6a:	e051      	b.n	8002010 <HAL_I2C_Init+0x1dc>
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	e04f      	b.n	8002010 <HAL_I2C_Init+0x1dc>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d111      	bne.n	8001f9c <HAL_I2C_Init+0x168>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1e58      	subs	r0, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	440b      	add	r3, r1
 8001f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	e012      	b.n	8001fc2 <HAL_I2C_Init+0x18e>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1e58      	subs	r0, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	0099      	lsls	r1, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bf0c      	ite	eq
 8001fbc:	2301      	moveq	r3, #1
 8001fbe:	2300      	movne	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Init+0x196>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e022      	b.n	8002010 <HAL_I2C_Init+0x1dc>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_I2C_Init+0x1bc>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1e58      	subs	r0, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	440b      	add	r3, r1
 8001fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fee:	e00f      	b.n	8002010 <HAL_I2C_Init+0x1dc>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1e58      	subs	r0, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	0099      	lsls	r1, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	fbb0 f3f3 	udiv	r3, r0, r3
 8002006:	3301      	adds	r3, #1
 8002008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	6809      	ldr	r1, [r1, #0]
 8002014:	4313      	orrs	r3, r2
 8002016:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800203e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6911      	ldr	r1, [r2, #16]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68d2      	ldr	r2, [r2, #12]
 800204a:	4311      	orrs	r1, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	430b      	orrs	r3, r1
 8002052:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	000186a0 	.word	0x000186a0
 80020ac:	001e847f 	.word	0x001e847f
 80020b0:	003d08ff 	.word	0x003d08ff
 80020b4:	431bde83 	.word	0x431bde83
 80020b8:	10624dd3 	.word	0x10624dd3

080020bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	461a      	mov	r2, r3
 80020c8:	460b      	mov	r3, r1
 80020ca:	817b      	strh	r3, [r7, #10]
 80020cc:	4613      	mov	r3, r2
 80020ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff fa56 	bl	8001580 <HAL_GetTick>
 80020d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b20      	cmp	r3, #32
 80020e0:	f040 80e0 	bne.w	80022a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2319      	movs	r3, #25
 80020ea:	2201      	movs	r2, #1
 80020ec:	4970      	ldr	r1, [pc, #448]	; (80022b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 fc58 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020fa:	2302      	movs	r3, #2
 80020fc:	e0d3      	b.n	80022a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_I2C_Master_Transmit+0x50>
 8002108:	2302      	movs	r3, #2
 800210a:	e0cc      	b.n	80022a6 <HAL_I2C_Master_Transmit+0x1ea>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d007      	beq.n	8002132 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0201 	orr.w	r2, r2, #1
 8002130:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002140:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2221      	movs	r2, #33	; 0x21
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2210      	movs	r2, #16
 800214e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	893a      	ldrh	r2, [r7, #8]
 8002162:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002174:	8979      	ldrh	r1, [r7, #10]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	6a3a      	ldr	r2, [r7, #32]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fac2 	bl	8002704 <I2C_MasterRequestWrite>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e08d      	b.n	80022a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021a0:	e066      	b.n	8002270 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	6a39      	ldr	r1, [r7, #32]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fcd2 	bl	8002b50 <I2C_WaitOnTXEFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00d      	beq.n	80021ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d107      	bne.n	80021ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e06b      	b.n	80022a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b04      	cmp	r3, #4
 800220a:	d11b      	bne.n	8002244 <HAL_I2C_Master_Transmit+0x188>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	d017      	beq.n	8002244 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	6a39      	ldr	r1, [r7, #32]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 fcc2 	bl	8002bd2 <I2C_WaitOnBTFFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00d      	beq.n	8002270 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	2b04      	cmp	r3, #4
 800225a:	d107      	bne.n	800226c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e01a      	b.n	80022a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	2b00      	cmp	r3, #0
 8002276:	d194      	bne.n	80021a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	e000      	b.n	80022a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
  }
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	00100002 	.word	0x00100002
 80022b4:	ffff0000 	.word	0xffff0000

080022b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08c      	sub	sp, #48	; 0x30
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	461a      	mov	r2, r3
 80022c4:	460b      	mov	r3, r1
 80022c6:	817b      	strh	r3, [r7, #10]
 80022c8:	4613      	mov	r3, r2
 80022ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff f958 	bl	8001580 <HAL_GetTick>
 80022d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b20      	cmp	r3, #32
 80022dc:	f040 820b 	bne.w	80026f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2319      	movs	r3, #25
 80022e6:	2201      	movs	r2, #1
 80022e8:	497c      	ldr	r1, [pc, #496]	; (80024dc <HAL_I2C_Master_Receive+0x224>)
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fb5a 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80022f6:	2302      	movs	r3, #2
 80022f8:	e1fe      	b.n	80026f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_I2C_Master_Receive+0x50>
 8002304:	2302      	movs	r3, #2
 8002306:	e1f7      	b.n	80026f8 <HAL_I2C_Master_Receive+0x440>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b01      	cmp	r3, #1
 800231c:	d007      	beq.n	800232e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0201 	orr.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2222      	movs	r2, #34	; 0x22
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2210      	movs	r2, #16
 800234a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	893a      	ldrh	r2, [r7, #8]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4a5c      	ldr	r2, [pc, #368]	; (80024e0 <HAL_I2C_Master_Receive+0x228>)
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002370:	8979      	ldrh	r1, [r7, #10]
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fa46 	bl	8002808 <I2C_MasterRequestRead>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e1b8      	b.n	80026f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	2b00      	cmp	r3, #0
 800238c:	d113      	bne.n	80023b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	623b      	str	r3, [r7, #32]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	623b      	str	r3, [r7, #32]
 80023a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	e18c      	b.n	80026d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d11b      	bne.n	80023f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e16c      	b.n	80026d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d11b      	bne.n	8002436 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800240c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800241c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	e14c      	b.n	80026d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002444:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800245c:	e138      	b.n	80026d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002462:	2b03      	cmp	r3, #3
 8002464:	f200 80f1 	bhi.w	800264a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	2b01      	cmp	r3, #1
 800246e:	d123      	bne.n	80024b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002472:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fbed 	bl	8002c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e139      	b.n	80026f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024b6:	e10b      	b.n	80026d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d14e      	bne.n	800255e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	2200      	movs	r2, #0
 80024c8:	4906      	ldr	r1, [pc, #24]	; (80024e4 <HAL_I2C_Master_Receive+0x22c>)
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fa6a 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e10e      	b.n	80026f8 <HAL_I2C_Master_Receive+0x440>
 80024da:	bf00      	nop
 80024dc:	00100002 	.word	0x00100002
 80024e0:	ffff0000 	.word	0xffff0000
 80024e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800255c:	e0b8      	b.n	80026d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	2200      	movs	r2, #0
 8002566:	4966      	ldr	r1, [pc, #408]	; (8002700 <HAL_I2C_Master_Receive+0x448>)
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fa1b 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0bf      	b.n	80026f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	2200      	movs	r2, #0
 80025c2:	494f      	ldr	r1, [pc, #316]	; (8002700 <HAL_I2C_Master_Receive+0x448>)
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f9ed 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e091      	b.n	80026f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002648:	e042      	b.n	80026d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800264a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fb00 	bl	8002c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e04c      	b.n	80026f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b04      	cmp	r3, #4
 800269c:	d118      	bne.n	80026d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f47f aec2 	bne.w	800245e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3728      	adds	r7, #40	; 0x28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	00010004 	.word	0x00010004

08002704 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	460b      	mov	r3, r1
 8002712:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d006      	beq.n	800272e <I2C_MasterRequestWrite+0x2a>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d003      	beq.n	800272e <I2C_MasterRequestWrite+0x2a>
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800272c:	d108      	bne.n	8002740 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e00b      	b.n	8002758 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	2b12      	cmp	r3, #18
 8002746:	d107      	bne.n	8002758 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002756:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f91d 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00d      	beq.n	800278c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277e:	d103      	bne.n	8002788 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002786:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e035      	b.n	80027f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002794:	d108      	bne.n	80027a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002796:	897b      	ldrh	r3, [r7, #10]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027a4:	611a      	str	r2, [r3, #16]
 80027a6:	e01b      	b.n	80027e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027a8:	897b      	ldrh	r3, [r7, #10]
 80027aa:	11db      	asrs	r3, r3, #7
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f003 0306 	and.w	r3, r3, #6
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f063 030f 	orn	r3, r3, #15
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	490e      	ldr	r1, [pc, #56]	; (8002800 <I2C_MasterRequestWrite+0xfc>)
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f943 	bl	8002a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e010      	b.n	80027f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027d6:	897b      	ldrh	r3, [r7, #10]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4907      	ldr	r1, [pc, #28]	; (8002804 <I2C_MasterRequestWrite+0x100>)
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f933 	bl	8002a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	00010008 	.word	0x00010008
 8002804:	00010002 	.word	0x00010002

08002808 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	460b      	mov	r3, r1
 8002816:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800282c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d006      	beq.n	8002842 <I2C_MasterRequestRead+0x3a>
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d003      	beq.n	8002842 <I2C_MasterRequestRead+0x3a>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002840:	d108      	bne.n	8002854 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e00b      	b.n	800286c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	2b11      	cmp	r3, #17
 800285a:	d107      	bne.n	800286c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800286a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f893 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00d      	beq.n	80028a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002892:	d103      	bne.n	800289c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800289a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e079      	b.n	8002994 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028a8:	d108      	bne.n	80028bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028aa:	897b      	ldrh	r3, [r7, #10]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	611a      	str	r2, [r3, #16]
 80028ba:	e05f      	b.n	800297c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028bc:	897b      	ldrh	r3, [r7, #10]
 80028be:	11db      	asrs	r3, r3, #7
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 0306 	and.w	r3, r3, #6
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f063 030f 	orn	r3, r3, #15
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	4930      	ldr	r1, [pc, #192]	; (800299c <I2C_MasterRequestRead+0x194>)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f8b9 	bl	8002a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e054      	b.n	8002994 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028ea:	897b      	ldrh	r3, [r7, #10]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4929      	ldr	r1, [pc, #164]	; (80029a0 <I2C_MasterRequestRead+0x198>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f8a9 	bl	8002a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e044      	b.n	8002994 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800292e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f831 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002956:	d103      	bne.n	8002960 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e017      	b.n	8002994 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002964:	897b      	ldrh	r3, [r7, #10]
 8002966:	11db      	asrs	r3, r3, #7
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f003 0306 	and.w	r3, r3, #6
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f063 030e 	orn	r3, r3, #14
 8002974:	b2da      	uxtb	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4907      	ldr	r1, [pc, #28]	; (80029a0 <I2C_MasterRequestRead+0x198>)
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f865 	bl	8002a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	00010008 	.word	0x00010008
 80029a0:	00010002 	.word	0x00010002

080029a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b4:	e025      	b.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d021      	beq.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7fe fddf 	bl	8001580 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d116      	bne.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f043 0220 	orr.w	r2, r3, #32
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e023      	b.n	8002a4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10d      	bne.n	8002a28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4013      	ands	r3, r2
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bf0c      	ite	eq
 8002a1e:	2301      	moveq	r3, #1
 8002a20:	2300      	movne	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	e00c      	b.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4013      	ands	r3, r2
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf0c      	ite	eq
 8002a3a:	2301      	moveq	r3, #1
 8002a3c:	2300      	movne	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d0b6      	beq.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a60:	e051      	b.n	8002b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a70:	d123      	bne.n	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f043 0204 	orr.w	r2, r3, #4
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e046      	b.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d021      	beq.n	8002b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac2:	f7fe fd5d 	bl	8001580 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d302      	bcc.n	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d116      	bne.n	8002b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f043 0220 	orr.w	r2, r3, #32
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e020      	b.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d10c      	bne.n	8002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf14      	ite	ne
 8002b22:	2301      	movne	r3, #1
 8002b24:	2300      	moveq	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	e00b      	b.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	43da      	mvns	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	4013      	ands	r3, r2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf14      	ite	ne
 8002b3c:	2301      	movne	r3, #1
 8002b3e:	2300      	moveq	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d18d      	bne.n	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b5c:	e02d      	b.n	8002bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f8ce 	bl	8002d00 <I2C_IsAcknowledgeFailed>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e02d      	b.n	8002bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d021      	beq.n	8002bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b76:	f7fe fd03 	bl	8001580 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d302      	bcc.n	8002b8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d116      	bne.n	8002bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f043 0220 	orr.w	r2, r3, #32
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e007      	b.n	8002bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc4:	2b80      	cmp	r3, #128	; 0x80
 8002bc6:	d1ca      	bne.n	8002b5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bde:	e02d      	b.n	8002c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f88d 	bl	8002d00 <I2C_IsAcknowledgeFailed>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e02d      	b.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf6:	d021      	beq.n	8002c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf8:	f7fe fcc2 	bl	8001580 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d302      	bcc.n	8002c0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e007      	b.n	8002c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d1ca      	bne.n	8002be0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c60:	e042      	b.n	8002ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b10      	cmp	r3, #16
 8002c6e:	d119      	bne.n	8002ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0210 	mvn.w	r2, #16
 8002c78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e029      	b.n	8002cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca4:	f7fe fc6c 	bl	8001580 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d302      	bcc.n	8002cba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e007      	b.n	8002cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	d1b5      	bne.n	8002c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d16:	d11b      	bne.n	8002d50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f043 0204 	orr.w	r2, r3, #4
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0cc      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d74:	4b68      	ldr	r3, [pc, #416]	; (8002f18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d90c      	bls.n	8002d9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d82:	4b65      	ldr	r3, [pc, #404]	; (8002f18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b63      	ldr	r3, [pc, #396]	; (8002f18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0b8      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d020      	beq.n	8002dea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db4:	4b59      	ldr	r3, [pc, #356]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4a58      	ldr	r2, [pc, #352]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dcc:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4a52      	ldr	r2, [pc, #328]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd8:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	494d      	ldr	r1, [pc, #308]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d044      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d119      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e07f      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d003      	beq.n	8002e1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d107      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1e:	4b3f      	ldr	r3, [pc, #252]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e06f      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e067      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e3e:	4b37      	ldr	r3, [pc, #220]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f023 0203 	bic.w	r2, r3, #3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4934      	ldr	r1, [pc, #208]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e50:	f7fe fb96 	bl	8001580 <HAL_GetTick>
 8002e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e58:	f7fe fb92 	bl	8001580 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e04f      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6e:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 020c 	and.w	r2, r3, #12
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d1eb      	bne.n	8002e58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e80:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_RCC_ClockConfig+0x1b8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d20c      	bcs.n	8002ea8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e032      	b.n	8002f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4916      	ldr	r1, [pc, #88]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed2:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	490e      	ldr	r1, [pc, #56]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ee6:	f000 f855 	bl	8002f94 <HAL_RCC_GetSysClockFreq>
 8002eea:	4602      	mov	r2, r0
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	490a      	ldr	r1, [pc, #40]	; (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	5ccb      	ldrb	r3, [r1, r3]
 8002efa:	fa22 f303 	lsr.w	r3, r2, r3
 8002efe:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_ClockConfig+0x1c8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe faf6 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40023c00 	.word	0x40023c00
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	08005c50 	.word	0x08005c50
 8002f24:	2000002c 	.word	0x2000002c
 8002f28:	20000030 	.word	0x20000030

08002f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f32:	681b      	ldr	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	2000002c 	.word	0x2000002c

08002f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f48:	f7ff fff0 	bl	8002f2c <HAL_RCC_GetHCLKFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	0a9b      	lsrs	r3, r3, #10
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	4903      	ldr	r1, [pc, #12]	; (8002f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f5a:	5ccb      	ldrb	r3, [r1, r3]
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	08005c60 	.word	0x08005c60

08002f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f70:	f7ff ffdc 	bl	8002f2c <HAL_RCC_GetHCLKFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	0b5b      	lsrs	r3, r3, #13
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4903      	ldr	r1, [pc, #12]	; (8002f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	08005c60 	.word	0x08005c60

08002f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f98:	b0ae      	sub	sp, #184	; 0xb8
 8002f9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fba:	4bcb      	ldr	r3, [pc, #812]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	f200 8206 	bhi.w	80033d4 <HAL_RCC_GetSysClockFreq+0x440>
 8002fc8:	a201      	add	r2, pc, #4	; (adr r2, 8002fd0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fce:	bf00      	nop
 8002fd0:	08003005 	.word	0x08003005
 8002fd4:	080033d5 	.word	0x080033d5
 8002fd8:	080033d5 	.word	0x080033d5
 8002fdc:	080033d5 	.word	0x080033d5
 8002fe0:	0800300d 	.word	0x0800300d
 8002fe4:	080033d5 	.word	0x080033d5
 8002fe8:	080033d5 	.word	0x080033d5
 8002fec:	080033d5 	.word	0x080033d5
 8002ff0:	08003015 	.word	0x08003015
 8002ff4:	080033d5 	.word	0x080033d5
 8002ff8:	080033d5 	.word	0x080033d5
 8002ffc:	080033d5 	.word	0x080033d5
 8003000:	08003205 	.word	0x08003205
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003004:	4bb9      	ldr	r3, [pc, #740]	; (80032ec <HAL_RCC_GetSysClockFreq+0x358>)
 8003006:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800300a:	e1e7      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800300c:	4bb8      	ldr	r3, [pc, #736]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800300e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003012:	e1e3      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003014:	4bb4      	ldr	r3, [pc, #720]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800301c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003020:	4bb1      	ldr	r3, [pc, #708]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d071      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302c:	4bae      	ldr	r3, [pc, #696]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	2200      	movs	r2, #0
 8003034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003038:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800303c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003044:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800304e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003052:	4622      	mov	r2, r4
 8003054:	462b      	mov	r3, r5
 8003056:	f04f 0000 	mov.w	r0, #0
 800305a:	f04f 0100 	mov.w	r1, #0
 800305e:	0159      	lsls	r1, r3, #5
 8003060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003064:	0150      	lsls	r0, r2, #5
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4621      	mov	r1, r4
 800306c:	1a51      	subs	r1, r2, r1
 800306e:	6439      	str	r1, [r7, #64]	; 0x40
 8003070:	4629      	mov	r1, r5
 8003072:	eb63 0301 	sbc.w	r3, r3, r1
 8003076:	647b      	str	r3, [r7, #68]	; 0x44
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003084:	4649      	mov	r1, r9
 8003086:	018b      	lsls	r3, r1, #6
 8003088:	4641      	mov	r1, r8
 800308a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800308e:	4641      	mov	r1, r8
 8003090:	018a      	lsls	r2, r1, #6
 8003092:	4641      	mov	r1, r8
 8003094:	1a51      	subs	r1, r2, r1
 8003096:	63b9      	str	r1, [r7, #56]	; 0x38
 8003098:	4649      	mov	r1, r9
 800309a:	eb63 0301 	sbc.w	r3, r3, r1
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80030ac:	4649      	mov	r1, r9
 80030ae:	00cb      	lsls	r3, r1, #3
 80030b0:	4641      	mov	r1, r8
 80030b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030b6:	4641      	mov	r1, r8
 80030b8:	00ca      	lsls	r2, r1, #3
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	4603      	mov	r3, r0
 80030c0:	4622      	mov	r2, r4
 80030c2:	189b      	adds	r3, r3, r2
 80030c4:	633b      	str	r3, [r7, #48]	; 0x30
 80030c6:	462b      	mov	r3, r5
 80030c8:	460a      	mov	r2, r1
 80030ca:	eb42 0303 	adc.w	r3, r2, r3
 80030ce:	637b      	str	r3, [r7, #52]	; 0x34
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030dc:	4629      	mov	r1, r5
 80030de:	024b      	lsls	r3, r1, #9
 80030e0:	4621      	mov	r1, r4
 80030e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030e6:	4621      	mov	r1, r4
 80030e8:	024a      	lsls	r2, r1, #9
 80030ea:	4610      	mov	r0, r2
 80030ec:	4619      	mov	r1, r3
 80030ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003100:	f7fd f8e6 	bl	80002d0 <__aeabi_uldivmod>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4613      	mov	r3, r2
 800310a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800310e:	e067      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003110:	4b75      	ldr	r3, [pc, #468]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	2200      	movs	r2, #0
 8003118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800311c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003120:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003128:	67bb      	str	r3, [r7, #120]	; 0x78
 800312a:	2300      	movs	r3, #0
 800312c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800312e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003132:	4622      	mov	r2, r4
 8003134:	462b      	mov	r3, r5
 8003136:	f04f 0000 	mov.w	r0, #0
 800313a:	f04f 0100 	mov.w	r1, #0
 800313e:	0159      	lsls	r1, r3, #5
 8003140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003144:	0150      	lsls	r0, r2, #5
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4621      	mov	r1, r4
 800314c:	1a51      	subs	r1, r2, r1
 800314e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003150:	4629      	mov	r1, r5
 8003152:	eb63 0301 	sbc.w	r3, r3, r1
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003164:	4649      	mov	r1, r9
 8003166:	018b      	lsls	r3, r1, #6
 8003168:	4641      	mov	r1, r8
 800316a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800316e:	4641      	mov	r1, r8
 8003170:	018a      	lsls	r2, r1, #6
 8003172:	4641      	mov	r1, r8
 8003174:	ebb2 0a01 	subs.w	sl, r2, r1
 8003178:	4649      	mov	r1, r9
 800317a:	eb63 0b01 	sbc.w	fp, r3, r1
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800318a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800318e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003192:	4692      	mov	sl, r2
 8003194:	469b      	mov	fp, r3
 8003196:	4623      	mov	r3, r4
 8003198:	eb1a 0303 	adds.w	r3, sl, r3
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	462b      	mov	r3, r5
 80031a0:	eb4b 0303 	adc.w	r3, fp, r3
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80031b2:	4629      	mov	r1, r5
 80031b4:	028b      	lsls	r3, r1, #10
 80031b6:	4621      	mov	r1, r4
 80031b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031bc:	4621      	mov	r1, r4
 80031be:	028a      	lsls	r2, r1, #10
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031c8:	2200      	movs	r2, #0
 80031ca:	673b      	str	r3, [r7, #112]	; 0x70
 80031cc:	677a      	str	r2, [r7, #116]	; 0x74
 80031ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80031d2:	f7fd f87d 	bl	80002d0 <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4613      	mov	r3, r2
 80031dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031e0:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	3301      	adds	r3, #1
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80031f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003202:	e0eb      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003204:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800320c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d06b      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321c:	4b32      	ldr	r3, [pc, #200]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	099b      	lsrs	r3, r3, #6
 8003222:	2200      	movs	r2, #0
 8003224:	66bb      	str	r3, [r7, #104]	; 0x68
 8003226:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800322a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322e:	663b      	str	r3, [r7, #96]	; 0x60
 8003230:	2300      	movs	r3, #0
 8003232:	667b      	str	r3, [r7, #100]	; 0x64
 8003234:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003238:	4622      	mov	r2, r4
 800323a:	462b      	mov	r3, r5
 800323c:	f04f 0000 	mov.w	r0, #0
 8003240:	f04f 0100 	mov.w	r1, #0
 8003244:	0159      	lsls	r1, r3, #5
 8003246:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800324a:	0150      	lsls	r0, r2, #5
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4621      	mov	r1, r4
 8003252:	1a51      	subs	r1, r2, r1
 8003254:	61b9      	str	r1, [r7, #24]
 8003256:	4629      	mov	r1, r5
 8003258:	eb63 0301 	sbc.w	r3, r3, r1
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800326a:	4659      	mov	r1, fp
 800326c:	018b      	lsls	r3, r1, #6
 800326e:	4651      	mov	r1, sl
 8003270:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003274:	4651      	mov	r1, sl
 8003276:	018a      	lsls	r2, r1, #6
 8003278:	4651      	mov	r1, sl
 800327a:	ebb2 0801 	subs.w	r8, r2, r1
 800327e:	4659      	mov	r1, fp
 8003280:	eb63 0901 	sbc.w	r9, r3, r1
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003290:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003294:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003298:	4690      	mov	r8, r2
 800329a:	4699      	mov	r9, r3
 800329c:	4623      	mov	r3, r4
 800329e:	eb18 0303 	adds.w	r3, r8, r3
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	462b      	mov	r3, r5
 80032a6:	eb49 0303 	adc.w	r3, r9, r3
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80032b8:	4629      	mov	r1, r5
 80032ba:	024b      	lsls	r3, r1, #9
 80032bc:	4621      	mov	r1, r4
 80032be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032c2:	4621      	mov	r1, r4
 80032c4:	024a      	lsls	r2, r1, #9
 80032c6:	4610      	mov	r0, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032ce:	2200      	movs	r2, #0
 80032d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80032d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80032d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032d8:	f7fc fffa 	bl	80002d0 <__aeabi_uldivmod>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4613      	mov	r3, r2
 80032e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032e6:	e065      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x420>
 80032e8:	40023800 	.word	0x40023800
 80032ec:	00f42400 	.word	0x00f42400
 80032f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f4:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <HAL_RCC_GetSysClockFreq+0x458>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	099b      	lsrs	r3, r3, #6
 80032fa:	2200      	movs	r2, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	4611      	mov	r1, r2
 8003300:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003304:	653b      	str	r3, [r7, #80]	; 0x50
 8003306:	2300      	movs	r3, #0
 8003308:	657b      	str	r3, [r7, #84]	; 0x54
 800330a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800330e:	4642      	mov	r2, r8
 8003310:	464b      	mov	r3, r9
 8003312:	f04f 0000 	mov.w	r0, #0
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	0159      	lsls	r1, r3, #5
 800331c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003320:	0150      	lsls	r0, r2, #5
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4641      	mov	r1, r8
 8003328:	1a51      	subs	r1, r2, r1
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	4649      	mov	r1, r9
 800332e:	eb63 0301 	sbc.w	r3, r3, r1
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003340:	4659      	mov	r1, fp
 8003342:	018b      	lsls	r3, r1, #6
 8003344:	4651      	mov	r1, sl
 8003346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800334a:	4651      	mov	r1, sl
 800334c:	018a      	lsls	r2, r1, #6
 800334e:	4651      	mov	r1, sl
 8003350:	1a54      	subs	r4, r2, r1
 8003352:	4659      	mov	r1, fp
 8003354:	eb63 0501 	sbc.w	r5, r3, r1
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	00eb      	lsls	r3, r5, #3
 8003362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003366:	00e2      	lsls	r2, r4, #3
 8003368:	4614      	mov	r4, r2
 800336a:	461d      	mov	r5, r3
 800336c:	4643      	mov	r3, r8
 800336e:	18e3      	adds	r3, r4, r3
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	464b      	mov	r3, r9
 8003374:	eb45 0303 	adc.w	r3, r5, r3
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003386:	4629      	mov	r1, r5
 8003388:	028b      	lsls	r3, r1, #10
 800338a:	4621      	mov	r1, r4
 800338c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003390:	4621      	mov	r1, r4
 8003392:	028a      	lsls	r2, r1, #10
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800339c:	2200      	movs	r2, #0
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
 80033a0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80033a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033a6:	f7fc ff93 	bl	80002d0 <__aeabi_uldivmod>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4613      	mov	r3, r2
 80033b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033b4:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <HAL_RCC_GetSysClockFreq+0x458>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	0f1b      	lsrs	r3, r3, #28
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80033c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033d2:	e003      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80033d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	37b8      	adds	r7, #184	; 0xb8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	00f42400 	.word	0x00f42400

080033f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e28d      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8083 	beq.w	800351a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003414:	4b94      	ldr	r3, [pc, #592]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b04      	cmp	r3, #4
 800341e:	d019      	beq.n	8003454 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003420:	4b91      	ldr	r3, [pc, #580]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003428:	2b08      	cmp	r3, #8
 800342a:	d106      	bne.n	800343a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800342c:	4b8e      	ldr	r3, [pc, #568]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003438:	d00c      	beq.n	8003454 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343a:	4b8b      	ldr	r3, [pc, #556]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d112      	bne.n	800346c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003446:	4b88      	ldr	r3, [pc, #544]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003452:	d10b      	bne.n	800346c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	4b84      	ldr	r3, [pc, #528]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d05b      	beq.n	8003518 <HAL_RCC_OscConfig+0x124>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d157      	bne.n	8003518 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e25a      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d106      	bne.n	8003484 <HAL_RCC_OscConfig+0x90>
 8003476:	4b7c      	ldr	r3, [pc, #496]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7b      	ldr	r2, [pc, #492]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e01d      	b.n	80034c0 <HAL_RCC_OscConfig+0xcc>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0xb4>
 800348e:	4b76      	ldr	r3, [pc, #472]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a75      	ldr	r2, [pc, #468]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	4b73      	ldr	r3, [pc, #460]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a72      	ldr	r2, [pc, #456]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0xcc>
 80034a8:	4b6f      	ldr	r3, [pc, #444]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a6e      	ldr	r2, [pc, #440]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4b6c      	ldr	r3, [pc, #432]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a6b      	ldr	r2, [pc, #428]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d013      	beq.n	80034f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe f85a 	bl	8001580 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d0:	f7fe f856 	bl	8001580 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e21f      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	4b61      	ldr	r3, [pc, #388]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0xdc>
 80034ee:	e014      	b.n	800351a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe f846 	bl	8001580 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f8:	f7fe f842 	bl	8001580 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e20b      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	4b57      	ldr	r3, [pc, #348]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x104>
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d06f      	beq.n	8003606 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003526:	4b50      	ldr	r3, [pc, #320]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b00      	cmp	r3, #0
 8003530:	d017      	beq.n	8003562 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003532:	4b4d      	ldr	r3, [pc, #308]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800353a:	2b08      	cmp	r3, #8
 800353c:	d105      	bne.n	800354a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800353e:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003552:	2b0c      	cmp	r3, #12
 8003554:	d11c      	bne.n	8003590 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003556:	4b44      	ldr	r3, [pc, #272]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d116      	bne.n	8003590 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003562:	4b41      	ldr	r3, [pc, #260]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_RCC_OscConfig+0x186>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d001      	beq.n	800357a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e1d3      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357a:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4937      	ldr	r1, [pc, #220]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358e:	e03a      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003598:	4b34      	ldr	r3, [pc, #208]	; (800366c <HAL_RCC_OscConfig+0x278>)
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359e:	f7fd ffef 	bl	8001580 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a6:	f7fd ffeb 	bl	8001580 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e1b4      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b8:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c4:	4b28      	ldr	r3, [pc, #160]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4925      	ldr	r1, [pc, #148]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	600b      	str	r3, [r1, #0]
 80035d8:	e015      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035da:	4b24      	ldr	r3, [pc, #144]	; (800366c <HAL_RCC_OscConfig+0x278>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fd ffce 	bl	8001580 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e8:	f7fd ffca 	bl	8001580 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e193      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fa:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d036      	beq.n	8003680 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <HAL_RCC_OscConfig+0x27c>)
 800361c:	2201      	movs	r2, #1
 800361e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fd ffae 	bl	8001580 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003628:	f7fd ffaa 	bl	8001580 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e173      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363a:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 800363c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x234>
 8003646:	e01b      	b.n	8003680 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003648:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_RCC_OscConfig+0x27c>)
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fd ff97 	bl	8001580 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003654:	e00e      	b.n	8003674 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003656:	f7fd ff93 	bl	8001580 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d907      	bls.n	8003674 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e15c      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
 8003668:	40023800 	.word	0x40023800
 800366c:	42470000 	.word	0x42470000
 8003670:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003674:	4b8a      	ldr	r3, [pc, #552]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ea      	bne.n	8003656 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8097 	beq.w	80037bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368e:	2300      	movs	r3, #0
 8003690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003692:	4b83      	ldr	r3, [pc, #524]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	4b7f      	ldr	r3, [pc, #508]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a7e      	ldr	r2, [pc, #504]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b7c      	ldr	r3, [pc, #496]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036be:	4b79      	ldr	r3, [pc, #484]	; (80038a4 <HAL_RCC_OscConfig+0x4b0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d118      	bne.n	80036fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ca:	4b76      	ldr	r3, [pc, #472]	; (80038a4 <HAL_RCC_OscConfig+0x4b0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a75      	ldr	r2, [pc, #468]	; (80038a4 <HAL_RCC_OscConfig+0x4b0>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d6:	f7fd ff53 	bl	8001580 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036de:	f7fd ff4f 	bl	8001580 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e118      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f0:	4b6c      	ldr	r3, [pc, #432]	; (80038a4 <HAL_RCC_OscConfig+0x4b0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x31e>
 8003704:	4b66      	ldr	r3, [pc, #408]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	4a65      	ldr	r2, [pc, #404]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6713      	str	r3, [r2, #112]	; 0x70
 8003710:	e01c      	b.n	800374c <HAL_RCC_OscConfig+0x358>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b05      	cmp	r3, #5
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x340>
 800371a:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	4a60      	ldr	r2, [pc, #384]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	6713      	str	r3, [r2, #112]	; 0x70
 8003726:	4b5e      	ldr	r3, [pc, #376]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a5d      	ldr	r2, [pc, #372]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6713      	str	r3, [r2, #112]	; 0x70
 8003732:	e00b      	b.n	800374c <HAL_RCC_OscConfig+0x358>
 8003734:	4b5a      	ldr	r3, [pc, #360]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	4a59      	ldr	r2, [pc, #356]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	6713      	str	r3, [r2, #112]	; 0x70
 8003740:	4b57      	ldr	r3, [pc, #348]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003744:	4a56      	ldr	r2, [pc, #344]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003746:	f023 0304 	bic.w	r3, r3, #4
 800374a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d015      	beq.n	8003780 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fd ff14 	bl	8001580 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375a:	e00a      	b.n	8003772 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375c:	f7fd ff10 	bl	8001580 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f241 3288 	movw	r2, #5000	; 0x1388
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e0d7      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003772:	4b4b      	ldr	r3, [pc, #300]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0ee      	beq.n	800375c <HAL_RCC_OscConfig+0x368>
 800377e:	e014      	b.n	80037aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fd fefe 	bl	8001580 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003786:	e00a      	b.n	800379e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fd fefa 	bl	8001580 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e0c1      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379e:	4b40      	ldr	r3, [pc, #256]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1ee      	bne.n	8003788 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b0:	4b3b      	ldr	r3, [pc, #236]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	4a3a      	ldr	r2, [pc, #232]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80037b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80ad 	beq.w	8003920 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037c6:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d060      	beq.n	8003894 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d145      	bne.n	8003866 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <HAL_RCC_OscConfig+0x4b4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fd fece 	bl	8001580 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fd feca 	bl	8001580 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e093      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fa:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	019b      	lsls	r3, r3, #6
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	085b      	lsrs	r3, r3, #1
 800381e:	3b01      	subs	r3, #1
 8003820:	041b      	lsls	r3, r3, #16
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	061b      	lsls	r3, r3, #24
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	071b      	lsls	r3, r3, #28
 8003832:	491b      	ldr	r1, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_RCC_OscConfig+0x4b4>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fd fe9f 	bl	8001580 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003846:	f7fd fe9b 	bl	8001580 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e064      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x452>
 8003864:	e05c      	b.n	8003920 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_RCC_OscConfig+0x4b4>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fd fe88 	bl	8001580 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003874:	f7fd fe84 	bl	8001580 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e04d      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x480>
 8003892:	e045      	b.n	8003920 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d107      	bne.n	80038ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e040      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40007000 	.word	0x40007000
 80038a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038ac:	4b1f      	ldr	r3, [pc, #124]	; (800392c <HAL_RCC_OscConfig+0x538>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d030      	beq.n	800391c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d129      	bne.n	800391c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d122      	bne.n	800391c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038dc:	4013      	ands	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d119      	bne.n	800391c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	085b      	lsrs	r3, r3, #1
 80038f4:	3b01      	subs	r3, #1
 80038f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d10f      	bne.n	800391c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d107      	bne.n	800391c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800

08003930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e03f      	b.n	80039c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd fcdc 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2224      	movs	r2, #36	; 0x24
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 fddf 	bl	8004538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b08a      	sub	sp, #40	; 0x28
 80039ce:	af02      	add	r7, sp, #8
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d17c      	bne.n	8003ae4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <HAL_UART_Transmit+0x2c>
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e075      	b.n	8003ae6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Transmit+0x3e>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e06e      	b.n	8003ae6 <HAL_UART_Transmit+0x11c>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2221      	movs	r2, #33	; 0x21
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a1e:	f7fd fdaf 	bl	8001580 <HAL_GetTick>
 8003a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	88fa      	ldrh	r2, [r7, #6]
 8003a2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a38:	d108      	bne.n	8003a4c <HAL_UART_Transmit+0x82>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d104      	bne.n	8003a4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	e003      	b.n	8003a54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a5c:	e02a      	b.n	8003ab4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2200      	movs	r2, #0
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fb1f 	bl	80040ac <UART_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e036      	b.n	8003ae6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10b      	bne.n	8003a96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	3302      	adds	r3, #2
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	e007      	b.n	8003aa6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1cf      	bne.n	8003a5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2140      	movs	r1, #64	; 0x40
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 faef 	bl	80040ac <UART_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e006      	b.n	8003ae6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e000      	b.n	8003ae6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	4613      	mov	r3, r2
 8003afa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d11d      	bne.n	8003b44 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_UART_Receive_IT+0x26>
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e016      	b.n	8003b46 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_UART_Receive_IT+0x38>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e00f      	b.n	8003b46 <HAL_UART_Receive_IT+0x58>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	461a      	mov	r2, r3
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fb24 	bl	8004188 <UART_Start_Receive_IT>
 8003b40:	4603      	mov	r3, r0
 8003b42:	e000      	b.n	8003b46 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b0ba      	sub	sp, #232	; 0xe8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10f      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x66>
 8003ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fc07 	bl	80043c2 <UART_Receive_IT>
      return;
 8003bb4:	e256      	b.n	8004064 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 80de 	beq.w	8003d7c <HAL_UART_IRQHandler+0x22c>
 8003bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d106      	bne.n	8003bda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80d1 	beq.w	8003d7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_UART_IRQHandler+0xae>
 8003be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00b      	beq.n	8003c22 <HAL_UART_IRQHandler+0xd2>
 8003c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f043 0202 	orr.w	r2, r3, #2
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_UART_IRQHandler+0xf6>
 8003c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f043 0204 	orr.w	r2, r3, #4
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d011      	beq.n	8003c76 <HAL_UART_IRQHandler+0x126>
 8003c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d105      	bne.n	8003c6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f043 0208 	orr.w	r2, r3, #8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 81ed 	beq.w	800405a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_UART_IRQHandler+0x14e>
 8003c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fb92 	bl	80043c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d103      	bne.n	8003cca <HAL_UART_IRQHandler+0x17a>
 8003cc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d04f      	beq.n	8003d6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fa9a 	bl	8004204 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d141      	bne.n	8003d62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3314      	adds	r3, #20
 8003ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3314      	adds	r3, #20
 8003d06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1d9      	bne.n	8003cde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d013      	beq.n	8003d5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	4a7d      	ldr	r2, [pc, #500]	; (8003f2c <HAL_UART_IRQHandler+0x3dc>)
 8003d38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd fea7 	bl	8001a92 <HAL_DMA_Abort_IT>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d016      	beq.n	8003d78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d54:	4610      	mov	r0, r2
 8003d56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	e00e      	b.n	8003d78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f990 	bl	8004080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d60:	e00a      	b.n	8003d78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f98c 	bl	8004080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d68:	e006      	b.n	8003d78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f988 	bl	8004080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d76:	e170      	b.n	800405a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d78:	bf00      	nop
    return;
 8003d7a:	e16e      	b.n	800405a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	f040 814a 	bne.w	800401a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 8143 	beq.w	800401a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 813c 	beq.w	800401a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	f040 80b4 	bne.w	8003f30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8140 	beq.w	800405e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003de6:	429a      	cmp	r2, r3
 8003de8:	f080 8139 	bcs.w	800405e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003df2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfe:	f000 8088 	beq.w	8003f12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1d9      	bne.n	8003e02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3314      	adds	r3, #20
 8003e54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3314      	adds	r3, #20
 8003e6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e1      	bne.n	8003e4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3314      	adds	r3, #20
 8003e90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3314      	adds	r3, #20
 8003eaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003eae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003eb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003eb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e3      	bne.n	8003e8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee2:	f023 0310 	bic.w	r3, r3, #16
 8003ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	330c      	adds	r3, #12
 8003ef0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ef4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ef6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003efa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e3      	bne.n	8003ed0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fd fd50 	bl	80019b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	4619      	mov	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f8b6 	bl	8004094 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f28:	e099      	b.n	800405e <HAL_UART_IRQHandler+0x50e>
 8003f2a:	bf00      	nop
 8003f2c:	080042cb 	.word	0x080042cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 808b 	beq.w	8004062 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8086 	beq.w	8004062 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f7a:	647a      	str	r2, [r7, #68]	; 0x44
 8003f7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f82:	e841 2300 	strex	r3, r2, [r1]
 8003f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e3      	bne.n	8003f56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3314      	adds	r3, #20
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	e853 3f00 	ldrex	r3, [r3]
 8003f9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3314      	adds	r3, #20
 8003fae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fb2:	633a      	str	r2, [r7, #48]	; 0x30
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e3      	bne.n	8003f8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	330c      	adds	r3, #12
 8003fda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0310 	bic.w	r3, r3, #16
 8003fea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ff8:	61fa      	str	r2, [r7, #28]
 8003ffa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	69b9      	ldr	r1, [r7, #24]
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	617b      	str	r3, [r7, #20]
   return(result);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e3      	bne.n	8003fd4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800400c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f83e 	bl	8004094 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004018:	e023      	b.n	8004062 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_UART_IRQHandler+0x4ea>
 8004026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f95d 	bl	80042f2 <UART_Transmit_IT>
    return;
 8004038:	e014      	b.n	8004064 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800403a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00e      	beq.n	8004064 <HAL_UART_IRQHandler+0x514>
 8004046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	d008      	beq.n	8004064 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f99d 	bl	8004392 <UART_EndTransmit_IT>
    return;
 8004058:	e004      	b.n	8004064 <HAL_UART_IRQHandler+0x514>
    return;
 800405a:	bf00      	nop
 800405c:	e002      	b.n	8004064 <HAL_UART_IRQHandler+0x514>
      return;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_UART_IRQHandler+0x514>
      return;
 8004062:	bf00      	nop
  }
}
 8004064:	37e8      	adds	r7, #232	; 0xe8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop

0800406c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b090      	sub	sp, #64	; 0x40
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040bc:	e050      	b.n	8004160 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d04c      	beq.n	8004160 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <UART_WaitOnFlagUntilTimeout+0x30>
 80040cc:	f7fd fa58 	bl	8001580 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040d8:	429a      	cmp	r2, r3
 80040da:	d241      	bcs.n	8004160 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040fc:	637a      	str	r2, [r7, #52]	; 0x34
 80040fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	613b      	str	r3, [r7, #16]
   return(result);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	63bb      	str	r3, [r7, #56]	; 0x38
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3314      	adds	r3, #20
 800412e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004130:	623a      	str	r2, [r7, #32]
 8004132:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	69f9      	ldr	r1, [r7, #28]
 8004136:	6a3a      	ldr	r2, [r7, #32]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	61bb      	str	r3, [r7, #24]
   return(result);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e5      	bne.n	8004110 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e00f      	b.n	8004180 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4013      	ands	r3, r2
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	429a      	cmp	r2, r3
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	429a      	cmp	r2, r3
 800417c:	d09f      	beq.n	80040be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3740      	adds	r7, #64	; 0x40
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2222      	movs	r2, #34	; 0x22
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0201 	orr.w	r2, r2, #1
 80041e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0220 	orr.w	r2, r2, #32
 80041f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b095      	sub	sp, #84	; 0x54
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800422c:	643a      	str	r2, [r7, #64]	; 0x40
 800422e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004232:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800423a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e5      	bne.n	800420c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3314      	adds	r3, #20
 8004246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	64bb      	str	r3, [r7, #72]	; 0x48
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3314      	adds	r3, #20
 800425e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004260:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e5      	bne.n	8004240 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	2b01      	cmp	r3, #1
 800427a:	d119      	bne.n	80042b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	60bb      	str	r3, [r7, #8]
   return(result);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f023 0310 	bic.w	r3, r3, #16
 8004292:	647b      	str	r3, [r7, #68]	; 0x44
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	330c      	adds	r3, #12
 800429a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800429c:	61ba      	str	r2, [r7, #24]
 800429e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6979      	ldr	r1, [r7, #20]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	613b      	str	r3, [r7, #16]
   return(result);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e5      	bne.n	800427c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042be:	bf00      	nop
 80042c0:	3754      	adds	r7, #84	; 0x54
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f7ff fecb 	bl	8004080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b21      	cmp	r3, #33	; 0x21
 8004304:	d13e      	bne.n	8004384 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430e:	d114      	bne.n	800433a <UART_Transmit_IT+0x48>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d110      	bne.n	800433a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800432c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	1c9a      	adds	r2, r3, #2
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	621a      	str	r2, [r3, #32]
 8004338:	e008      	b.n	800434c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	1c59      	adds	r1, r3, #1
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6211      	str	r1, [r2, #32]
 8004344:	781a      	ldrb	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29b      	uxth	r3, r3
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	4619      	mov	r1, r3
 800435a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10f      	bne.n	8004380 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800436e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800437e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e000      	b.n	8004386 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff fe5a 	bl	800406c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b08c      	sub	sp, #48	; 0x30
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b22      	cmp	r3, #34	; 0x22
 80043d4:	f040 80ab 	bne.w	800452e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e0:	d117      	bne.n	8004412 <UART_Receive_IT+0x50>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d113      	bne.n	8004412 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004400:	b29a      	uxth	r2, r3
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	1c9a      	adds	r2, r3, #2
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	629a      	str	r2, [r3, #40]	; 0x28
 8004410:	e026      	b.n	8004460 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004416:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004418:	2300      	movs	r3, #0
 800441a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004424:	d007      	beq.n	8004436 <UART_Receive_IT+0x74>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10a      	bne.n	8004444 <UART_Receive_IT+0x82>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	b2da      	uxtb	r2, r3
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	e008      	b.n	8004456 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004450:	b2da      	uxtb	r2, r3
 8004452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004454:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29b      	uxth	r3, r3
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	4619      	mov	r1, r3
 800446e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004470:	2b00      	cmp	r3, #0
 8004472:	d15a      	bne.n	800452a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0220 	bic.w	r2, r2, #32
 8004482:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004492:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0201 	bic.w	r2, r2, #1
 80044a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d135      	bne.n	8004520 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f023 0310 	bic.w	r3, r3, #16
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	330c      	adds	r3, #12
 80044d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044da:	623a      	str	r2, [r7, #32]
 80044dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	69f9      	ldr	r1, [r7, #28]
 80044e0:	6a3a      	ldr	r2, [r7, #32]
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e5      	bne.n	80044ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d10a      	bne.n	8004512 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004516:	4619      	mov	r1, r3
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fdbb 	bl	8004094 <HAL_UARTEx_RxEventCallback>
 800451e:	e002      	b.n	8004526 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7fc fbf7 	bl	8000d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	e002      	b.n	8004530 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	3730      	adds	r7, #48	; 0x30
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800453c:	b0c0      	sub	sp, #256	; 0x100
 800453e:	af00      	add	r7, sp, #0
 8004540:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004554:	68d9      	ldr	r1, [r3, #12]
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	ea40 0301 	orr.w	r3, r0, r1
 8004560:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	431a      	orrs	r2, r3
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	431a      	orrs	r2, r3
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004590:	f021 010c 	bic.w	r1, r1, #12
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800459e:	430b      	orrs	r3, r1
 80045a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b2:	6999      	ldr	r1, [r3, #24]
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	ea40 0301 	orr.w	r3, r0, r1
 80045be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b8f      	ldr	r3, [pc, #572]	; (8004804 <UART_SetConfig+0x2cc>)
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d005      	beq.n	80045d8 <UART_SetConfig+0xa0>
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b8d      	ldr	r3, [pc, #564]	; (8004808 <UART_SetConfig+0x2d0>)
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d104      	bne.n	80045e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045d8:	f7fe fcc8 	bl	8002f6c <HAL_RCC_GetPCLK2Freq>
 80045dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045e0:	e003      	b.n	80045ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045e2:	f7fe fcaf 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 80045e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f4:	f040 810c 	bne.w	8004810 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fc:	2200      	movs	r2, #0
 80045fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004602:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004606:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800460a:	4622      	mov	r2, r4
 800460c:	462b      	mov	r3, r5
 800460e:	1891      	adds	r1, r2, r2
 8004610:	65b9      	str	r1, [r7, #88]	; 0x58
 8004612:	415b      	adcs	r3, r3
 8004614:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004616:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800461a:	4621      	mov	r1, r4
 800461c:	eb12 0801 	adds.w	r8, r2, r1
 8004620:	4629      	mov	r1, r5
 8004622:	eb43 0901 	adc.w	r9, r3, r1
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800463a:	4690      	mov	r8, r2
 800463c:	4699      	mov	r9, r3
 800463e:	4623      	mov	r3, r4
 8004640:	eb18 0303 	adds.w	r3, r8, r3
 8004644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004648:	462b      	mov	r3, r5
 800464a:	eb49 0303 	adc.w	r3, r9, r3
 800464e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800465e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004662:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004666:	460b      	mov	r3, r1
 8004668:	18db      	adds	r3, r3, r3
 800466a:	653b      	str	r3, [r7, #80]	; 0x50
 800466c:	4613      	mov	r3, r2
 800466e:	eb42 0303 	adc.w	r3, r2, r3
 8004672:	657b      	str	r3, [r7, #84]	; 0x54
 8004674:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004678:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800467c:	f7fb fe28 	bl	80002d0 <__aeabi_uldivmod>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4b61      	ldr	r3, [pc, #388]	; (800480c <UART_SetConfig+0x2d4>)
 8004686:	fba3 2302 	umull	r2, r3, r3, r2
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	011c      	lsls	r4, r3, #4
 800468e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004692:	2200      	movs	r2, #0
 8004694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004698:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800469c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046a0:	4642      	mov	r2, r8
 80046a2:	464b      	mov	r3, r9
 80046a4:	1891      	adds	r1, r2, r2
 80046a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80046a8:	415b      	adcs	r3, r3
 80046aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046b0:	4641      	mov	r1, r8
 80046b2:	eb12 0a01 	adds.w	sl, r2, r1
 80046b6:	4649      	mov	r1, r9
 80046b8:	eb43 0b01 	adc.w	fp, r3, r1
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046d0:	4692      	mov	sl, r2
 80046d2:	469b      	mov	fp, r3
 80046d4:	4643      	mov	r3, r8
 80046d6:	eb1a 0303 	adds.w	r3, sl, r3
 80046da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046de:	464b      	mov	r3, r9
 80046e0:	eb4b 0303 	adc.w	r3, fp, r3
 80046e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046fc:	460b      	mov	r3, r1
 80046fe:	18db      	adds	r3, r3, r3
 8004700:	643b      	str	r3, [r7, #64]	; 0x40
 8004702:	4613      	mov	r3, r2
 8004704:	eb42 0303 	adc.w	r3, r2, r3
 8004708:	647b      	str	r3, [r7, #68]	; 0x44
 800470a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800470e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004712:	f7fb fddd 	bl	80002d0 <__aeabi_uldivmod>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4611      	mov	r1, r2
 800471c:	4b3b      	ldr	r3, [pc, #236]	; (800480c <UART_SetConfig+0x2d4>)
 800471e:	fba3 2301 	umull	r2, r3, r3, r1
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	2264      	movs	r2, #100	; 0x64
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	1acb      	subs	r3, r1, r3
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004732:	4b36      	ldr	r3, [pc, #216]	; (800480c <UART_SetConfig+0x2d4>)
 8004734:	fba3 2302 	umull	r2, r3, r3, r2
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004740:	441c      	add	r4, r3
 8004742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004746:	2200      	movs	r2, #0
 8004748:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800474c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004750:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004754:	4642      	mov	r2, r8
 8004756:	464b      	mov	r3, r9
 8004758:	1891      	adds	r1, r2, r2
 800475a:	63b9      	str	r1, [r7, #56]	; 0x38
 800475c:	415b      	adcs	r3, r3
 800475e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004760:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004764:	4641      	mov	r1, r8
 8004766:	1851      	adds	r1, r2, r1
 8004768:	6339      	str	r1, [r7, #48]	; 0x30
 800476a:	4649      	mov	r1, r9
 800476c:	414b      	adcs	r3, r1
 800476e:	637b      	str	r3, [r7, #52]	; 0x34
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800477c:	4659      	mov	r1, fp
 800477e:	00cb      	lsls	r3, r1, #3
 8004780:	4651      	mov	r1, sl
 8004782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004786:	4651      	mov	r1, sl
 8004788:	00ca      	lsls	r2, r1, #3
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	4603      	mov	r3, r0
 8004790:	4642      	mov	r2, r8
 8004792:	189b      	adds	r3, r3, r2
 8004794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004798:	464b      	mov	r3, r9
 800479a:	460a      	mov	r2, r1
 800479c:	eb42 0303 	adc.w	r3, r2, r3
 80047a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047b8:	460b      	mov	r3, r1
 80047ba:	18db      	adds	r3, r3, r3
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047be:	4613      	mov	r3, r2
 80047c0:	eb42 0303 	adc.w	r3, r2, r3
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047ce:	f7fb fd7f 	bl	80002d0 <__aeabi_uldivmod>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4b0d      	ldr	r3, [pc, #52]	; (800480c <UART_SetConfig+0x2d4>)
 80047d8:	fba3 1302 	umull	r1, r3, r3, r2
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	2164      	movs	r1, #100	; 0x64
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	3332      	adds	r3, #50	; 0x32
 80047ea:	4a08      	ldr	r2, [pc, #32]	; (800480c <UART_SetConfig+0x2d4>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	f003 0207 	and.w	r2, r3, #7
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4422      	add	r2, r4
 80047fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004800:	e106      	b.n	8004a10 <UART_SetConfig+0x4d8>
 8004802:	bf00      	nop
 8004804:	40011000 	.word	0x40011000
 8004808:	40011400 	.word	0x40011400
 800480c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004814:	2200      	movs	r2, #0
 8004816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800481a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800481e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004822:	4642      	mov	r2, r8
 8004824:	464b      	mov	r3, r9
 8004826:	1891      	adds	r1, r2, r2
 8004828:	6239      	str	r1, [r7, #32]
 800482a:	415b      	adcs	r3, r3
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
 800482e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004832:	4641      	mov	r1, r8
 8004834:	1854      	adds	r4, r2, r1
 8004836:	4649      	mov	r1, r9
 8004838:	eb43 0501 	adc.w	r5, r3, r1
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	00eb      	lsls	r3, r5, #3
 8004846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800484a:	00e2      	lsls	r2, r4, #3
 800484c:	4614      	mov	r4, r2
 800484e:	461d      	mov	r5, r3
 8004850:	4643      	mov	r3, r8
 8004852:	18e3      	adds	r3, r4, r3
 8004854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004858:	464b      	mov	r3, r9
 800485a:	eb45 0303 	adc.w	r3, r5, r3
 800485e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800486e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800487e:	4629      	mov	r1, r5
 8004880:	008b      	lsls	r3, r1, #2
 8004882:	4621      	mov	r1, r4
 8004884:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004888:	4621      	mov	r1, r4
 800488a:	008a      	lsls	r2, r1, #2
 800488c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004890:	f7fb fd1e 	bl	80002d0 <__aeabi_uldivmod>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4b60      	ldr	r3, [pc, #384]	; (8004a1c <UART_SetConfig+0x4e4>)
 800489a:	fba3 2302 	umull	r2, r3, r3, r2
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	011c      	lsls	r4, r3, #4
 80048a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048b4:	4642      	mov	r2, r8
 80048b6:	464b      	mov	r3, r9
 80048b8:	1891      	adds	r1, r2, r2
 80048ba:	61b9      	str	r1, [r7, #24]
 80048bc:	415b      	adcs	r3, r3
 80048be:	61fb      	str	r3, [r7, #28]
 80048c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048c4:	4641      	mov	r1, r8
 80048c6:	1851      	adds	r1, r2, r1
 80048c8:	6139      	str	r1, [r7, #16]
 80048ca:	4649      	mov	r1, r9
 80048cc:	414b      	adcs	r3, r1
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048dc:	4659      	mov	r1, fp
 80048de:	00cb      	lsls	r3, r1, #3
 80048e0:	4651      	mov	r1, sl
 80048e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048e6:	4651      	mov	r1, sl
 80048e8:	00ca      	lsls	r2, r1, #3
 80048ea:	4610      	mov	r0, r2
 80048ec:	4619      	mov	r1, r3
 80048ee:	4603      	mov	r3, r0
 80048f0:	4642      	mov	r2, r8
 80048f2:	189b      	adds	r3, r3, r2
 80048f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048f8:	464b      	mov	r3, r9
 80048fa:	460a      	mov	r2, r1
 80048fc:	eb42 0303 	adc.w	r3, r2, r3
 8004900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	67bb      	str	r3, [r7, #120]	; 0x78
 800490e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800491c:	4649      	mov	r1, r9
 800491e:	008b      	lsls	r3, r1, #2
 8004920:	4641      	mov	r1, r8
 8004922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004926:	4641      	mov	r1, r8
 8004928:	008a      	lsls	r2, r1, #2
 800492a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800492e:	f7fb fccf 	bl	80002d0 <__aeabi_uldivmod>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4611      	mov	r1, r2
 8004938:	4b38      	ldr	r3, [pc, #224]	; (8004a1c <UART_SetConfig+0x4e4>)
 800493a:	fba3 2301 	umull	r2, r3, r3, r1
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2264      	movs	r2, #100	; 0x64
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	1acb      	subs	r3, r1, r3
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	3332      	adds	r3, #50	; 0x32
 800494c:	4a33      	ldr	r2, [pc, #204]	; (8004a1c <UART_SetConfig+0x4e4>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004958:	441c      	add	r4, r3
 800495a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800495e:	2200      	movs	r2, #0
 8004960:	673b      	str	r3, [r7, #112]	; 0x70
 8004962:	677a      	str	r2, [r7, #116]	; 0x74
 8004964:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004968:	4642      	mov	r2, r8
 800496a:	464b      	mov	r3, r9
 800496c:	1891      	adds	r1, r2, r2
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	415b      	adcs	r3, r3
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004978:	4641      	mov	r1, r8
 800497a:	1851      	adds	r1, r2, r1
 800497c:	6039      	str	r1, [r7, #0]
 800497e:	4649      	mov	r1, r9
 8004980:	414b      	adcs	r3, r1
 8004982:	607b      	str	r3, [r7, #4]
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004990:	4659      	mov	r1, fp
 8004992:	00cb      	lsls	r3, r1, #3
 8004994:	4651      	mov	r1, sl
 8004996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800499a:	4651      	mov	r1, sl
 800499c:	00ca      	lsls	r2, r1, #3
 800499e:	4610      	mov	r0, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	4603      	mov	r3, r0
 80049a4:	4642      	mov	r2, r8
 80049a6:	189b      	adds	r3, r3, r2
 80049a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80049aa:	464b      	mov	r3, r9
 80049ac:	460a      	mov	r2, r1
 80049ae:	eb42 0303 	adc.w	r3, r2, r3
 80049b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	663b      	str	r3, [r7, #96]	; 0x60
 80049be:	667a      	str	r2, [r7, #100]	; 0x64
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049cc:	4649      	mov	r1, r9
 80049ce:	008b      	lsls	r3, r1, #2
 80049d0:	4641      	mov	r1, r8
 80049d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d6:	4641      	mov	r1, r8
 80049d8:	008a      	lsls	r2, r1, #2
 80049da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049de:	f7fb fc77 	bl	80002d0 <__aeabi_uldivmod>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <UART_SetConfig+0x4e4>)
 80049e8:	fba3 1302 	umull	r1, r3, r3, r2
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	2164      	movs	r1, #100	; 0x64
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	3332      	adds	r3, #50	; 0x32
 80049fa:	4a08      	ldr	r2, [pc, #32]	; (8004a1c <UART_SetConfig+0x4e4>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	f003 020f 	and.w	r2, r3, #15
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4422      	add	r2, r4
 8004a0e:	609a      	str	r2, [r3, #8]
}
 8004a10:	bf00      	nop
 8004a12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a16:	46bd      	mov	sp, r7
 8004a18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a1c:	51eb851f 	.word	0x51eb851f

08004a20 <atoi>:
 8004a20:	220a      	movs	r2, #10
 8004a22:	2100      	movs	r1, #0
 8004a24:	f000 b882 	b.w	8004b2c <strtol>

08004a28 <_strtol_l.constprop.0>:
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a2e:	d001      	beq.n	8004a34 <_strtol_l.constprop.0+0xc>
 8004a30:	2b24      	cmp	r3, #36	; 0x24
 8004a32:	d906      	bls.n	8004a42 <_strtol_l.constprop.0+0x1a>
 8004a34:	f000 fad0 	bl	8004fd8 <__errno>
 8004a38:	2316      	movs	r3, #22
 8004a3a:	6003      	str	r3, [r0, #0]
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004b28 <_strtol_l.constprop.0+0x100>
 8004a46:	460d      	mov	r5, r1
 8004a48:	462e      	mov	r6, r5
 8004a4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a4e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004a52:	f017 0708 	ands.w	r7, r7, #8
 8004a56:	d1f7      	bne.n	8004a48 <_strtol_l.constprop.0+0x20>
 8004a58:	2c2d      	cmp	r4, #45	; 0x2d
 8004a5a:	d132      	bne.n	8004ac2 <_strtol_l.constprop.0+0x9a>
 8004a5c:	782c      	ldrb	r4, [r5, #0]
 8004a5e:	2701      	movs	r7, #1
 8004a60:	1cb5      	adds	r5, r6, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d05b      	beq.n	8004b1e <_strtol_l.constprop.0+0xf6>
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d109      	bne.n	8004a7e <_strtol_l.constprop.0+0x56>
 8004a6a:	2c30      	cmp	r4, #48	; 0x30
 8004a6c:	d107      	bne.n	8004a7e <_strtol_l.constprop.0+0x56>
 8004a6e:	782c      	ldrb	r4, [r5, #0]
 8004a70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004a74:	2c58      	cmp	r4, #88	; 0x58
 8004a76:	d14d      	bne.n	8004b14 <_strtol_l.constprop.0+0xec>
 8004a78:	786c      	ldrb	r4, [r5, #1]
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	3502      	adds	r5, #2
 8004a7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004a82:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a86:	f04f 0e00 	mov.w	lr, #0
 8004a8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8004a8e:	4676      	mov	r6, lr
 8004a90:	fb03 8a19 	mls	sl, r3, r9, r8
 8004a94:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004a98:	f1bc 0f09 	cmp.w	ip, #9
 8004a9c:	d816      	bhi.n	8004acc <_strtol_l.constprop.0+0xa4>
 8004a9e:	4664      	mov	r4, ip
 8004aa0:	42a3      	cmp	r3, r4
 8004aa2:	dd24      	ble.n	8004aee <_strtol_l.constprop.0+0xc6>
 8004aa4:	f1be 3fff 	cmp.w	lr, #4294967295
 8004aa8:	d008      	beq.n	8004abc <_strtol_l.constprop.0+0x94>
 8004aaa:	45b1      	cmp	r9, r6
 8004aac:	d31c      	bcc.n	8004ae8 <_strtol_l.constprop.0+0xc0>
 8004aae:	d101      	bne.n	8004ab4 <_strtol_l.constprop.0+0x8c>
 8004ab0:	45a2      	cmp	sl, r4
 8004ab2:	db19      	blt.n	8004ae8 <_strtol_l.constprop.0+0xc0>
 8004ab4:	fb06 4603 	mla	r6, r6, r3, r4
 8004ab8:	f04f 0e01 	mov.w	lr, #1
 8004abc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ac0:	e7e8      	b.n	8004a94 <_strtol_l.constprop.0+0x6c>
 8004ac2:	2c2b      	cmp	r4, #43	; 0x2b
 8004ac4:	bf04      	itt	eq
 8004ac6:	782c      	ldrbeq	r4, [r5, #0]
 8004ac8:	1cb5      	addeq	r5, r6, #2
 8004aca:	e7ca      	b.n	8004a62 <_strtol_l.constprop.0+0x3a>
 8004acc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004ad0:	f1bc 0f19 	cmp.w	ip, #25
 8004ad4:	d801      	bhi.n	8004ada <_strtol_l.constprop.0+0xb2>
 8004ad6:	3c37      	subs	r4, #55	; 0x37
 8004ad8:	e7e2      	b.n	8004aa0 <_strtol_l.constprop.0+0x78>
 8004ada:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004ade:	f1bc 0f19 	cmp.w	ip, #25
 8004ae2:	d804      	bhi.n	8004aee <_strtol_l.constprop.0+0xc6>
 8004ae4:	3c57      	subs	r4, #87	; 0x57
 8004ae6:	e7db      	b.n	8004aa0 <_strtol_l.constprop.0+0x78>
 8004ae8:	f04f 3eff 	mov.w	lr, #4294967295
 8004aec:	e7e6      	b.n	8004abc <_strtol_l.constprop.0+0x94>
 8004aee:	f1be 3fff 	cmp.w	lr, #4294967295
 8004af2:	d105      	bne.n	8004b00 <_strtol_l.constprop.0+0xd8>
 8004af4:	2322      	movs	r3, #34	; 0x22
 8004af6:	6003      	str	r3, [r0, #0]
 8004af8:	4646      	mov	r6, r8
 8004afa:	b942      	cbnz	r2, 8004b0e <_strtol_l.constprop.0+0xe6>
 8004afc:	4630      	mov	r0, r6
 8004afe:	e79e      	b.n	8004a3e <_strtol_l.constprop.0+0x16>
 8004b00:	b107      	cbz	r7, 8004b04 <_strtol_l.constprop.0+0xdc>
 8004b02:	4276      	negs	r6, r6
 8004b04:	2a00      	cmp	r2, #0
 8004b06:	d0f9      	beq.n	8004afc <_strtol_l.constprop.0+0xd4>
 8004b08:	f1be 0f00 	cmp.w	lr, #0
 8004b0c:	d000      	beq.n	8004b10 <_strtol_l.constprop.0+0xe8>
 8004b0e:	1e69      	subs	r1, r5, #1
 8004b10:	6011      	str	r1, [r2, #0]
 8004b12:	e7f3      	b.n	8004afc <_strtol_l.constprop.0+0xd4>
 8004b14:	2430      	movs	r4, #48	; 0x30
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1b1      	bne.n	8004a7e <_strtol_l.constprop.0+0x56>
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	e7af      	b.n	8004a7e <_strtol_l.constprop.0+0x56>
 8004b1e:	2c30      	cmp	r4, #48	; 0x30
 8004b20:	d0a5      	beq.n	8004a6e <_strtol_l.constprop.0+0x46>
 8004b22:	230a      	movs	r3, #10
 8004b24:	e7ab      	b.n	8004a7e <_strtol_l.constprop.0+0x56>
 8004b26:	bf00      	nop
 8004b28:	08005c69 	.word	0x08005c69

08004b2c <strtol>:
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	460a      	mov	r2, r1
 8004b30:	4601      	mov	r1, r0
 8004b32:	4802      	ldr	r0, [pc, #8]	; (8004b3c <strtol+0x10>)
 8004b34:	6800      	ldr	r0, [r0, #0]
 8004b36:	f7ff bf77 	b.w	8004a28 <_strtol_l.constprop.0>
 8004b3a:	bf00      	nop
 8004b3c:	20000090 	.word	0x20000090

08004b40 <std>:
 8004b40:	2300      	movs	r3, #0
 8004b42:	b510      	push	{r4, lr}
 8004b44:	4604      	mov	r4, r0
 8004b46:	e9c0 3300 	strd	r3, r3, [r0]
 8004b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b4e:	6083      	str	r3, [r0, #8]
 8004b50:	8181      	strh	r1, [r0, #12]
 8004b52:	6643      	str	r3, [r0, #100]	; 0x64
 8004b54:	81c2      	strh	r2, [r0, #14]
 8004b56:	6183      	str	r3, [r0, #24]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	305c      	adds	r0, #92	; 0x5c
 8004b5e:	f000 f9ed 	bl	8004f3c <memset>
 8004b62:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <std+0x38>)
 8004b64:	6263      	str	r3, [r4, #36]	; 0x24
 8004b66:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <std+0x3c>)
 8004b68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <std+0x40>)
 8004b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b6e:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <std+0x44>)
 8004b70:	6224      	str	r4, [r4, #32]
 8004b72:	6323      	str	r3, [r4, #48]	; 0x30
 8004b74:	bd10      	pop	{r4, pc}
 8004b76:	bf00      	nop
 8004b78:	08004d8d 	.word	0x08004d8d
 8004b7c:	08004daf 	.word	0x08004daf
 8004b80:	08004de7 	.word	0x08004de7
 8004b84:	08004e0b 	.word	0x08004e0b

08004b88 <stdio_exit_handler>:
 8004b88:	4a02      	ldr	r2, [pc, #8]	; (8004b94 <stdio_exit_handler+0xc>)
 8004b8a:	4903      	ldr	r1, [pc, #12]	; (8004b98 <stdio_exit_handler+0x10>)
 8004b8c:	4803      	ldr	r0, [pc, #12]	; (8004b9c <stdio_exit_handler+0x14>)
 8004b8e:	f000 b869 	b.w	8004c64 <_fwalk_sglue>
 8004b92:	bf00      	nop
 8004b94:	20000038 	.word	0x20000038
 8004b98:	080058d5 	.word	0x080058d5
 8004b9c:	20000044 	.word	0x20000044

08004ba0 <cleanup_stdio>:
 8004ba0:	6841      	ldr	r1, [r0, #4]
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <cleanup_stdio+0x34>)
 8004ba4:	4299      	cmp	r1, r3
 8004ba6:	b510      	push	{r4, lr}
 8004ba8:	4604      	mov	r4, r0
 8004baa:	d001      	beq.n	8004bb0 <cleanup_stdio+0x10>
 8004bac:	f000 fe92 	bl	80058d4 <_fflush_r>
 8004bb0:	68a1      	ldr	r1, [r4, #8]
 8004bb2:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <cleanup_stdio+0x38>)
 8004bb4:	4299      	cmp	r1, r3
 8004bb6:	d002      	beq.n	8004bbe <cleanup_stdio+0x1e>
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f000 fe8b 	bl	80058d4 <_fflush_r>
 8004bbe:	68e1      	ldr	r1, [r4, #12]
 8004bc0:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <cleanup_stdio+0x3c>)
 8004bc2:	4299      	cmp	r1, r3
 8004bc4:	d004      	beq.n	8004bd0 <cleanup_stdio+0x30>
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bcc:	f000 be82 	b.w	80058d4 <_fflush_r>
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000210 	.word	0x20000210
 8004bd8:	20000278 	.word	0x20000278
 8004bdc:	200002e0 	.word	0x200002e0

08004be0 <global_stdio_init.part.0>:
 8004be0:	b510      	push	{r4, lr}
 8004be2:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <global_stdio_init.part.0+0x30>)
 8004be4:	4c0b      	ldr	r4, [pc, #44]	; (8004c14 <global_stdio_init.part.0+0x34>)
 8004be6:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <global_stdio_init.part.0+0x38>)
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	4620      	mov	r0, r4
 8004bec:	2200      	movs	r2, #0
 8004bee:	2104      	movs	r1, #4
 8004bf0:	f7ff ffa6 	bl	8004b40 <std>
 8004bf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	2109      	movs	r1, #9
 8004bfc:	f7ff ffa0 	bl	8004b40 <std>
 8004c00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c04:	2202      	movs	r2, #2
 8004c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c0a:	2112      	movs	r1, #18
 8004c0c:	f7ff bf98 	b.w	8004b40 <std>
 8004c10:	20000348 	.word	0x20000348
 8004c14:	20000210 	.word	0x20000210
 8004c18:	08004b89 	.word	0x08004b89

08004c1c <__sfp_lock_acquire>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	; (8004c24 <__sfp_lock_acquire+0x8>)
 8004c1e:	f000 ba05 	b.w	800502c <__retarget_lock_acquire_recursive>
 8004c22:	bf00      	nop
 8004c24:	20000351 	.word	0x20000351

08004c28 <__sfp_lock_release>:
 8004c28:	4801      	ldr	r0, [pc, #4]	; (8004c30 <__sfp_lock_release+0x8>)
 8004c2a:	f000 ba00 	b.w	800502e <__retarget_lock_release_recursive>
 8004c2e:	bf00      	nop
 8004c30:	20000351 	.word	0x20000351

08004c34 <__sinit>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4604      	mov	r4, r0
 8004c38:	f7ff fff0 	bl	8004c1c <__sfp_lock_acquire>
 8004c3c:	6a23      	ldr	r3, [r4, #32]
 8004c3e:	b11b      	cbz	r3, 8004c48 <__sinit+0x14>
 8004c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c44:	f7ff bff0 	b.w	8004c28 <__sfp_lock_release>
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <__sinit+0x28>)
 8004c4a:	6223      	str	r3, [r4, #32]
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <__sinit+0x2c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f5      	bne.n	8004c40 <__sinit+0xc>
 8004c54:	f7ff ffc4 	bl	8004be0 <global_stdio_init.part.0>
 8004c58:	e7f2      	b.n	8004c40 <__sinit+0xc>
 8004c5a:	bf00      	nop
 8004c5c:	08004ba1 	.word	0x08004ba1
 8004c60:	20000348 	.word	0x20000348

08004c64 <_fwalk_sglue>:
 8004c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c68:	4607      	mov	r7, r0
 8004c6a:	4688      	mov	r8, r1
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	2600      	movs	r6, #0
 8004c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c74:	f1b9 0901 	subs.w	r9, r9, #1
 8004c78:	d505      	bpl.n	8004c86 <_fwalk_sglue+0x22>
 8004c7a:	6824      	ldr	r4, [r4, #0]
 8004c7c:	2c00      	cmp	r4, #0
 8004c7e:	d1f7      	bne.n	8004c70 <_fwalk_sglue+0xc>
 8004c80:	4630      	mov	r0, r6
 8004c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c86:	89ab      	ldrh	r3, [r5, #12]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d907      	bls.n	8004c9c <_fwalk_sglue+0x38>
 8004c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c90:	3301      	adds	r3, #1
 8004c92:	d003      	beq.n	8004c9c <_fwalk_sglue+0x38>
 8004c94:	4629      	mov	r1, r5
 8004c96:	4638      	mov	r0, r7
 8004c98:	47c0      	blx	r8
 8004c9a:	4306      	orrs	r6, r0
 8004c9c:	3568      	adds	r5, #104	; 0x68
 8004c9e:	e7e9      	b.n	8004c74 <_fwalk_sglue+0x10>

08004ca0 <iprintf>:
 8004ca0:	b40f      	push	{r0, r1, r2, r3}
 8004ca2:	b507      	push	{r0, r1, r2, lr}
 8004ca4:	4906      	ldr	r1, [pc, #24]	; (8004cc0 <iprintf+0x20>)
 8004ca6:	ab04      	add	r3, sp, #16
 8004ca8:	6808      	ldr	r0, [r1, #0]
 8004caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cae:	6881      	ldr	r1, [r0, #8]
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	f000 fadf 	bl	8005274 <_vfiprintf_r>
 8004cb6:	b003      	add	sp, #12
 8004cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cbc:	b004      	add	sp, #16
 8004cbe:	4770      	bx	lr
 8004cc0:	20000090 	.word	0x20000090

08004cc4 <putchar>:
 8004cc4:	4b02      	ldr	r3, [pc, #8]	; (8004cd0 <putchar+0xc>)
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	6882      	ldr	r2, [r0, #8]
 8004ccc:	f000 be8c 	b.w	80059e8 <_putc_r>
 8004cd0:	20000090 	.word	0x20000090

08004cd4 <_puts_r>:
 8004cd4:	6a03      	ldr	r3, [r0, #32]
 8004cd6:	b570      	push	{r4, r5, r6, lr}
 8004cd8:	6884      	ldr	r4, [r0, #8]
 8004cda:	4605      	mov	r5, r0
 8004cdc:	460e      	mov	r6, r1
 8004cde:	b90b      	cbnz	r3, 8004ce4 <_puts_r+0x10>
 8004ce0:	f7ff ffa8 	bl	8004c34 <__sinit>
 8004ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ce6:	07db      	lsls	r3, r3, #31
 8004ce8:	d405      	bmi.n	8004cf6 <_puts_r+0x22>
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	0598      	lsls	r0, r3, #22
 8004cee:	d402      	bmi.n	8004cf6 <_puts_r+0x22>
 8004cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cf2:	f000 f99b 	bl	800502c <__retarget_lock_acquire_recursive>
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	0719      	lsls	r1, r3, #28
 8004cfa:	d513      	bpl.n	8004d24 <_puts_r+0x50>
 8004cfc:	6923      	ldr	r3, [r4, #16]
 8004cfe:	b18b      	cbz	r3, 8004d24 <_puts_r+0x50>
 8004d00:	3e01      	subs	r6, #1
 8004d02:	68a3      	ldr	r3, [r4, #8]
 8004d04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	60a3      	str	r3, [r4, #8]
 8004d0c:	b9e9      	cbnz	r1, 8004d4a <_puts_r+0x76>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	da2e      	bge.n	8004d70 <_puts_r+0x9c>
 8004d12:	4622      	mov	r2, r4
 8004d14:	210a      	movs	r1, #10
 8004d16:	4628      	mov	r0, r5
 8004d18:	f000 f87b 	bl	8004e12 <__swbuf_r>
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	d007      	beq.n	8004d30 <_puts_r+0x5c>
 8004d20:	250a      	movs	r5, #10
 8004d22:	e007      	b.n	8004d34 <_puts_r+0x60>
 8004d24:	4621      	mov	r1, r4
 8004d26:	4628      	mov	r0, r5
 8004d28:	f000 f8b0 	bl	8004e8c <__swsetup_r>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d0e7      	beq.n	8004d00 <_puts_r+0x2c>
 8004d30:	f04f 35ff 	mov.w	r5, #4294967295
 8004d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d36:	07da      	lsls	r2, r3, #31
 8004d38:	d405      	bmi.n	8004d46 <_puts_r+0x72>
 8004d3a:	89a3      	ldrh	r3, [r4, #12]
 8004d3c:	059b      	lsls	r3, r3, #22
 8004d3e:	d402      	bmi.n	8004d46 <_puts_r+0x72>
 8004d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d42:	f000 f974 	bl	800502e <__retarget_lock_release_recursive>
 8004d46:	4628      	mov	r0, r5
 8004d48:	bd70      	pop	{r4, r5, r6, pc}
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	da04      	bge.n	8004d58 <_puts_r+0x84>
 8004d4e:	69a2      	ldr	r2, [r4, #24]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	dc06      	bgt.n	8004d62 <_puts_r+0x8e>
 8004d54:	290a      	cmp	r1, #10
 8004d56:	d004      	beq.n	8004d62 <_puts_r+0x8e>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	6022      	str	r2, [r4, #0]
 8004d5e:	7019      	strb	r1, [r3, #0]
 8004d60:	e7cf      	b.n	8004d02 <_puts_r+0x2e>
 8004d62:	4622      	mov	r2, r4
 8004d64:	4628      	mov	r0, r5
 8004d66:	f000 f854 	bl	8004e12 <__swbuf_r>
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d1c9      	bne.n	8004d02 <_puts_r+0x2e>
 8004d6e:	e7df      	b.n	8004d30 <_puts_r+0x5c>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	250a      	movs	r5, #10
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	6022      	str	r2, [r4, #0]
 8004d78:	701d      	strb	r5, [r3, #0]
 8004d7a:	e7db      	b.n	8004d34 <_puts_r+0x60>

08004d7c <puts>:
 8004d7c:	4b02      	ldr	r3, [pc, #8]	; (8004d88 <puts+0xc>)
 8004d7e:	4601      	mov	r1, r0
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	f7ff bfa7 	b.w	8004cd4 <_puts_r>
 8004d86:	bf00      	nop
 8004d88:	20000090 	.word	0x20000090

08004d8c <__sread>:
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	460c      	mov	r4, r1
 8004d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d94:	f000 f8fc 	bl	8004f90 <_read_r>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	bfab      	itete	ge
 8004d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8004da0:	181b      	addge	r3, r3, r0
 8004da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004da6:	bfac      	ite	ge
 8004da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004daa:	81a3      	strhlt	r3, [r4, #12]
 8004dac:	bd10      	pop	{r4, pc}

08004dae <__swrite>:
 8004dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db2:	461f      	mov	r7, r3
 8004db4:	898b      	ldrh	r3, [r1, #12]
 8004db6:	05db      	lsls	r3, r3, #23
 8004db8:	4605      	mov	r5, r0
 8004dba:	460c      	mov	r4, r1
 8004dbc:	4616      	mov	r6, r2
 8004dbe:	d505      	bpl.n	8004dcc <__swrite+0x1e>
 8004dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f000 f8d0 	bl	8004f6c <_lseek_r>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	4632      	mov	r2, r6
 8004dda:	463b      	mov	r3, r7
 8004ddc:	4628      	mov	r0, r5
 8004dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004de2:	f000 b8e7 	b.w	8004fb4 <_write_r>

08004de6 <__sseek>:
 8004de6:	b510      	push	{r4, lr}
 8004de8:	460c      	mov	r4, r1
 8004dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dee:	f000 f8bd 	bl	8004f6c <_lseek_r>
 8004df2:	1c43      	adds	r3, r0, #1
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	bf15      	itete	ne
 8004df8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e02:	81a3      	strheq	r3, [r4, #12]
 8004e04:	bf18      	it	ne
 8004e06:	81a3      	strhne	r3, [r4, #12]
 8004e08:	bd10      	pop	{r4, pc}

08004e0a <__sclose>:
 8004e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0e:	f000 b89d 	b.w	8004f4c <_close_r>

08004e12 <__swbuf_r>:
 8004e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e14:	460e      	mov	r6, r1
 8004e16:	4614      	mov	r4, r2
 8004e18:	4605      	mov	r5, r0
 8004e1a:	b118      	cbz	r0, 8004e24 <__swbuf_r+0x12>
 8004e1c:	6a03      	ldr	r3, [r0, #32]
 8004e1e:	b90b      	cbnz	r3, 8004e24 <__swbuf_r+0x12>
 8004e20:	f7ff ff08 	bl	8004c34 <__sinit>
 8004e24:	69a3      	ldr	r3, [r4, #24]
 8004e26:	60a3      	str	r3, [r4, #8]
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	071a      	lsls	r2, r3, #28
 8004e2c:	d525      	bpl.n	8004e7a <__swbuf_r+0x68>
 8004e2e:	6923      	ldr	r3, [r4, #16]
 8004e30:	b31b      	cbz	r3, 8004e7a <__swbuf_r+0x68>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	6922      	ldr	r2, [r4, #16]
 8004e36:	1a98      	subs	r0, r3, r2
 8004e38:	6963      	ldr	r3, [r4, #20]
 8004e3a:	b2f6      	uxtb	r6, r6
 8004e3c:	4283      	cmp	r3, r0
 8004e3e:	4637      	mov	r7, r6
 8004e40:	dc04      	bgt.n	8004e4c <__swbuf_r+0x3a>
 8004e42:	4621      	mov	r1, r4
 8004e44:	4628      	mov	r0, r5
 8004e46:	f000 fd45 	bl	80058d4 <_fflush_r>
 8004e4a:	b9e0      	cbnz	r0, 8004e86 <__swbuf_r+0x74>
 8004e4c:	68a3      	ldr	r3, [r4, #8]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	60a3      	str	r3, [r4, #8]
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	6022      	str	r2, [r4, #0]
 8004e58:	701e      	strb	r6, [r3, #0]
 8004e5a:	6962      	ldr	r2, [r4, #20]
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d004      	beq.n	8004e6c <__swbuf_r+0x5a>
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	07db      	lsls	r3, r3, #31
 8004e66:	d506      	bpl.n	8004e76 <__swbuf_r+0x64>
 8004e68:	2e0a      	cmp	r6, #10
 8004e6a:	d104      	bne.n	8004e76 <__swbuf_r+0x64>
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f000 fd30 	bl	80058d4 <_fflush_r>
 8004e74:	b938      	cbnz	r0, 8004e86 <__swbuf_r+0x74>
 8004e76:	4638      	mov	r0, r7
 8004e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f000 f805 	bl	8004e8c <__swsetup_r>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d0d5      	beq.n	8004e32 <__swbuf_r+0x20>
 8004e86:	f04f 37ff 	mov.w	r7, #4294967295
 8004e8a:	e7f4      	b.n	8004e76 <__swbuf_r+0x64>

08004e8c <__swsetup_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4b2a      	ldr	r3, [pc, #168]	; (8004f38 <__swsetup_r+0xac>)
 8004e90:	4605      	mov	r5, r0
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	460c      	mov	r4, r1
 8004e96:	b118      	cbz	r0, 8004ea0 <__swsetup_r+0x14>
 8004e98:	6a03      	ldr	r3, [r0, #32]
 8004e9a:	b90b      	cbnz	r3, 8004ea0 <__swsetup_r+0x14>
 8004e9c:	f7ff feca 	bl	8004c34 <__sinit>
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ea6:	0718      	lsls	r0, r3, #28
 8004ea8:	d422      	bmi.n	8004ef0 <__swsetup_r+0x64>
 8004eaa:	06d9      	lsls	r1, r3, #27
 8004eac:	d407      	bmi.n	8004ebe <__swsetup_r+0x32>
 8004eae:	2309      	movs	r3, #9
 8004eb0:	602b      	str	r3, [r5, #0]
 8004eb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004eb6:	81a3      	strh	r3, [r4, #12]
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebc:	e034      	b.n	8004f28 <__swsetup_r+0x9c>
 8004ebe:	0758      	lsls	r0, r3, #29
 8004ec0:	d512      	bpl.n	8004ee8 <__swsetup_r+0x5c>
 8004ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ec4:	b141      	cbz	r1, 8004ed8 <__swsetup_r+0x4c>
 8004ec6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004eca:	4299      	cmp	r1, r3
 8004ecc:	d002      	beq.n	8004ed4 <__swsetup_r+0x48>
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 f8ae 	bl	8005030 <_free_r>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	6363      	str	r3, [r4, #52]	; 0x34
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ede:	81a3      	strh	r3, [r4, #12]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	6063      	str	r3, [r4, #4]
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	6023      	str	r3, [r4, #0]
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	f043 0308 	orr.w	r3, r3, #8
 8004eee:	81a3      	strh	r3, [r4, #12]
 8004ef0:	6923      	ldr	r3, [r4, #16]
 8004ef2:	b94b      	cbnz	r3, 8004f08 <__swsetup_r+0x7c>
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efe:	d003      	beq.n	8004f08 <__swsetup_r+0x7c>
 8004f00:	4621      	mov	r1, r4
 8004f02:	4628      	mov	r0, r5
 8004f04:	f000 fd34 	bl	8005970 <__smakebuf_r>
 8004f08:	89a0      	ldrh	r0, [r4, #12]
 8004f0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f0e:	f010 0301 	ands.w	r3, r0, #1
 8004f12:	d00a      	beq.n	8004f2a <__swsetup_r+0x9e>
 8004f14:	2300      	movs	r3, #0
 8004f16:	60a3      	str	r3, [r4, #8]
 8004f18:	6963      	ldr	r3, [r4, #20]
 8004f1a:	425b      	negs	r3, r3
 8004f1c:	61a3      	str	r3, [r4, #24]
 8004f1e:	6923      	ldr	r3, [r4, #16]
 8004f20:	b943      	cbnz	r3, 8004f34 <__swsetup_r+0xa8>
 8004f22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f26:	d1c4      	bne.n	8004eb2 <__swsetup_r+0x26>
 8004f28:	bd38      	pop	{r3, r4, r5, pc}
 8004f2a:	0781      	lsls	r1, r0, #30
 8004f2c:	bf58      	it	pl
 8004f2e:	6963      	ldrpl	r3, [r4, #20]
 8004f30:	60a3      	str	r3, [r4, #8]
 8004f32:	e7f4      	b.n	8004f1e <__swsetup_r+0x92>
 8004f34:	2000      	movs	r0, #0
 8004f36:	e7f7      	b.n	8004f28 <__swsetup_r+0x9c>
 8004f38:	20000090 	.word	0x20000090

08004f3c <memset>:
 8004f3c:	4402      	add	r2, r0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d100      	bne.n	8004f46 <memset+0xa>
 8004f44:	4770      	bx	lr
 8004f46:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4a:	e7f9      	b.n	8004f40 <memset+0x4>

08004f4c <_close_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4d06      	ldr	r5, [pc, #24]	; (8004f68 <_close_r+0x1c>)
 8004f50:	2300      	movs	r3, #0
 8004f52:	4604      	mov	r4, r0
 8004f54:	4608      	mov	r0, r1
 8004f56:	602b      	str	r3, [r5, #0]
 8004f58:	f7fc f90b 	bl	8001172 <_close>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d102      	bne.n	8004f66 <_close_r+0x1a>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	b103      	cbz	r3, 8004f66 <_close_r+0x1a>
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	2000034c 	.word	0x2000034c

08004f6c <_lseek_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4d07      	ldr	r5, [pc, #28]	; (8004f8c <_lseek_r+0x20>)
 8004f70:	4604      	mov	r4, r0
 8004f72:	4608      	mov	r0, r1
 8004f74:	4611      	mov	r1, r2
 8004f76:	2200      	movs	r2, #0
 8004f78:	602a      	str	r2, [r5, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f7fc f920 	bl	80011c0 <_lseek>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_lseek_r+0x1e>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_lseek_r+0x1e>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	2000034c 	.word	0x2000034c

08004f90 <_read_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4d07      	ldr	r5, [pc, #28]	; (8004fb0 <_read_r+0x20>)
 8004f94:	4604      	mov	r4, r0
 8004f96:	4608      	mov	r0, r1
 8004f98:	4611      	mov	r1, r2
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	602a      	str	r2, [r5, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f7fc f8ae 	bl	8001100 <_read>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_read_r+0x1e>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_read_r+0x1e>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	2000034c 	.word	0x2000034c

08004fb4 <_write_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4d07      	ldr	r5, [pc, #28]	; (8004fd4 <_write_r+0x20>)
 8004fb8:	4604      	mov	r4, r0
 8004fba:	4608      	mov	r0, r1
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7fc f8b9 	bl	800113a <_write>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_write_r+0x1e>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_write_r+0x1e>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	2000034c 	.word	0x2000034c

08004fd8 <__errno>:
 8004fd8:	4b01      	ldr	r3, [pc, #4]	; (8004fe0 <__errno+0x8>)
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000090 	.word	0x20000090

08004fe4 <__libc_init_array>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	4d0d      	ldr	r5, [pc, #52]	; (800501c <__libc_init_array+0x38>)
 8004fe8:	4c0d      	ldr	r4, [pc, #52]	; (8005020 <__libc_init_array+0x3c>)
 8004fea:	1b64      	subs	r4, r4, r5
 8004fec:	10a4      	asrs	r4, r4, #2
 8004fee:	2600      	movs	r6, #0
 8004ff0:	42a6      	cmp	r6, r4
 8004ff2:	d109      	bne.n	8005008 <__libc_init_array+0x24>
 8004ff4:	4d0b      	ldr	r5, [pc, #44]	; (8005024 <__libc_init_array+0x40>)
 8004ff6:	4c0c      	ldr	r4, [pc, #48]	; (8005028 <__libc_init_array+0x44>)
 8004ff8:	f000 fd5c 	bl	8005ab4 <_init>
 8004ffc:	1b64      	subs	r4, r4, r5
 8004ffe:	10a4      	asrs	r4, r4, #2
 8005000:	2600      	movs	r6, #0
 8005002:	42a6      	cmp	r6, r4
 8005004:	d105      	bne.n	8005012 <__libc_init_array+0x2e>
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	f855 3b04 	ldr.w	r3, [r5], #4
 800500c:	4798      	blx	r3
 800500e:	3601      	adds	r6, #1
 8005010:	e7ee      	b.n	8004ff0 <__libc_init_array+0xc>
 8005012:	f855 3b04 	ldr.w	r3, [r5], #4
 8005016:	4798      	blx	r3
 8005018:	3601      	adds	r6, #1
 800501a:	e7f2      	b.n	8005002 <__libc_init_array+0x1e>
 800501c:	08005da4 	.word	0x08005da4
 8005020:	08005da4 	.word	0x08005da4
 8005024:	08005da4 	.word	0x08005da4
 8005028:	08005da8 	.word	0x08005da8

0800502c <__retarget_lock_acquire_recursive>:
 800502c:	4770      	bx	lr

0800502e <__retarget_lock_release_recursive>:
 800502e:	4770      	bx	lr

08005030 <_free_r>:
 8005030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005032:	2900      	cmp	r1, #0
 8005034:	d044      	beq.n	80050c0 <_free_r+0x90>
 8005036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800503a:	9001      	str	r0, [sp, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f1a1 0404 	sub.w	r4, r1, #4
 8005042:	bfb8      	it	lt
 8005044:	18e4      	addlt	r4, r4, r3
 8005046:	f000 f8df 	bl	8005208 <__malloc_lock>
 800504a:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <_free_r+0x94>)
 800504c:	9801      	ldr	r0, [sp, #4]
 800504e:	6813      	ldr	r3, [r2, #0]
 8005050:	b933      	cbnz	r3, 8005060 <_free_r+0x30>
 8005052:	6063      	str	r3, [r4, #4]
 8005054:	6014      	str	r4, [r2, #0]
 8005056:	b003      	add	sp, #12
 8005058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800505c:	f000 b8da 	b.w	8005214 <__malloc_unlock>
 8005060:	42a3      	cmp	r3, r4
 8005062:	d908      	bls.n	8005076 <_free_r+0x46>
 8005064:	6825      	ldr	r5, [r4, #0]
 8005066:	1961      	adds	r1, r4, r5
 8005068:	428b      	cmp	r3, r1
 800506a:	bf01      	itttt	eq
 800506c:	6819      	ldreq	r1, [r3, #0]
 800506e:	685b      	ldreq	r3, [r3, #4]
 8005070:	1949      	addeq	r1, r1, r5
 8005072:	6021      	streq	r1, [r4, #0]
 8005074:	e7ed      	b.n	8005052 <_free_r+0x22>
 8005076:	461a      	mov	r2, r3
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	b10b      	cbz	r3, 8005080 <_free_r+0x50>
 800507c:	42a3      	cmp	r3, r4
 800507e:	d9fa      	bls.n	8005076 <_free_r+0x46>
 8005080:	6811      	ldr	r1, [r2, #0]
 8005082:	1855      	adds	r5, r2, r1
 8005084:	42a5      	cmp	r5, r4
 8005086:	d10b      	bne.n	80050a0 <_free_r+0x70>
 8005088:	6824      	ldr	r4, [r4, #0]
 800508a:	4421      	add	r1, r4
 800508c:	1854      	adds	r4, r2, r1
 800508e:	42a3      	cmp	r3, r4
 8005090:	6011      	str	r1, [r2, #0]
 8005092:	d1e0      	bne.n	8005056 <_free_r+0x26>
 8005094:	681c      	ldr	r4, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	6053      	str	r3, [r2, #4]
 800509a:	440c      	add	r4, r1
 800509c:	6014      	str	r4, [r2, #0]
 800509e:	e7da      	b.n	8005056 <_free_r+0x26>
 80050a0:	d902      	bls.n	80050a8 <_free_r+0x78>
 80050a2:	230c      	movs	r3, #12
 80050a4:	6003      	str	r3, [r0, #0]
 80050a6:	e7d6      	b.n	8005056 <_free_r+0x26>
 80050a8:	6825      	ldr	r5, [r4, #0]
 80050aa:	1961      	adds	r1, r4, r5
 80050ac:	428b      	cmp	r3, r1
 80050ae:	bf04      	itt	eq
 80050b0:	6819      	ldreq	r1, [r3, #0]
 80050b2:	685b      	ldreq	r3, [r3, #4]
 80050b4:	6063      	str	r3, [r4, #4]
 80050b6:	bf04      	itt	eq
 80050b8:	1949      	addeq	r1, r1, r5
 80050ba:	6021      	streq	r1, [r4, #0]
 80050bc:	6054      	str	r4, [r2, #4]
 80050be:	e7ca      	b.n	8005056 <_free_r+0x26>
 80050c0:	b003      	add	sp, #12
 80050c2:	bd30      	pop	{r4, r5, pc}
 80050c4:	20000354 	.word	0x20000354

080050c8 <sbrk_aligned>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4e0e      	ldr	r6, [pc, #56]	; (8005104 <sbrk_aligned+0x3c>)
 80050cc:	460c      	mov	r4, r1
 80050ce:	6831      	ldr	r1, [r6, #0]
 80050d0:	4605      	mov	r5, r0
 80050d2:	b911      	cbnz	r1, 80050da <sbrk_aligned+0x12>
 80050d4:	f000 fcde 	bl	8005a94 <_sbrk_r>
 80050d8:	6030      	str	r0, [r6, #0]
 80050da:	4621      	mov	r1, r4
 80050dc:	4628      	mov	r0, r5
 80050de:	f000 fcd9 	bl	8005a94 <_sbrk_r>
 80050e2:	1c43      	adds	r3, r0, #1
 80050e4:	d00a      	beq.n	80050fc <sbrk_aligned+0x34>
 80050e6:	1cc4      	adds	r4, r0, #3
 80050e8:	f024 0403 	bic.w	r4, r4, #3
 80050ec:	42a0      	cmp	r0, r4
 80050ee:	d007      	beq.n	8005100 <sbrk_aligned+0x38>
 80050f0:	1a21      	subs	r1, r4, r0
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 fcce 	bl	8005a94 <_sbrk_r>
 80050f8:	3001      	adds	r0, #1
 80050fa:	d101      	bne.n	8005100 <sbrk_aligned+0x38>
 80050fc:	f04f 34ff 	mov.w	r4, #4294967295
 8005100:	4620      	mov	r0, r4
 8005102:	bd70      	pop	{r4, r5, r6, pc}
 8005104:	20000358 	.word	0x20000358

08005108 <_malloc_r>:
 8005108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800510c:	1ccd      	adds	r5, r1, #3
 800510e:	f025 0503 	bic.w	r5, r5, #3
 8005112:	3508      	adds	r5, #8
 8005114:	2d0c      	cmp	r5, #12
 8005116:	bf38      	it	cc
 8005118:	250c      	movcc	r5, #12
 800511a:	2d00      	cmp	r5, #0
 800511c:	4607      	mov	r7, r0
 800511e:	db01      	blt.n	8005124 <_malloc_r+0x1c>
 8005120:	42a9      	cmp	r1, r5
 8005122:	d905      	bls.n	8005130 <_malloc_r+0x28>
 8005124:	230c      	movs	r3, #12
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	2600      	movs	r6, #0
 800512a:	4630      	mov	r0, r6
 800512c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005130:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005204 <_malloc_r+0xfc>
 8005134:	f000 f868 	bl	8005208 <__malloc_lock>
 8005138:	f8d8 3000 	ldr.w	r3, [r8]
 800513c:	461c      	mov	r4, r3
 800513e:	bb5c      	cbnz	r4, 8005198 <_malloc_r+0x90>
 8005140:	4629      	mov	r1, r5
 8005142:	4638      	mov	r0, r7
 8005144:	f7ff ffc0 	bl	80050c8 <sbrk_aligned>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	4604      	mov	r4, r0
 800514c:	d155      	bne.n	80051fa <_malloc_r+0xf2>
 800514e:	f8d8 4000 	ldr.w	r4, [r8]
 8005152:	4626      	mov	r6, r4
 8005154:	2e00      	cmp	r6, #0
 8005156:	d145      	bne.n	80051e4 <_malloc_r+0xdc>
 8005158:	2c00      	cmp	r4, #0
 800515a:	d048      	beq.n	80051ee <_malloc_r+0xe6>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	4631      	mov	r1, r6
 8005160:	4638      	mov	r0, r7
 8005162:	eb04 0903 	add.w	r9, r4, r3
 8005166:	f000 fc95 	bl	8005a94 <_sbrk_r>
 800516a:	4581      	cmp	r9, r0
 800516c:	d13f      	bne.n	80051ee <_malloc_r+0xe6>
 800516e:	6821      	ldr	r1, [r4, #0]
 8005170:	1a6d      	subs	r5, r5, r1
 8005172:	4629      	mov	r1, r5
 8005174:	4638      	mov	r0, r7
 8005176:	f7ff ffa7 	bl	80050c8 <sbrk_aligned>
 800517a:	3001      	adds	r0, #1
 800517c:	d037      	beq.n	80051ee <_malloc_r+0xe6>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	442b      	add	r3, r5
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	f8d8 3000 	ldr.w	r3, [r8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d038      	beq.n	80051fe <_malloc_r+0xf6>
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	42a2      	cmp	r2, r4
 8005190:	d12b      	bne.n	80051ea <_malloc_r+0xe2>
 8005192:	2200      	movs	r2, #0
 8005194:	605a      	str	r2, [r3, #4]
 8005196:	e00f      	b.n	80051b8 <_malloc_r+0xb0>
 8005198:	6822      	ldr	r2, [r4, #0]
 800519a:	1b52      	subs	r2, r2, r5
 800519c:	d41f      	bmi.n	80051de <_malloc_r+0xd6>
 800519e:	2a0b      	cmp	r2, #11
 80051a0:	d917      	bls.n	80051d2 <_malloc_r+0xca>
 80051a2:	1961      	adds	r1, r4, r5
 80051a4:	42a3      	cmp	r3, r4
 80051a6:	6025      	str	r5, [r4, #0]
 80051a8:	bf18      	it	ne
 80051aa:	6059      	strne	r1, [r3, #4]
 80051ac:	6863      	ldr	r3, [r4, #4]
 80051ae:	bf08      	it	eq
 80051b0:	f8c8 1000 	streq.w	r1, [r8]
 80051b4:	5162      	str	r2, [r4, r5]
 80051b6:	604b      	str	r3, [r1, #4]
 80051b8:	4638      	mov	r0, r7
 80051ba:	f104 060b 	add.w	r6, r4, #11
 80051be:	f000 f829 	bl	8005214 <__malloc_unlock>
 80051c2:	f026 0607 	bic.w	r6, r6, #7
 80051c6:	1d23      	adds	r3, r4, #4
 80051c8:	1af2      	subs	r2, r6, r3
 80051ca:	d0ae      	beq.n	800512a <_malloc_r+0x22>
 80051cc:	1b9b      	subs	r3, r3, r6
 80051ce:	50a3      	str	r3, [r4, r2]
 80051d0:	e7ab      	b.n	800512a <_malloc_r+0x22>
 80051d2:	42a3      	cmp	r3, r4
 80051d4:	6862      	ldr	r2, [r4, #4]
 80051d6:	d1dd      	bne.n	8005194 <_malloc_r+0x8c>
 80051d8:	f8c8 2000 	str.w	r2, [r8]
 80051dc:	e7ec      	b.n	80051b8 <_malloc_r+0xb0>
 80051de:	4623      	mov	r3, r4
 80051e0:	6864      	ldr	r4, [r4, #4]
 80051e2:	e7ac      	b.n	800513e <_malloc_r+0x36>
 80051e4:	4634      	mov	r4, r6
 80051e6:	6876      	ldr	r6, [r6, #4]
 80051e8:	e7b4      	b.n	8005154 <_malloc_r+0x4c>
 80051ea:	4613      	mov	r3, r2
 80051ec:	e7cc      	b.n	8005188 <_malloc_r+0x80>
 80051ee:	230c      	movs	r3, #12
 80051f0:	603b      	str	r3, [r7, #0]
 80051f2:	4638      	mov	r0, r7
 80051f4:	f000 f80e 	bl	8005214 <__malloc_unlock>
 80051f8:	e797      	b.n	800512a <_malloc_r+0x22>
 80051fa:	6025      	str	r5, [r4, #0]
 80051fc:	e7dc      	b.n	80051b8 <_malloc_r+0xb0>
 80051fe:	605b      	str	r3, [r3, #4]
 8005200:	deff      	udf	#255	; 0xff
 8005202:	bf00      	nop
 8005204:	20000354 	.word	0x20000354

08005208 <__malloc_lock>:
 8005208:	4801      	ldr	r0, [pc, #4]	; (8005210 <__malloc_lock+0x8>)
 800520a:	f7ff bf0f 	b.w	800502c <__retarget_lock_acquire_recursive>
 800520e:	bf00      	nop
 8005210:	20000350 	.word	0x20000350

08005214 <__malloc_unlock>:
 8005214:	4801      	ldr	r0, [pc, #4]	; (800521c <__malloc_unlock+0x8>)
 8005216:	f7ff bf0a 	b.w	800502e <__retarget_lock_release_recursive>
 800521a:	bf00      	nop
 800521c:	20000350 	.word	0x20000350

08005220 <__sfputc_r>:
 8005220:	6893      	ldr	r3, [r2, #8]
 8005222:	3b01      	subs	r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	b410      	push	{r4}
 8005228:	6093      	str	r3, [r2, #8]
 800522a:	da08      	bge.n	800523e <__sfputc_r+0x1e>
 800522c:	6994      	ldr	r4, [r2, #24]
 800522e:	42a3      	cmp	r3, r4
 8005230:	db01      	blt.n	8005236 <__sfputc_r+0x16>
 8005232:	290a      	cmp	r1, #10
 8005234:	d103      	bne.n	800523e <__sfputc_r+0x1e>
 8005236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800523a:	f7ff bdea 	b.w	8004e12 <__swbuf_r>
 800523e:	6813      	ldr	r3, [r2, #0]
 8005240:	1c58      	adds	r0, r3, #1
 8005242:	6010      	str	r0, [r2, #0]
 8005244:	7019      	strb	r1, [r3, #0]
 8005246:	4608      	mov	r0, r1
 8005248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800524c:	4770      	bx	lr

0800524e <__sfputs_r>:
 800524e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005250:	4606      	mov	r6, r0
 8005252:	460f      	mov	r7, r1
 8005254:	4614      	mov	r4, r2
 8005256:	18d5      	adds	r5, r2, r3
 8005258:	42ac      	cmp	r4, r5
 800525a:	d101      	bne.n	8005260 <__sfputs_r+0x12>
 800525c:	2000      	movs	r0, #0
 800525e:	e007      	b.n	8005270 <__sfputs_r+0x22>
 8005260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005264:	463a      	mov	r2, r7
 8005266:	4630      	mov	r0, r6
 8005268:	f7ff ffda 	bl	8005220 <__sfputc_r>
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d1f3      	bne.n	8005258 <__sfputs_r+0xa>
 8005270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005274 <_vfiprintf_r>:
 8005274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005278:	460d      	mov	r5, r1
 800527a:	b09d      	sub	sp, #116	; 0x74
 800527c:	4614      	mov	r4, r2
 800527e:	4698      	mov	r8, r3
 8005280:	4606      	mov	r6, r0
 8005282:	b118      	cbz	r0, 800528c <_vfiprintf_r+0x18>
 8005284:	6a03      	ldr	r3, [r0, #32]
 8005286:	b90b      	cbnz	r3, 800528c <_vfiprintf_r+0x18>
 8005288:	f7ff fcd4 	bl	8004c34 <__sinit>
 800528c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800528e:	07d9      	lsls	r1, r3, #31
 8005290:	d405      	bmi.n	800529e <_vfiprintf_r+0x2a>
 8005292:	89ab      	ldrh	r3, [r5, #12]
 8005294:	059a      	lsls	r2, r3, #22
 8005296:	d402      	bmi.n	800529e <_vfiprintf_r+0x2a>
 8005298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800529a:	f7ff fec7 	bl	800502c <__retarget_lock_acquire_recursive>
 800529e:	89ab      	ldrh	r3, [r5, #12]
 80052a0:	071b      	lsls	r3, r3, #28
 80052a2:	d501      	bpl.n	80052a8 <_vfiprintf_r+0x34>
 80052a4:	692b      	ldr	r3, [r5, #16]
 80052a6:	b99b      	cbnz	r3, 80052d0 <_vfiprintf_r+0x5c>
 80052a8:	4629      	mov	r1, r5
 80052aa:	4630      	mov	r0, r6
 80052ac:	f7ff fdee 	bl	8004e8c <__swsetup_r>
 80052b0:	b170      	cbz	r0, 80052d0 <_vfiprintf_r+0x5c>
 80052b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052b4:	07dc      	lsls	r4, r3, #31
 80052b6:	d504      	bpl.n	80052c2 <_vfiprintf_r+0x4e>
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	b01d      	add	sp, #116	; 0x74
 80052be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c2:	89ab      	ldrh	r3, [r5, #12]
 80052c4:	0598      	lsls	r0, r3, #22
 80052c6:	d4f7      	bmi.n	80052b8 <_vfiprintf_r+0x44>
 80052c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052ca:	f7ff feb0 	bl	800502e <__retarget_lock_release_recursive>
 80052ce:	e7f3      	b.n	80052b8 <_vfiprintf_r+0x44>
 80052d0:	2300      	movs	r3, #0
 80052d2:	9309      	str	r3, [sp, #36]	; 0x24
 80052d4:	2320      	movs	r3, #32
 80052d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052da:	f8cd 800c 	str.w	r8, [sp, #12]
 80052de:	2330      	movs	r3, #48	; 0x30
 80052e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005494 <_vfiprintf_r+0x220>
 80052e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052e8:	f04f 0901 	mov.w	r9, #1
 80052ec:	4623      	mov	r3, r4
 80052ee:	469a      	mov	sl, r3
 80052f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052f4:	b10a      	cbz	r2, 80052fa <_vfiprintf_r+0x86>
 80052f6:	2a25      	cmp	r2, #37	; 0x25
 80052f8:	d1f9      	bne.n	80052ee <_vfiprintf_r+0x7a>
 80052fa:	ebba 0b04 	subs.w	fp, sl, r4
 80052fe:	d00b      	beq.n	8005318 <_vfiprintf_r+0xa4>
 8005300:	465b      	mov	r3, fp
 8005302:	4622      	mov	r2, r4
 8005304:	4629      	mov	r1, r5
 8005306:	4630      	mov	r0, r6
 8005308:	f7ff ffa1 	bl	800524e <__sfputs_r>
 800530c:	3001      	adds	r0, #1
 800530e:	f000 80a9 	beq.w	8005464 <_vfiprintf_r+0x1f0>
 8005312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005314:	445a      	add	r2, fp
 8005316:	9209      	str	r2, [sp, #36]	; 0x24
 8005318:	f89a 3000 	ldrb.w	r3, [sl]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 80a1 	beq.w	8005464 <_vfiprintf_r+0x1f0>
 8005322:	2300      	movs	r3, #0
 8005324:	f04f 32ff 	mov.w	r2, #4294967295
 8005328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800532c:	f10a 0a01 	add.w	sl, sl, #1
 8005330:	9304      	str	r3, [sp, #16]
 8005332:	9307      	str	r3, [sp, #28]
 8005334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005338:	931a      	str	r3, [sp, #104]	; 0x68
 800533a:	4654      	mov	r4, sl
 800533c:	2205      	movs	r2, #5
 800533e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005342:	4854      	ldr	r0, [pc, #336]	; (8005494 <_vfiprintf_r+0x220>)
 8005344:	f7fa ff74 	bl	8000230 <memchr>
 8005348:	9a04      	ldr	r2, [sp, #16]
 800534a:	b9d8      	cbnz	r0, 8005384 <_vfiprintf_r+0x110>
 800534c:	06d1      	lsls	r1, r2, #27
 800534e:	bf44      	itt	mi
 8005350:	2320      	movmi	r3, #32
 8005352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005356:	0713      	lsls	r3, r2, #28
 8005358:	bf44      	itt	mi
 800535a:	232b      	movmi	r3, #43	; 0x2b
 800535c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005360:	f89a 3000 	ldrb.w	r3, [sl]
 8005364:	2b2a      	cmp	r3, #42	; 0x2a
 8005366:	d015      	beq.n	8005394 <_vfiprintf_r+0x120>
 8005368:	9a07      	ldr	r2, [sp, #28]
 800536a:	4654      	mov	r4, sl
 800536c:	2000      	movs	r0, #0
 800536e:	f04f 0c0a 	mov.w	ip, #10
 8005372:	4621      	mov	r1, r4
 8005374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005378:	3b30      	subs	r3, #48	; 0x30
 800537a:	2b09      	cmp	r3, #9
 800537c:	d94d      	bls.n	800541a <_vfiprintf_r+0x1a6>
 800537e:	b1b0      	cbz	r0, 80053ae <_vfiprintf_r+0x13a>
 8005380:	9207      	str	r2, [sp, #28]
 8005382:	e014      	b.n	80053ae <_vfiprintf_r+0x13a>
 8005384:	eba0 0308 	sub.w	r3, r0, r8
 8005388:	fa09 f303 	lsl.w	r3, r9, r3
 800538c:	4313      	orrs	r3, r2
 800538e:	9304      	str	r3, [sp, #16]
 8005390:	46a2      	mov	sl, r4
 8005392:	e7d2      	b.n	800533a <_vfiprintf_r+0xc6>
 8005394:	9b03      	ldr	r3, [sp, #12]
 8005396:	1d19      	adds	r1, r3, #4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	9103      	str	r1, [sp, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	bfbb      	ittet	lt
 80053a0:	425b      	neglt	r3, r3
 80053a2:	f042 0202 	orrlt.w	r2, r2, #2
 80053a6:	9307      	strge	r3, [sp, #28]
 80053a8:	9307      	strlt	r3, [sp, #28]
 80053aa:	bfb8      	it	lt
 80053ac:	9204      	strlt	r2, [sp, #16]
 80053ae:	7823      	ldrb	r3, [r4, #0]
 80053b0:	2b2e      	cmp	r3, #46	; 0x2e
 80053b2:	d10c      	bne.n	80053ce <_vfiprintf_r+0x15a>
 80053b4:	7863      	ldrb	r3, [r4, #1]
 80053b6:	2b2a      	cmp	r3, #42	; 0x2a
 80053b8:	d134      	bne.n	8005424 <_vfiprintf_r+0x1b0>
 80053ba:	9b03      	ldr	r3, [sp, #12]
 80053bc:	1d1a      	adds	r2, r3, #4
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	9203      	str	r2, [sp, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	bfb8      	it	lt
 80053c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80053ca:	3402      	adds	r4, #2
 80053cc:	9305      	str	r3, [sp, #20]
 80053ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80054a4 <_vfiprintf_r+0x230>
 80053d2:	7821      	ldrb	r1, [r4, #0]
 80053d4:	2203      	movs	r2, #3
 80053d6:	4650      	mov	r0, sl
 80053d8:	f7fa ff2a 	bl	8000230 <memchr>
 80053dc:	b138      	cbz	r0, 80053ee <_vfiprintf_r+0x17a>
 80053de:	9b04      	ldr	r3, [sp, #16]
 80053e0:	eba0 000a 	sub.w	r0, r0, sl
 80053e4:	2240      	movs	r2, #64	; 0x40
 80053e6:	4082      	lsls	r2, r0
 80053e8:	4313      	orrs	r3, r2
 80053ea:	3401      	adds	r4, #1
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f2:	4829      	ldr	r0, [pc, #164]	; (8005498 <_vfiprintf_r+0x224>)
 80053f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053f8:	2206      	movs	r2, #6
 80053fa:	f7fa ff19 	bl	8000230 <memchr>
 80053fe:	2800      	cmp	r0, #0
 8005400:	d03f      	beq.n	8005482 <_vfiprintf_r+0x20e>
 8005402:	4b26      	ldr	r3, [pc, #152]	; (800549c <_vfiprintf_r+0x228>)
 8005404:	bb1b      	cbnz	r3, 800544e <_vfiprintf_r+0x1da>
 8005406:	9b03      	ldr	r3, [sp, #12]
 8005408:	3307      	adds	r3, #7
 800540a:	f023 0307 	bic.w	r3, r3, #7
 800540e:	3308      	adds	r3, #8
 8005410:	9303      	str	r3, [sp, #12]
 8005412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005414:	443b      	add	r3, r7
 8005416:	9309      	str	r3, [sp, #36]	; 0x24
 8005418:	e768      	b.n	80052ec <_vfiprintf_r+0x78>
 800541a:	fb0c 3202 	mla	r2, ip, r2, r3
 800541e:	460c      	mov	r4, r1
 8005420:	2001      	movs	r0, #1
 8005422:	e7a6      	b.n	8005372 <_vfiprintf_r+0xfe>
 8005424:	2300      	movs	r3, #0
 8005426:	3401      	adds	r4, #1
 8005428:	9305      	str	r3, [sp, #20]
 800542a:	4619      	mov	r1, r3
 800542c:	f04f 0c0a 	mov.w	ip, #10
 8005430:	4620      	mov	r0, r4
 8005432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005436:	3a30      	subs	r2, #48	; 0x30
 8005438:	2a09      	cmp	r2, #9
 800543a:	d903      	bls.n	8005444 <_vfiprintf_r+0x1d0>
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0c6      	beq.n	80053ce <_vfiprintf_r+0x15a>
 8005440:	9105      	str	r1, [sp, #20]
 8005442:	e7c4      	b.n	80053ce <_vfiprintf_r+0x15a>
 8005444:	fb0c 2101 	mla	r1, ip, r1, r2
 8005448:	4604      	mov	r4, r0
 800544a:	2301      	movs	r3, #1
 800544c:	e7f0      	b.n	8005430 <_vfiprintf_r+0x1bc>
 800544e:	ab03      	add	r3, sp, #12
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	462a      	mov	r2, r5
 8005454:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <_vfiprintf_r+0x22c>)
 8005456:	a904      	add	r1, sp, #16
 8005458:	4630      	mov	r0, r6
 800545a:	f3af 8000 	nop.w
 800545e:	4607      	mov	r7, r0
 8005460:	1c78      	adds	r0, r7, #1
 8005462:	d1d6      	bne.n	8005412 <_vfiprintf_r+0x19e>
 8005464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005466:	07d9      	lsls	r1, r3, #31
 8005468:	d405      	bmi.n	8005476 <_vfiprintf_r+0x202>
 800546a:	89ab      	ldrh	r3, [r5, #12]
 800546c:	059a      	lsls	r2, r3, #22
 800546e:	d402      	bmi.n	8005476 <_vfiprintf_r+0x202>
 8005470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005472:	f7ff fddc 	bl	800502e <__retarget_lock_release_recursive>
 8005476:	89ab      	ldrh	r3, [r5, #12]
 8005478:	065b      	lsls	r3, r3, #25
 800547a:	f53f af1d 	bmi.w	80052b8 <_vfiprintf_r+0x44>
 800547e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005480:	e71c      	b.n	80052bc <_vfiprintf_r+0x48>
 8005482:	ab03      	add	r3, sp, #12
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	462a      	mov	r2, r5
 8005488:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <_vfiprintf_r+0x22c>)
 800548a:	a904      	add	r1, sp, #16
 800548c:	4630      	mov	r0, r6
 800548e:	f000 f879 	bl	8005584 <_printf_i>
 8005492:	e7e4      	b.n	800545e <_vfiprintf_r+0x1ea>
 8005494:	08005d69 	.word	0x08005d69
 8005498:	08005d73 	.word	0x08005d73
 800549c:	00000000 	.word	0x00000000
 80054a0:	0800524f 	.word	0x0800524f
 80054a4:	08005d6f 	.word	0x08005d6f

080054a8 <_printf_common>:
 80054a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ac:	4616      	mov	r6, r2
 80054ae:	4699      	mov	r9, r3
 80054b0:	688a      	ldr	r2, [r1, #8]
 80054b2:	690b      	ldr	r3, [r1, #16]
 80054b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054b8:	4293      	cmp	r3, r2
 80054ba:	bfb8      	it	lt
 80054bc:	4613      	movlt	r3, r2
 80054be:	6033      	str	r3, [r6, #0]
 80054c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054c4:	4607      	mov	r7, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	b10a      	cbz	r2, 80054ce <_printf_common+0x26>
 80054ca:	3301      	adds	r3, #1
 80054cc:	6033      	str	r3, [r6, #0]
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	0699      	lsls	r1, r3, #26
 80054d2:	bf42      	ittt	mi
 80054d4:	6833      	ldrmi	r3, [r6, #0]
 80054d6:	3302      	addmi	r3, #2
 80054d8:	6033      	strmi	r3, [r6, #0]
 80054da:	6825      	ldr	r5, [r4, #0]
 80054dc:	f015 0506 	ands.w	r5, r5, #6
 80054e0:	d106      	bne.n	80054f0 <_printf_common+0x48>
 80054e2:	f104 0a19 	add.w	sl, r4, #25
 80054e6:	68e3      	ldr	r3, [r4, #12]
 80054e8:	6832      	ldr	r2, [r6, #0]
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	42ab      	cmp	r3, r5
 80054ee:	dc26      	bgt.n	800553e <_printf_common+0x96>
 80054f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054f4:	1e13      	subs	r3, r2, #0
 80054f6:	6822      	ldr	r2, [r4, #0]
 80054f8:	bf18      	it	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	0692      	lsls	r2, r2, #26
 80054fe:	d42b      	bmi.n	8005558 <_printf_common+0xb0>
 8005500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005504:	4649      	mov	r1, r9
 8005506:	4638      	mov	r0, r7
 8005508:	47c0      	blx	r8
 800550a:	3001      	adds	r0, #1
 800550c:	d01e      	beq.n	800554c <_printf_common+0xa4>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	6922      	ldr	r2, [r4, #16]
 8005512:	f003 0306 	and.w	r3, r3, #6
 8005516:	2b04      	cmp	r3, #4
 8005518:	bf02      	ittt	eq
 800551a:	68e5      	ldreq	r5, [r4, #12]
 800551c:	6833      	ldreq	r3, [r6, #0]
 800551e:	1aed      	subeq	r5, r5, r3
 8005520:	68a3      	ldr	r3, [r4, #8]
 8005522:	bf0c      	ite	eq
 8005524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005528:	2500      	movne	r5, #0
 800552a:	4293      	cmp	r3, r2
 800552c:	bfc4      	itt	gt
 800552e:	1a9b      	subgt	r3, r3, r2
 8005530:	18ed      	addgt	r5, r5, r3
 8005532:	2600      	movs	r6, #0
 8005534:	341a      	adds	r4, #26
 8005536:	42b5      	cmp	r5, r6
 8005538:	d11a      	bne.n	8005570 <_printf_common+0xc8>
 800553a:	2000      	movs	r0, #0
 800553c:	e008      	b.n	8005550 <_printf_common+0xa8>
 800553e:	2301      	movs	r3, #1
 8005540:	4652      	mov	r2, sl
 8005542:	4649      	mov	r1, r9
 8005544:	4638      	mov	r0, r7
 8005546:	47c0      	blx	r8
 8005548:	3001      	adds	r0, #1
 800554a:	d103      	bne.n	8005554 <_printf_common+0xac>
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005554:	3501      	adds	r5, #1
 8005556:	e7c6      	b.n	80054e6 <_printf_common+0x3e>
 8005558:	18e1      	adds	r1, r4, r3
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	2030      	movs	r0, #48	; 0x30
 800555e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005562:	4422      	add	r2, r4
 8005564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800556c:	3302      	adds	r3, #2
 800556e:	e7c7      	b.n	8005500 <_printf_common+0x58>
 8005570:	2301      	movs	r3, #1
 8005572:	4622      	mov	r2, r4
 8005574:	4649      	mov	r1, r9
 8005576:	4638      	mov	r0, r7
 8005578:	47c0      	blx	r8
 800557a:	3001      	adds	r0, #1
 800557c:	d0e6      	beq.n	800554c <_printf_common+0xa4>
 800557e:	3601      	adds	r6, #1
 8005580:	e7d9      	b.n	8005536 <_printf_common+0x8e>
	...

08005584 <_printf_i>:
 8005584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	7e0f      	ldrb	r7, [r1, #24]
 800558a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800558c:	2f78      	cmp	r7, #120	; 0x78
 800558e:	4691      	mov	r9, r2
 8005590:	4680      	mov	r8, r0
 8005592:	460c      	mov	r4, r1
 8005594:	469a      	mov	sl, r3
 8005596:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800559a:	d807      	bhi.n	80055ac <_printf_i+0x28>
 800559c:	2f62      	cmp	r7, #98	; 0x62
 800559e:	d80a      	bhi.n	80055b6 <_printf_i+0x32>
 80055a0:	2f00      	cmp	r7, #0
 80055a2:	f000 80d4 	beq.w	800574e <_printf_i+0x1ca>
 80055a6:	2f58      	cmp	r7, #88	; 0x58
 80055a8:	f000 80c0 	beq.w	800572c <_printf_i+0x1a8>
 80055ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055b4:	e03a      	b.n	800562c <_printf_i+0xa8>
 80055b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ba:	2b15      	cmp	r3, #21
 80055bc:	d8f6      	bhi.n	80055ac <_printf_i+0x28>
 80055be:	a101      	add	r1, pc, #4	; (adr r1, 80055c4 <_printf_i+0x40>)
 80055c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055c4:	0800561d 	.word	0x0800561d
 80055c8:	08005631 	.word	0x08005631
 80055cc:	080055ad 	.word	0x080055ad
 80055d0:	080055ad 	.word	0x080055ad
 80055d4:	080055ad 	.word	0x080055ad
 80055d8:	080055ad 	.word	0x080055ad
 80055dc:	08005631 	.word	0x08005631
 80055e0:	080055ad 	.word	0x080055ad
 80055e4:	080055ad 	.word	0x080055ad
 80055e8:	080055ad 	.word	0x080055ad
 80055ec:	080055ad 	.word	0x080055ad
 80055f0:	08005735 	.word	0x08005735
 80055f4:	0800565d 	.word	0x0800565d
 80055f8:	080056ef 	.word	0x080056ef
 80055fc:	080055ad 	.word	0x080055ad
 8005600:	080055ad 	.word	0x080055ad
 8005604:	08005757 	.word	0x08005757
 8005608:	080055ad 	.word	0x080055ad
 800560c:	0800565d 	.word	0x0800565d
 8005610:	080055ad 	.word	0x080055ad
 8005614:	080055ad 	.word	0x080055ad
 8005618:	080056f7 	.word	0x080056f7
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	1d1a      	adds	r2, r3, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	602a      	str	r2, [r5, #0]
 8005624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800562c:	2301      	movs	r3, #1
 800562e:	e09f      	b.n	8005770 <_printf_i+0x1ec>
 8005630:	6820      	ldr	r0, [r4, #0]
 8005632:	682b      	ldr	r3, [r5, #0]
 8005634:	0607      	lsls	r7, r0, #24
 8005636:	f103 0104 	add.w	r1, r3, #4
 800563a:	6029      	str	r1, [r5, #0]
 800563c:	d501      	bpl.n	8005642 <_printf_i+0xbe>
 800563e:	681e      	ldr	r6, [r3, #0]
 8005640:	e003      	b.n	800564a <_printf_i+0xc6>
 8005642:	0646      	lsls	r6, r0, #25
 8005644:	d5fb      	bpl.n	800563e <_printf_i+0xba>
 8005646:	f9b3 6000 	ldrsh.w	r6, [r3]
 800564a:	2e00      	cmp	r6, #0
 800564c:	da03      	bge.n	8005656 <_printf_i+0xd2>
 800564e:	232d      	movs	r3, #45	; 0x2d
 8005650:	4276      	negs	r6, r6
 8005652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005656:	485a      	ldr	r0, [pc, #360]	; (80057c0 <_printf_i+0x23c>)
 8005658:	230a      	movs	r3, #10
 800565a:	e012      	b.n	8005682 <_printf_i+0xfe>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	6820      	ldr	r0, [r4, #0]
 8005660:	1d19      	adds	r1, r3, #4
 8005662:	6029      	str	r1, [r5, #0]
 8005664:	0605      	lsls	r5, r0, #24
 8005666:	d501      	bpl.n	800566c <_printf_i+0xe8>
 8005668:	681e      	ldr	r6, [r3, #0]
 800566a:	e002      	b.n	8005672 <_printf_i+0xee>
 800566c:	0641      	lsls	r1, r0, #25
 800566e:	d5fb      	bpl.n	8005668 <_printf_i+0xe4>
 8005670:	881e      	ldrh	r6, [r3, #0]
 8005672:	4853      	ldr	r0, [pc, #332]	; (80057c0 <_printf_i+0x23c>)
 8005674:	2f6f      	cmp	r7, #111	; 0x6f
 8005676:	bf0c      	ite	eq
 8005678:	2308      	moveq	r3, #8
 800567a:	230a      	movne	r3, #10
 800567c:	2100      	movs	r1, #0
 800567e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005682:	6865      	ldr	r5, [r4, #4]
 8005684:	60a5      	str	r5, [r4, #8]
 8005686:	2d00      	cmp	r5, #0
 8005688:	bfa2      	ittt	ge
 800568a:	6821      	ldrge	r1, [r4, #0]
 800568c:	f021 0104 	bicge.w	r1, r1, #4
 8005690:	6021      	strge	r1, [r4, #0]
 8005692:	b90e      	cbnz	r6, 8005698 <_printf_i+0x114>
 8005694:	2d00      	cmp	r5, #0
 8005696:	d04b      	beq.n	8005730 <_printf_i+0x1ac>
 8005698:	4615      	mov	r5, r2
 800569a:	fbb6 f1f3 	udiv	r1, r6, r3
 800569e:	fb03 6711 	mls	r7, r3, r1, r6
 80056a2:	5dc7      	ldrb	r7, [r0, r7]
 80056a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056a8:	4637      	mov	r7, r6
 80056aa:	42bb      	cmp	r3, r7
 80056ac:	460e      	mov	r6, r1
 80056ae:	d9f4      	bls.n	800569a <_printf_i+0x116>
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d10b      	bne.n	80056cc <_printf_i+0x148>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	07de      	lsls	r6, r3, #31
 80056b8:	d508      	bpl.n	80056cc <_printf_i+0x148>
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	6861      	ldr	r1, [r4, #4]
 80056be:	4299      	cmp	r1, r3
 80056c0:	bfde      	ittt	le
 80056c2:	2330      	movle	r3, #48	; 0x30
 80056c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056cc:	1b52      	subs	r2, r2, r5
 80056ce:	6122      	str	r2, [r4, #16]
 80056d0:	f8cd a000 	str.w	sl, [sp]
 80056d4:	464b      	mov	r3, r9
 80056d6:	aa03      	add	r2, sp, #12
 80056d8:	4621      	mov	r1, r4
 80056da:	4640      	mov	r0, r8
 80056dc:	f7ff fee4 	bl	80054a8 <_printf_common>
 80056e0:	3001      	adds	r0, #1
 80056e2:	d14a      	bne.n	800577a <_printf_i+0x1f6>
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	b004      	add	sp, #16
 80056ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	f043 0320 	orr.w	r3, r3, #32
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	4833      	ldr	r0, [pc, #204]	; (80057c4 <_printf_i+0x240>)
 80056f8:	2778      	movs	r7, #120	; 0x78
 80056fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	6829      	ldr	r1, [r5, #0]
 8005702:	061f      	lsls	r7, r3, #24
 8005704:	f851 6b04 	ldr.w	r6, [r1], #4
 8005708:	d402      	bmi.n	8005710 <_printf_i+0x18c>
 800570a:	065f      	lsls	r7, r3, #25
 800570c:	bf48      	it	mi
 800570e:	b2b6      	uxthmi	r6, r6
 8005710:	07df      	lsls	r7, r3, #31
 8005712:	bf48      	it	mi
 8005714:	f043 0320 	orrmi.w	r3, r3, #32
 8005718:	6029      	str	r1, [r5, #0]
 800571a:	bf48      	it	mi
 800571c:	6023      	strmi	r3, [r4, #0]
 800571e:	b91e      	cbnz	r6, 8005728 <_printf_i+0x1a4>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	f023 0320 	bic.w	r3, r3, #32
 8005726:	6023      	str	r3, [r4, #0]
 8005728:	2310      	movs	r3, #16
 800572a:	e7a7      	b.n	800567c <_printf_i+0xf8>
 800572c:	4824      	ldr	r0, [pc, #144]	; (80057c0 <_printf_i+0x23c>)
 800572e:	e7e4      	b.n	80056fa <_printf_i+0x176>
 8005730:	4615      	mov	r5, r2
 8005732:	e7bd      	b.n	80056b0 <_printf_i+0x12c>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	6826      	ldr	r6, [r4, #0]
 8005738:	6961      	ldr	r1, [r4, #20]
 800573a:	1d18      	adds	r0, r3, #4
 800573c:	6028      	str	r0, [r5, #0]
 800573e:	0635      	lsls	r5, r6, #24
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	d501      	bpl.n	8005748 <_printf_i+0x1c4>
 8005744:	6019      	str	r1, [r3, #0]
 8005746:	e002      	b.n	800574e <_printf_i+0x1ca>
 8005748:	0670      	lsls	r0, r6, #25
 800574a:	d5fb      	bpl.n	8005744 <_printf_i+0x1c0>
 800574c:	8019      	strh	r1, [r3, #0]
 800574e:	2300      	movs	r3, #0
 8005750:	6123      	str	r3, [r4, #16]
 8005752:	4615      	mov	r5, r2
 8005754:	e7bc      	b.n	80056d0 <_printf_i+0x14c>
 8005756:	682b      	ldr	r3, [r5, #0]
 8005758:	1d1a      	adds	r2, r3, #4
 800575a:	602a      	str	r2, [r5, #0]
 800575c:	681d      	ldr	r5, [r3, #0]
 800575e:	6862      	ldr	r2, [r4, #4]
 8005760:	2100      	movs	r1, #0
 8005762:	4628      	mov	r0, r5
 8005764:	f7fa fd64 	bl	8000230 <memchr>
 8005768:	b108      	cbz	r0, 800576e <_printf_i+0x1ea>
 800576a:	1b40      	subs	r0, r0, r5
 800576c:	6060      	str	r0, [r4, #4]
 800576e:	6863      	ldr	r3, [r4, #4]
 8005770:	6123      	str	r3, [r4, #16]
 8005772:	2300      	movs	r3, #0
 8005774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005778:	e7aa      	b.n	80056d0 <_printf_i+0x14c>
 800577a:	6923      	ldr	r3, [r4, #16]
 800577c:	462a      	mov	r2, r5
 800577e:	4649      	mov	r1, r9
 8005780:	4640      	mov	r0, r8
 8005782:	47d0      	blx	sl
 8005784:	3001      	adds	r0, #1
 8005786:	d0ad      	beq.n	80056e4 <_printf_i+0x160>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	079b      	lsls	r3, r3, #30
 800578c:	d413      	bmi.n	80057b6 <_printf_i+0x232>
 800578e:	68e0      	ldr	r0, [r4, #12]
 8005790:	9b03      	ldr	r3, [sp, #12]
 8005792:	4298      	cmp	r0, r3
 8005794:	bfb8      	it	lt
 8005796:	4618      	movlt	r0, r3
 8005798:	e7a6      	b.n	80056e8 <_printf_i+0x164>
 800579a:	2301      	movs	r3, #1
 800579c:	4632      	mov	r2, r6
 800579e:	4649      	mov	r1, r9
 80057a0:	4640      	mov	r0, r8
 80057a2:	47d0      	blx	sl
 80057a4:	3001      	adds	r0, #1
 80057a6:	d09d      	beq.n	80056e4 <_printf_i+0x160>
 80057a8:	3501      	adds	r5, #1
 80057aa:	68e3      	ldr	r3, [r4, #12]
 80057ac:	9903      	ldr	r1, [sp, #12]
 80057ae:	1a5b      	subs	r3, r3, r1
 80057b0:	42ab      	cmp	r3, r5
 80057b2:	dcf2      	bgt.n	800579a <_printf_i+0x216>
 80057b4:	e7eb      	b.n	800578e <_printf_i+0x20a>
 80057b6:	2500      	movs	r5, #0
 80057b8:	f104 0619 	add.w	r6, r4, #25
 80057bc:	e7f5      	b.n	80057aa <_printf_i+0x226>
 80057be:	bf00      	nop
 80057c0:	08005d7a 	.word	0x08005d7a
 80057c4:	08005d8b 	.word	0x08005d8b

080057c8 <__sflush_r>:
 80057c8:	898a      	ldrh	r2, [r1, #12]
 80057ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ce:	4605      	mov	r5, r0
 80057d0:	0710      	lsls	r0, r2, #28
 80057d2:	460c      	mov	r4, r1
 80057d4:	d458      	bmi.n	8005888 <__sflush_r+0xc0>
 80057d6:	684b      	ldr	r3, [r1, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	dc05      	bgt.n	80057e8 <__sflush_r+0x20>
 80057dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	dc02      	bgt.n	80057e8 <__sflush_r+0x20>
 80057e2:	2000      	movs	r0, #0
 80057e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ea:	2e00      	cmp	r6, #0
 80057ec:	d0f9      	beq.n	80057e2 <__sflush_r+0x1a>
 80057ee:	2300      	movs	r3, #0
 80057f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057f4:	682f      	ldr	r7, [r5, #0]
 80057f6:	6a21      	ldr	r1, [r4, #32]
 80057f8:	602b      	str	r3, [r5, #0]
 80057fa:	d032      	beq.n	8005862 <__sflush_r+0x9a>
 80057fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057fe:	89a3      	ldrh	r3, [r4, #12]
 8005800:	075a      	lsls	r2, r3, #29
 8005802:	d505      	bpl.n	8005810 <__sflush_r+0x48>
 8005804:	6863      	ldr	r3, [r4, #4]
 8005806:	1ac0      	subs	r0, r0, r3
 8005808:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800580a:	b10b      	cbz	r3, 8005810 <__sflush_r+0x48>
 800580c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800580e:	1ac0      	subs	r0, r0, r3
 8005810:	2300      	movs	r3, #0
 8005812:	4602      	mov	r2, r0
 8005814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005816:	6a21      	ldr	r1, [r4, #32]
 8005818:	4628      	mov	r0, r5
 800581a:	47b0      	blx	r6
 800581c:	1c43      	adds	r3, r0, #1
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	d106      	bne.n	8005830 <__sflush_r+0x68>
 8005822:	6829      	ldr	r1, [r5, #0]
 8005824:	291d      	cmp	r1, #29
 8005826:	d82b      	bhi.n	8005880 <__sflush_r+0xb8>
 8005828:	4a29      	ldr	r2, [pc, #164]	; (80058d0 <__sflush_r+0x108>)
 800582a:	410a      	asrs	r2, r1
 800582c:	07d6      	lsls	r6, r2, #31
 800582e:	d427      	bmi.n	8005880 <__sflush_r+0xb8>
 8005830:	2200      	movs	r2, #0
 8005832:	6062      	str	r2, [r4, #4]
 8005834:	04d9      	lsls	r1, r3, #19
 8005836:	6922      	ldr	r2, [r4, #16]
 8005838:	6022      	str	r2, [r4, #0]
 800583a:	d504      	bpl.n	8005846 <__sflush_r+0x7e>
 800583c:	1c42      	adds	r2, r0, #1
 800583e:	d101      	bne.n	8005844 <__sflush_r+0x7c>
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	b903      	cbnz	r3, 8005846 <__sflush_r+0x7e>
 8005844:	6560      	str	r0, [r4, #84]	; 0x54
 8005846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005848:	602f      	str	r7, [r5, #0]
 800584a:	2900      	cmp	r1, #0
 800584c:	d0c9      	beq.n	80057e2 <__sflush_r+0x1a>
 800584e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005852:	4299      	cmp	r1, r3
 8005854:	d002      	beq.n	800585c <__sflush_r+0x94>
 8005856:	4628      	mov	r0, r5
 8005858:	f7ff fbea 	bl	8005030 <_free_r>
 800585c:	2000      	movs	r0, #0
 800585e:	6360      	str	r0, [r4, #52]	; 0x34
 8005860:	e7c0      	b.n	80057e4 <__sflush_r+0x1c>
 8005862:	2301      	movs	r3, #1
 8005864:	4628      	mov	r0, r5
 8005866:	47b0      	blx	r6
 8005868:	1c41      	adds	r1, r0, #1
 800586a:	d1c8      	bne.n	80057fe <__sflush_r+0x36>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0c5      	beq.n	80057fe <__sflush_r+0x36>
 8005872:	2b1d      	cmp	r3, #29
 8005874:	d001      	beq.n	800587a <__sflush_r+0xb2>
 8005876:	2b16      	cmp	r3, #22
 8005878:	d101      	bne.n	800587e <__sflush_r+0xb6>
 800587a:	602f      	str	r7, [r5, #0]
 800587c:	e7b1      	b.n	80057e2 <__sflush_r+0x1a>
 800587e:	89a3      	ldrh	r3, [r4, #12]
 8005880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005884:	81a3      	strh	r3, [r4, #12]
 8005886:	e7ad      	b.n	80057e4 <__sflush_r+0x1c>
 8005888:	690f      	ldr	r7, [r1, #16]
 800588a:	2f00      	cmp	r7, #0
 800588c:	d0a9      	beq.n	80057e2 <__sflush_r+0x1a>
 800588e:	0793      	lsls	r3, r2, #30
 8005890:	680e      	ldr	r6, [r1, #0]
 8005892:	bf08      	it	eq
 8005894:	694b      	ldreq	r3, [r1, #20]
 8005896:	600f      	str	r7, [r1, #0]
 8005898:	bf18      	it	ne
 800589a:	2300      	movne	r3, #0
 800589c:	eba6 0807 	sub.w	r8, r6, r7
 80058a0:	608b      	str	r3, [r1, #8]
 80058a2:	f1b8 0f00 	cmp.w	r8, #0
 80058a6:	dd9c      	ble.n	80057e2 <__sflush_r+0x1a>
 80058a8:	6a21      	ldr	r1, [r4, #32]
 80058aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058ac:	4643      	mov	r3, r8
 80058ae:	463a      	mov	r2, r7
 80058b0:	4628      	mov	r0, r5
 80058b2:	47b0      	blx	r6
 80058b4:	2800      	cmp	r0, #0
 80058b6:	dc06      	bgt.n	80058c6 <__sflush_r+0xfe>
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058be:	81a3      	strh	r3, [r4, #12]
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	e78e      	b.n	80057e4 <__sflush_r+0x1c>
 80058c6:	4407      	add	r7, r0
 80058c8:	eba8 0800 	sub.w	r8, r8, r0
 80058cc:	e7e9      	b.n	80058a2 <__sflush_r+0xda>
 80058ce:	bf00      	nop
 80058d0:	dfbffffe 	.word	0xdfbffffe

080058d4 <_fflush_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	690b      	ldr	r3, [r1, #16]
 80058d8:	4605      	mov	r5, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	b913      	cbnz	r3, 80058e4 <_fflush_r+0x10>
 80058de:	2500      	movs	r5, #0
 80058e0:	4628      	mov	r0, r5
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	b118      	cbz	r0, 80058ee <_fflush_r+0x1a>
 80058e6:	6a03      	ldr	r3, [r0, #32]
 80058e8:	b90b      	cbnz	r3, 80058ee <_fflush_r+0x1a>
 80058ea:	f7ff f9a3 	bl	8004c34 <__sinit>
 80058ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0f3      	beq.n	80058de <_fflush_r+0xa>
 80058f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058f8:	07d0      	lsls	r0, r2, #31
 80058fa:	d404      	bmi.n	8005906 <_fflush_r+0x32>
 80058fc:	0599      	lsls	r1, r3, #22
 80058fe:	d402      	bmi.n	8005906 <_fflush_r+0x32>
 8005900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005902:	f7ff fb93 	bl	800502c <__retarget_lock_acquire_recursive>
 8005906:	4628      	mov	r0, r5
 8005908:	4621      	mov	r1, r4
 800590a:	f7ff ff5d 	bl	80057c8 <__sflush_r>
 800590e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005910:	07da      	lsls	r2, r3, #31
 8005912:	4605      	mov	r5, r0
 8005914:	d4e4      	bmi.n	80058e0 <_fflush_r+0xc>
 8005916:	89a3      	ldrh	r3, [r4, #12]
 8005918:	059b      	lsls	r3, r3, #22
 800591a:	d4e1      	bmi.n	80058e0 <_fflush_r+0xc>
 800591c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800591e:	f7ff fb86 	bl	800502e <__retarget_lock_release_recursive>
 8005922:	e7dd      	b.n	80058e0 <_fflush_r+0xc>

08005924 <__swhatbuf_r>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	460c      	mov	r4, r1
 8005928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800592c:	2900      	cmp	r1, #0
 800592e:	b096      	sub	sp, #88	; 0x58
 8005930:	4615      	mov	r5, r2
 8005932:	461e      	mov	r6, r3
 8005934:	da0d      	bge.n	8005952 <__swhatbuf_r+0x2e>
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	f013 0f80 	tst.w	r3, #128	; 0x80
 800593c:	f04f 0100 	mov.w	r1, #0
 8005940:	bf0c      	ite	eq
 8005942:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005946:	2340      	movne	r3, #64	; 0x40
 8005948:	2000      	movs	r0, #0
 800594a:	6031      	str	r1, [r6, #0]
 800594c:	602b      	str	r3, [r5, #0]
 800594e:	b016      	add	sp, #88	; 0x58
 8005950:	bd70      	pop	{r4, r5, r6, pc}
 8005952:	466a      	mov	r2, sp
 8005954:	f000 f87c 	bl	8005a50 <_fstat_r>
 8005958:	2800      	cmp	r0, #0
 800595a:	dbec      	blt.n	8005936 <__swhatbuf_r+0x12>
 800595c:	9901      	ldr	r1, [sp, #4]
 800595e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005962:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005966:	4259      	negs	r1, r3
 8005968:	4159      	adcs	r1, r3
 800596a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800596e:	e7eb      	b.n	8005948 <__swhatbuf_r+0x24>

08005970 <__smakebuf_r>:
 8005970:	898b      	ldrh	r3, [r1, #12]
 8005972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005974:	079d      	lsls	r5, r3, #30
 8005976:	4606      	mov	r6, r0
 8005978:	460c      	mov	r4, r1
 800597a:	d507      	bpl.n	800598c <__smakebuf_r+0x1c>
 800597c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	6123      	str	r3, [r4, #16]
 8005984:	2301      	movs	r3, #1
 8005986:	6163      	str	r3, [r4, #20]
 8005988:	b002      	add	sp, #8
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	ab01      	add	r3, sp, #4
 800598e:	466a      	mov	r2, sp
 8005990:	f7ff ffc8 	bl	8005924 <__swhatbuf_r>
 8005994:	9900      	ldr	r1, [sp, #0]
 8005996:	4605      	mov	r5, r0
 8005998:	4630      	mov	r0, r6
 800599a:	f7ff fbb5 	bl	8005108 <_malloc_r>
 800599e:	b948      	cbnz	r0, 80059b4 <__smakebuf_r+0x44>
 80059a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059a4:	059a      	lsls	r2, r3, #22
 80059a6:	d4ef      	bmi.n	8005988 <__smakebuf_r+0x18>
 80059a8:	f023 0303 	bic.w	r3, r3, #3
 80059ac:	f043 0302 	orr.w	r3, r3, #2
 80059b0:	81a3      	strh	r3, [r4, #12]
 80059b2:	e7e3      	b.n	800597c <__smakebuf_r+0xc>
 80059b4:	89a3      	ldrh	r3, [r4, #12]
 80059b6:	6020      	str	r0, [r4, #0]
 80059b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059bc:	81a3      	strh	r3, [r4, #12]
 80059be:	9b00      	ldr	r3, [sp, #0]
 80059c0:	6163      	str	r3, [r4, #20]
 80059c2:	9b01      	ldr	r3, [sp, #4]
 80059c4:	6120      	str	r0, [r4, #16]
 80059c6:	b15b      	cbz	r3, 80059e0 <__smakebuf_r+0x70>
 80059c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059cc:	4630      	mov	r0, r6
 80059ce:	f000 f851 	bl	8005a74 <_isatty_r>
 80059d2:	b128      	cbz	r0, 80059e0 <__smakebuf_r+0x70>
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	f023 0303 	bic.w	r3, r3, #3
 80059da:	f043 0301 	orr.w	r3, r3, #1
 80059de:	81a3      	strh	r3, [r4, #12]
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	431d      	orrs	r5, r3
 80059e4:	81a5      	strh	r5, [r4, #12]
 80059e6:	e7cf      	b.n	8005988 <__smakebuf_r+0x18>

080059e8 <_putc_r>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	460d      	mov	r5, r1
 80059ec:	4614      	mov	r4, r2
 80059ee:	4606      	mov	r6, r0
 80059f0:	b118      	cbz	r0, 80059fa <_putc_r+0x12>
 80059f2:	6a03      	ldr	r3, [r0, #32]
 80059f4:	b90b      	cbnz	r3, 80059fa <_putc_r+0x12>
 80059f6:	f7ff f91d 	bl	8004c34 <__sinit>
 80059fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059fc:	07d8      	lsls	r0, r3, #31
 80059fe:	d405      	bmi.n	8005a0c <_putc_r+0x24>
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	0599      	lsls	r1, r3, #22
 8005a04:	d402      	bmi.n	8005a0c <_putc_r+0x24>
 8005a06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a08:	f7ff fb10 	bl	800502c <__retarget_lock_acquire_recursive>
 8005a0c:	68a3      	ldr	r3, [r4, #8]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	60a3      	str	r3, [r4, #8]
 8005a14:	da05      	bge.n	8005a22 <_putc_r+0x3a>
 8005a16:	69a2      	ldr	r2, [r4, #24]
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	db12      	blt.n	8005a42 <_putc_r+0x5a>
 8005a1c:	b2eb      	uxtb	r3, r5
 8005a1e:	2b0a      	cmp	r3, #10
 8005a20:	d00f      	beq.n	8005a42 <_putc_r+0x5a>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	6022      	str	r2, [r4, #0]
 8005a28:	701d      	strb	r5, [r3, #0]
 8005a2a:	b2ed      	uxtb	r5, r5
 8005a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a2e:	07da      	lsls	r2, r3, #31
 8005a30:	d405      	bmi.n	8005a3e <_putc_r+0x56>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	059b      	lsls	r3, r3, #22
 8005a36:	d402      	bmi.n	8005a3e <_putc_r+0x56>
 8005a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a3a:	f7ff faf8 	bl	800502e <__retarget_lock_release_recursive>
 8005a3e:	4628      	mov	r0, r5
 8005a40:	bd70      	pop	{r4, r5, r6, pc}
 8005a42:	4629      	mov	r1, r5
 8005a44:	4622      	mov	r2, r4
 8005a46:	4630      	mov	r0, r6
 8005a48:	f7ff f9e3 	bl	8004e12 <__swbuf_r>
 8005a4c:	4605      	mov	r5, r0
 8005a4e:	e7ed      	b.n	8005a2c <_putc_r+0x44>

08005a50 <_fstat_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d07      	ldr	r5, [pc, #28]	; (8005a70 <_fstat_r+0x20>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	602b      	str	r3, [r5, #0]
 8005a5e:	f7fb fb94 	bl	800118a <_fstat>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	d102      	bne.n	8005a6c <_fstat_r+0x1c>
 8005a66:	682b      	ldr	r3, [r5, #0]
 8005a68:	b103      	cbz	r3, 8005a6c <_fstat_r+0x1c>
 8005a6a:	6023      	str	r3, [r4, #0]
 8005a6c:	bd38      	pop	{r3, r4, r5, pc}
 8005a6e:	bf00      	nop
 8005a70:	2000034c 	.word	0x2000034c

08005a74 <_isatty_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4d06      	ldr	r5, [pc, #24]	; (8005a90 <_isatty_r+0x1c>)
 8005a78:	2300      	movs	r3, #0
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	4608      	mov	r0, r1
 8005a7e:	602b      	str	r3, [r5, #0]
 8005a80:	f7fb fb93 	bl	80011aa <_isatty>
 8005a84:	1c43      	adds	r3, r0, #1
 8005a86:	d102      	bne.n	8005a8e <_isatty_r+0x1a>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	b103      	cbz	r3, 8005a8e <_isatty_r+0x1a>
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	bd38      	pop	{r3, r4, r5, pc}
 8005a90:	2000034c 	.word	0x2000034c

08005a94 <_sbrk_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4d06      	ldr	r5, [pc, #24]	; (8005ab0 <_sbrk_r+0x1c>)
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	f7fb fb9c 	bl	80011dc <_sbrk>
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	d102      	bne.n	8005aae <_sbrk_r+0x1a>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	b103      	cbz	r3, 8005aae <_sbrk_r+0x1a>
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
 8005ab0:	2000034c 	.word	0x2000034c

08005ab4 <_init>:
 8005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab6:	bf00      	nop
 8005ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aba:	bc08      	pop	{r3}
 8005abc:	469e      	mov	lr, r3
 8005abe:	4770      	bx	lr

08005ac0 <_fini>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	bf00      	nop
 8005ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac6:	bc08      	pop	{r3}
 8005ac8:	469e      	mov	lr, r3
 8005aca:	4770      	bx	lr
